<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Call stack - Wikipedia, the free encyclopedia</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta name="generator" content="MediaWiki 1.17wmf1" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Call_stack&amp;action=edit" />
<link rel="edit" title="Edit this page" href="/w/index.php?title=Call_stack&amp;action=edit" />
<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki%21legacy%21commonPrint%7Cmediawiki%21legacy%21shared%7Cskins%21vector&amp;only=styles&amp;skin=vector" type="text/css" media="all" />
<meta name="ResourceLoaderDynamicStyles" content="" /><link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector" type="text/css" media="all" />
<style type="text/css" media="all">a.new,#quickbar a.new{color:#ba0000}

/* cache key: enwiki:resourceloader:filter:minify-css:5:f2a9127573a22335c2a9102b208c73e7 */</style>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector" type="text/javascript"></script>
<script type="text/javascript">if ( window.mediaWiki ) {
	mediaWiki.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Call_stack", "wgTitle": "Call stack", "wgAction": "view", "wgArticleId": 1718105, "wgIsArticle": true, "wgUserName": null, "wgUserGroups": ["*"], "wgCurRevisionId": 436709658, "wgCategories": ["All accuracy disputes", "Articles with disputed statements from June 2011", "Subroutines"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": [], "wgSearchNamespaces": [0], "wgFlaggedRevsParams": {"tags": {"status": {"levels": 1, "quality": 2, "pristine": 3}}}, "wgStableRevisionId": null, "wgRevContents": {"error": "Unable to get content.", "waiting": "Waiting for content"}, "wgWikimediaMobileUrl": "http://en.m.wikipedia.org/wiki", "wgVectorEnabledModules": {"collapsiblenav": true, "collapsibletabs": true, "editwarning": true, "expandablesearch": false, "footercleanup": false, "sectioneditlinks": false, "simplesearch": true, "experiments": true}, "wgWikiEditorEnabledModules": {"toolbar": true, "dialogs": true, "templateEditor": false, "templates": false, "addMediaWizard": false, "preview": false, "previewDialog": false, "publish": false, "toc": false}, "wgTrackingToken": "a73a54afc9b95c788c9d724cf38b9a52", "wikilove-recipient": "", "wikilove-edittoken": "+\\", "wikilove-anon": 0, "Geo": {"city": "", "country": ""}, "wgNoticeProject": "wikipedia"});
}
</script>

<script type="text/javascript">wgNamespaceNumber=0;wgAction="view";wgPageName="Call_stack";wgMainPageTitle="Main Page";wgWikimediaMobileUrl="http:\/\/en.m.wikipedia.org\/wiki";</script><script src="http://bits.wikimedia.org/w/extensions-1.17/WikimediaMobile/MobileRedirect.js?9.2" type="text/javascript"></script><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/skins-1.17/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr ns-0 ns-subject page-Call_stack skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- sitenotice -->
			<div id="siteNotice"><!-- centralNotice loads here --><script type="text/javascript">
/* <![CDATA[ */
document.writeln("\x3cdiv id=\"localNotice\"\x3e\x3cp\x3e\x3c/p\x3e\n\x3c/div\x3e");
/* ]]> */
</script></div>
			<!-- /sitenotice -->
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Call stack</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
				<!-- tagline -->
				<div id="siteSub">From Wikipedia, the free encyclopedia</div>
				<!-- /tagline -->
				<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="#mw-head">navigation</a>,
					<a href="#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodytext -->
				<p>In <a href="/wiki/Computer_science" title="Computer science">computer science</a>, a <b>call stack</b> is a <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack</a> data structure that stores information about the active <a href="/wiki/Subroutine" title="Subroutine">subroutines</a> of a <a href="/wiki/Computer_program" title="Computer program">computer program</a>. This kind of stack is also known as an <b>execution stack</b>, <b>control stack</b>, <b>run-time stack</b>, or <b>machine stack</b>, and is often shortened to just "the stack". Although maintenance of the call stack is important for the proper functioning of most <a href="/wiki/Software" title="Software" class="mw-redirect">software</a>, the details are normally hidden and automatic in <a href="/wiki/High-level_programming_language" title="High-level programming language">high-level programming languages</a>.</p>
<p>A call stack is used for several related purposes, but the main reason for having one is to keep track of the point to which each active subroutine should return control when it finishes executing. An active subroutine is one that has been called but is yet to complete execution after which control should be handed back to the point of call. Such activations of subroutines may be nested to any level (recursive as a special case), hence the stack structure. If, for example, a subroutine <code>DrawSquare</code> calls a subroutine <code>DrawLine</code> from four different places, <code>DrawLine</code> must know where to return when its execution completes. To accomplish this, the <a href="/wiki/Memory_address" title="Memory address">address</a> following the call <a href="/wiki/Instruction_(computer_science)" title="Instruction (computer science)" class="mw-redirect">instruction</a>, the <i>return address</i>, is pushed onto the call stack with each call.</p>
<table id="toc" class="toc">
<tr>
<td>
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Functions_of_the_call_stack"><span class="tocnumber">2</span> <span class="toctext">Functions of the call stack</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Structure"><span class="tocnumber">3</span> <span class="toctext">Structure</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#The_stack_and_frame_pointers"><span class="tocnumber">3.1</span> <span class="toctext">The stack and frame pointers</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Stack_frame_sizes"><span class="tocnumber">3.2</span> <span class="toctext">Stack frame sizes</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Storing_the_address_to_the_caller.27s_frame"><span class="tocnumber">3.3</span> <span class="toctext">Storing the address to the caller's frame</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Lexically_nested_routines"><span class="tocnumber">3.4</span> <span class="toctext">Lexically nested routines</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Overlap"><span class="tocnumber">3.5</span> <span class="toctext">Overlap</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#Use"><span class="tocnumber">4</span> <span class="toctext">Use</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="#Call_site_processing"><span class="tocnumber">4.1</span> <span class="toctext">Call site processing</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Callee_processing"><span class="tocnumber">4.2</span> <span class="toctext">Callee processing</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Return_processing"><span class="tocnumber">4.3</span> <span class="toctext">Return processing</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Unwinding"><span class="tocnumber">4.4</span> <span class="toctext">Unwinding</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-14"><a href="#Call_stacks_and_software_testing"><span class="tocnumber">5</span> <span class="toctext">Call stacks and software testing</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="#Performance_analysis"><span class="tocnumber">6</span> <span class="toctext">Performance analysis</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="#Security"><span class="tocnumber">7</span> <span class="toctext">Security</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</td>
</tr>
</table>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=1" title="Edit section: Description">edit</a>]</span> <span class="mw-headline" id="Description">Description</span></h2>
<p>Since the call stack is organized as a <a href="/wiki/Stack_(data_structure)" title="Stack (data structure)">stack</a>, the caller <i>pushes</i> the return address onto the stack, and the called subroutine, when it finishes, <a href="/wiki/Pop_(computer_programming)" title="Pop (computer programming)" class="mw-redirect">pops</a> the return address off the call stack and transfers control to that address. If a called subroutine calls on to yet another subroutine, it will push another return address onto the call stack, and so on, with the information stacking up and unstacking as the program dictates. If the pushing consumes all of the space allocated for the call stack, an error called a <a href="/wiki/Stack_overflow" title="Stack overflow">stack overflow</a> occurs, generally causing the program to <a href="/wiki/Crash_(computing)" title="Crash (computing)">crash</a>. Adding a subroutine's entry to the call stack is sometimes called <b>winding</b>; conversely, removing entries is <b>unwinding</b>.</p>
<p>There is usually exactly one call stack associated with a running program (or more accurately, with each <a href="/wiki/Task_(computers)" title="Task (computers)" class="mw-redirect">task</a> or <a href="/wiki/Thread_(computer_science)" title="Thread (computer science)">thread</a> of a <a href="/wiki/Process_(computing)" title="Process (computing)">process</a>), although additional stacks may be created for <a href="/wiki/Signal_(computing)" title="Signal (computing)">signal</a> handling or <a href="/wiki/Cooperative_multitasking" title="Cooperative multitasking" class="mw-redirect">cooperative multitasking</a> (as with <a href="/wiki/Setcontext" title="Setcontext">setcontext</a>). Since there is only one in this important context, it can be referred to as <i>the</i> stack (implicitly, "of the task").</p>
<p>In <a href="/wiki/High-level_programming_language" title="High-level programming language">high-level programming languages</a>, the specifics of the call stack are usually hidden from the programmer. They are given access only to a set of functions, and not the memory on the stack itself. Most <a href="/wiki/Assembly_language" title="Assembly language">assembly languages</a>, on the other hand, require programmers to be involved with manipulating the stack. The actual details of the stack in a <a href="/wiki/Programming_language" title="Programming language">programming language</a> depend upon the <a href="/wiki/Compiler" title="Compiler">compiler</a>, <a href="/wiki/Operating_system" title="Operating system">operating system</a>, and the available <a href="/wiki/Instruction_set" title="Instruction set">instruction set</a>.</p>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=2" title="Edit section: Functions of the call stack">edit</a>]</span> <span class="mw-headline" id="Functions_of_the_call_stack">Functions of the call stack</span></h2>
<p>As noted above, the primary purpose of a call stack is:</p>
<ul>
<li><b>Storing the return address</b> – When a subroutine is called, the location (address) of the instruction at which it can later resume needs to be saved somewhere. Using a stack to save the return address has important advantages over alternatives. One is that each task has its own stack, and thus the subroutine can be <a href="/wiki/Reentrant_(subroutine)" title="Reentrant (subroutine)" class="mw-redirect">reentrant</a>, that is, can be active simultaneously for different tasks doing different things. Another benefit is that <a href="/wiki/Recursion_(computer_science)" title="Recursion (computer science)">recursion</a> is automatically supported. When a function calls itself recursively, a return address needs to be stored for each activation of the function so that it can later be used to return from the function activation. This capability is automatic with a stack.</li>
</ul>
<p>A call stack may serve additional functions, depending on the language, operating system, and machine environment. Among them can be:</p>
<ul>
<li><b>Local data storage</b> – A subroutine frequently needs memory space for storing the values of <a href="/wiki/Local_variable" title="Local variable">local variables</a>, the variables that are known only within the active subroutine and do not retain values after it returns. It is often convenient to allocate space for this use by simply moving the top of the stack by enough to provide the space. This is very fast compared to <a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">heap</a> allocation. Note that each separate activation of a subroutine gets its own separate space in the stack for locals.</li>
</ul>
<ul>
<li><b>Parameter passing</b> – Subroutines often require that values for <a href="/wiki/Parameter_(computer_science)" title="Parameter (computer science)" class="mw-redirect">parameters</a> be supplied to them by the code which calls them, and it is not uncommon that space for these parameters may be laid out in the call stack. Generally if there are only a few small parameters, <a href="/wiki/Processor_register" title="Processor register">processor registers</a> will be used to pass the values, but if there are more parameters than can be handled this way, memory space will be needed. The call stack works well as a place for these parameters, especially since each call to a subroutine, which will have differing values for parameters, will be given separate space on the call stack for those values.</li>
</ul>
<ul>
<li><b>Evaluation stack</b> – Operands for arithmetic or logical operations are most often placed into registers and operated on there. However, in some situations the operands may be stacked up to an arbitrary depth, which means something more than registers must be used (this is the case of register spilling). The stack of such operands, rather like that in an <a href="/wiki/RPN_calculator" title="RPN calculator" class="mw-redirect">RPN calculator</a>, is called an evaluation stack, and may occupy space in the call stack.</li>
</ul>
<ul>
<li><b>Pointer to current instance</b> - Some <a href="/wiki/Object-oriented_language" title="Object-oriented language" class="mw-redirect">object-oriented languages</a> (e.g., <a href="/wiki/C%2B%2B" title="C++">C++</a>), store the <a href="/wiki/This_(computer_science)" title="This (computer science)" class="mw-redirect"><i>this</i> pointer</a> along with function arguments in the call stack when invoking methods. The <i>this</i> pointer points to the <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a> <a href="/wiki/Instance_(computer_science)" title="Instance (computer science)">instance</a> associated with the method to be invoked.</li>
</ul>
<ul>
<li><b>Enclosing subroutine context</b> - Some programming languages (e.g., <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a> and <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>) support <a href="/wiki/Nested_functions" title="Nested functions" class="mw-redirect">nested subroutines</a>, allowing an inner routine to access the context of its outer enclosing routine, i.e., the parameters and local variables within the scope of the outer routine. Such static nesting can repeat - a function declared within a function declared within a function... The implementation must provide a means by which a called function at any given static nesting level can reference the enclosing frame at each enclosing nesting level. Commonly this reference is implemented by a pointer to the encompassing frame, called a "downstack link" or "static link", to distinguish it from the "dynamic link" that refers to the immediate caller (which need not be the static parent function). For example, languages often allow inner routines to call themselves recursively, resulting in multiple call frames for the inner routine's invocations, all of whose static links point to the same outer routine context. Instead of a static link, the references to the enclosing static frames may be collected into an array of pointers known as a <i>display</i> which is indexed to locate a desired frame. The <a href="/wiki/Burroughs_large_systems" title="Burroughs large systems">Burroughs B6500</a> had such a display in hardware that supported up to 32 levels of static nesting.</li>
</ul>
<ul>
<li><b>Other return state</b> – Besides the return address, in some environments there may be other machine or software states that need to be restored when a subroutine returns. This might include things like privilege level, exception handling information, arithmetic modes, and so on. If needed, this may be stored in the call stack just as the return address is.</li>
</ul>
<p>The typical call stack is used for the return address, locals, and parameters (known as a <i>call frame</i>). In some environments there may be more or fewer functions assigned to the call stack. In the <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth programming language</a>, for example, only the return address and local variables are stored on the call stack (which in that environment is named the <i>return stack</i>); parameters are stored on a separate <i>data stack</i>. Most Forths also have a third stack for <a href="/wiki/Floating_point" title="Floating point">floating point</a> parameters.</p>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=3" title="Edit section: Structure">edit</a>]</span> <span class="mw-headline" id="Structure">Structure</span></h2>
<p>A call stack is composed of <b>stack frames</b> (also called <b>activation records</b> or <b>activation frames</b>). These are <a href="/wiki/Machine_dependent" title="Machine dependent" class="mw-redirect">machine dependent</a> data structures containing subroutine state information. Each stack frame corresponds to a call to a subroutine which has not yet terminated with a return. For example, if a subroutine named <code>DrawPoint</code> is currently running, having just been called by a subroutine <code>DrawLine</code> having been called by a <code>DrawSquare</code> subroutine, the top part of the call stack might be laid out like this (where the stack is growing towards the top):</p>
<div class="center">
<div class="floatnone"><a href="/wiki/File:Call_stack_layout.svg" class="image"><img alt="Call stack layout.svg" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Call_stack_layout.svg/342px-Call_stack_layout.svg.png" width="342" height="279" /></a></div>
</div>
<p>The stack frame at the top of the stack is for the currently executing routine. The stack frame usually includes at least the following items:</p>
<ul>
<li>the arguments (parameter values) passed to the routine (if any)</li>
<li>the return address back to the routine's caller</li>
<li>space for the local variables of the routine (if any)</li>
</ul>
<h4><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=4" title="Edit section: The stack and frame pointers">edit</a>]</span> <span class="mw-headline" id="The_stack_and_frame_pointers">The stack and frame pointers</span></h4>
<p>The data stored in the stack frame may sometimes be accessed directly via the <b>stack pointer</b> register (which indicates the current top of the stack). However, as the stack pointer is variable during the activation of the routine, memory locations within the stack frame are more typically accessed via a separate register which makes relative addressing simpler and also enables dynamic allocation mechanisms (see below). This register is often termed the <b>frame pointer</b> and is set up at procedure entry to point to a <i>fixed</i> location in the frame structure (such as the return address).</p>
<h4><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=5" title="Edit section: Stack frame sizes">edit</a>]</span> <span class="mw-headline" id="Stack_frame_sizes">Stack frame sizes</span></h4>
<p>As different routines have different parameters and local data, stack frames have various sizes. Although they may often be fixed across all activations of a particular routine, many modern languages also support <i>dynamic</i> allocations on the stack, which means that the local data area will vary from activation to activation with a size that must be unspecified when the program is <a href="/wiki/Compiler" title="Compiler">compiled</a>. In this case, access via a frame pointer, rather than via the stack pointer, is usually necessary since the offsets from the stack top to values such as the return address would not be known at compile time.</p>
<h4><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=6" title="Edit section: Storing the address to the caller's frame">edit</a>]</span> <span class="mw-headline" id="Storing_the_address_to_the_caller.27s_frame">Storing the address to the caller's frame</span></h4>
<p>In most systems a stack frame has a field to contain the previous value of the frame pointer register, the value it had while the caller was executing. For example, in the diagram above, the stack frame of <code>DrawLine</code> would have a memory location holding the frame pointer value that <code>DrawSquare</code> uses. The value is saved upon entry to the subroutine and restored for the return. Having such a field in a known location in the stack frame enables code to access each frame successively underneath the currently executing routine's frame, and also allows the routine to easily restore the frame pointer to the caller's frame, just before it returns.</p>
<h4><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=7" title="Edit section: Lexically nested routines">edit</a>]</span> <span class="mw-headline" id="Lexically_nested_routines">Lexically nested routines</span></h4>
<p>Programming languages that support <a href="/wiki/Nested_function" title="Nested function">nested subroutines</a> also have a field in the call frame that points to the stack frame of the <i>latest</i> activation of the procedure that most closely encapsulates the callee, i.e the immediate <i>scope</i> of the callee. This is called an <b>access link</b> or <b>static link</b> (as it keeps track of static nesting during dynamic and recursive calls) and provides the routine (as well as any other routines it may invoke) access to the local data of its encapsulating routines at every nesting level. Some architectures, compilers, or optimization cases store one link for each enclosing level (not just the immediately enclosing), so that deeply nested routines that access shallow data do not have to traverse more than one link, a strategy often called a <b>display</b><sup id="cite_ref-0" class="reference"><a href="#cite_note-0"><span>[</span>1<span>]</span></a></sup>. Access link(s) can be optimized away in cases where an inner function does not access any (non constant) local data in the encapsulation; pure functions communicating via parameters only would be an example of this. Some historical computers, such as the <a href="/wiki/Burroughs_large_systems" title="Burroughs large systems">Burroughs large systems</a>, had special "display registers" to support nested functions while compilers for most modern machines (such as the ubiquitous x86) simply reserve a few words on the stack for the pointers, as needed.</p>
<h4><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=8" title="Edit section: Overlap">edit</a>]</span> <span class="mw-headline" id="Overlap">Overlap</span></h4>
<p>For some purposes, the stack frame of a subroutine and that of its caller can be considered to overlap, the overlap consisting of the area where the parameters are passed from the caller to the callee. In some environments, the caller pushes each argument onto the stack, thus extending its stack frame, then invokes the callee. In other environments, the caller has a preallocated area at the top of its stack frame to hold the arguments it supplies to other subroutines it calls. This area is sometimes termed the <b>outgoing arguments area</b> or <b>callout area</b>. Under this approach, the size of the area is calculated by the compiler to be the largest needed by any called subroutine.</p>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=9" title="Edit section: Use">edit</a>]</span> <span class="mw-headline" id="Use">Use</span></h2>
<h3><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=10" title="Edit section: Call site processing">edit</a>]</span> <span class="mw-headline" id="Call_site_processing">Call site processing</span></h3>
<p>Usually the call stack manipulation needed at the site of a call to a subroutine is minimal (which is good since there can be many call sites for each subroutine to be called). The values for the actual arguments are evaluated at the call site, since they are specific to the particular call, and either pushed onto the stack or placed into registers, as determined by the <a href="/wiki/Calling_convention" title="Calling convention">calling convention</a> being used. The actual call instruction, such as "Branch and Link," is then typically executed to transfer control to the code of the target subroutine.</p>
<h3><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=11" title="Edit section: Callee processing">edit</a>]</span> <span class="mw-headline" id="Callee_processing">Callee processing</span></h3>
<p>In the called subroutine, the first code executed is usually termed the <a href="/wiki/Function_prologue" title="Function prologue">subroutine prologue</a>, since it does the necessary housekeeping before the code for the statements of the routine is begun.</p>
<p>The prologue will commonly save the return address left in a register by the call instruction by pushing the value onto the call stack. Similarly, the current stack pointer and/or frame pointer values may be pushed. Alternatively, some instruction set architectures automatically provide comparable functionality as part of the action of the call instruction itself, and in such an environment the prologue need not do this.</p>
<p>If frame pointers are being used, the prologue will typically set the new value of the frame pointer register from the stack pointer. Space on the stack for local variables can then be allocated by incrementally changing the stack pointer.</p>
<p>The <a href="/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth programming language</a> allows explicit winding of the call stack (called there the "return stack").</p>
<h3><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=12" title="Edit section: Return processing">edit</a>]</span> <span class="mw-headline" id="Return_processing">Return processing</span></h3>
<p>When a subroutine is ready to return, it executes an epilogue that undoes the steps of the prologue. This will typically restore saved register values (such as the frame pointer value) from the stack frame, pop the entire stack frame off the stack by changing the stack pointer value, and finally branch to the instruction at the return address. Under many calling conventions the items popped off the stack by the epilogue include the original argument values, in which case there usually are no further stack manipulations that need to be done by the caller. With some calling conventions, however, it is the caller's responsibility to remove the arguments from the stack after the return.</p>
<h3><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=13" title="Edit section: Unwinding">edit</a>]</span> <span class="mw-headline" id="Unwinding">Unwinding</span></h3>
<p>Returning from the called function will pop the top frame off of the stack, perhaps leaving a return value.</p>
<p>Some languages (such as <a href="/wiki/Pascal_programming_language" title="Pascal programming language" class="mw-redirect">Pascal</a>) allow a global <a href="/wiki/GOTO" title="GOTO" class="mw-redirect">goto</a> statement to transfer control out of a nested function and into a previously invoked outer function. This operation requires the stack to be unwound, removing as many stack frames as necessary to restore the proper context to transfer control to the target statement within the enclosing outer function. Such transfers of control are generally used only for error handling.</p>
<p>Other languages (such as <a href="/wiki/Object_Pascal" title="Object Pascal">Object Pascal</a>) provide <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a>, which also requires unwinding of the stack. The stack frame of a function contains one or more entries specifying exception handlers. When an exception is thrown, the stack is unwound until an exception handler is found that is prepared to handle (catch) the exception. <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> allows control of what happens when the stack is unwound by using the <code>unwind-protect</code> special operator.</p>
<p>When applying a <a href="/wiki/Continuation" title="Continuation">continuation</a>, the stack is (logically) unwound and then rewound with the stack of the continuation. This is not the only way to implement continuations; for example, using multiple, explicit stacks, application of a continuation can simply activate its stack and wind a value to be passed. The <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme programming language</a> allows arbitrary <a href="/wiki/Thunk" title="Thunk">thunks</a> to be executed in specified points on "unwinding" or "rewinding" of the control stack when a continuation is invoked.</p>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=14" title="Edit section: Call stacks and software testing">edit</a>]</span> <span class="mw-headline" id="Call_stacks_and_software_testing">Call stacks and software testing</span></h2>
<table class="metadata plainlinks ambox mbox-small-left ambox-style" style="">
<tr>
<td class="mbox-image"><a href="/wiki/File:Ambox_PR.svg" class="image"><img alt="Ambox PR.svg" src="http://upload.wikimedia.org/wikipedia/commons/thumb/b/b3/Ambox_PR.svg/25px-Ambox_PR.svg.png" width="25" height="25" /></a></td>
<td class="mbox-text" style="">This section <b>reads like a <a href="/wiki/Wikipedia:NOT#NEWS" title="Wikipedia:NOT" class="mw-redirect">news release</a></b> and needs to be <a href="/wiki/Wikipedia:NPOV" title="Wikipedia:NPOV" class="mw-redirect">rewritten</a>.</td>
</tr>
</table>
<p>A recently reported technique <sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>2<span>]</span></a></sup> uses call stacks in a very different way than others discussed on this page. It uses call stacks for <a href="/w/index.php?title=Test_suite_reduction&amp;action=edit&amp;redlink=1" class="new" title="Test suite reduction (page does not exist)">test suite reduction</a>. Briefly, test suite reduction seeks to reduce the number of test cases in a test suite while retaining a high percentage of the original suite’s fault detection effectiveness. Two test cases are considered to be equivalent if they generate the same set of call stacks during execution. See <sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>3<span>]</span></a></sup> for more details.</p>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=15" title="Edit section: Performance analysis">edit</a>]</span> <span class="mw-headline" id="Performance_analysis">Performance analysis</span></h2>
<p>Taking random-time samples of the call stack can be very useful in optimizing performance of programs. The reason is if a subroutine call instruction appears on the call stack for a certain fraction of execution time, its possible removal would save that much time.<sup class="noprint Inline-Template" title="The material in the vicinity of this tag may not be factual or accurate from June 2011" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Disputed_statement" title="Wikipedia:Disputed statement">dubious</a> <span class="metadata">– <a href="/wiki/Talk:Call_stack#Dubious" title="Talk:Call stack">discuss</a></span></i>]</sup> See <a href="/wiki/Performance_analysis" title="Performance analysis" class="mw-redirect">Performance analysis</a> and <a href="/wiki/Deep_sampling" title="Deep sampling">Deep sampling</a>.</p>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=16" title="Edit section: Security">edit</a>]</span> <span class="mw-headline" id="Security">Security</span></h2>
<p>In a language with free pointers and/or non-checked array writes (such as C), the mixing of control flow data affecting the execution of code (return addresses, saved frame pointers) and simple program data (parameters, return values) in a call stack is a security risk, possibly <a href="/wiki/Exploit_(computer_security)" title="Exploit (computer security)">exploitable</a> through <a href="/wiki/Buffer_overflow" title="Buffer overflow">buffer overflows</a>.</p>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=17" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h2>
<ul>
<li><a href="/wiki/Dynamic_memory_allocation" title="Dynamic memory allocation">Dynamic memory allocation</a></li>
<li><a href="/wiki/Automatic_memory_allocation" title="Automatic memory allocation" class="mw-redirect">Automatic memory allocation</a></li>
<li><a href="/wiki/Calling_convention" title="Calling convention">Calling convention</a></li>
<li><a href="/wiki/Stack_buffer_overflow" title="Stack buffer overflow">Stack buffer overflow</a></li>
<li><a href="/w/index.php?title=Segmented_stack&amp;action=edit&amp;redlink=1" class="new" title="Segmented stack (page does not exist)">Segmented stack</a></li>
</ul>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=18" title="Edit section: References">edit</a>]</span> <span class="mw-headline" id="References">References</span></h2>
<ol class="references">
<li id="cite_note-0"><b><a href="#cite_ref-0">^</a></b> <a href="http://c2.com/cgi/wiki?AlternativeMicroprocessorDesign" class="extiw" title="wiki:AlternativeMicroprocessorDesign">wiki:AlternativeMicroprocessorDesign</a></li>
<li id="cite_note-1"><b><a href="#cite_ref-1">^</a></b> “Call Stack Coverage for GUI Test-Suite Reduction” by Scott McMaster and Atif M. Memon. In Proceedings of the 17th IEEE International Symposium on Software Reliability Engineering (ISSRE 2006), Nov. 2006.</li>
<li id="cite_note-2"><b><a href="#cite_ref-2">^</a></b> “Call-Stack Coverage for GUI Test-Suite Reduction” by Scott McMaster and Atif M. Memon. IEEE Trans. Softw. Eng., 2008, IEEE Press.</li>
</ol>
<h2><span class="editsection">[<a href="/w/index.php?title=Call_stack&amp;action=edit&amp;section=19" title="Edit section: External links">edit</a>]</span> <span class="mw-headline" id="External_links">External links</span></h2>
<ul>
<li><a href="http://www.eventhelix.com/RealtimeMantra/Basics/CToAssemblyTranslation.htm" class="external text" rel="nofollow">Function Calling and Frame Pointer Operations in 68000</a></li>
</ul>


<!-- 
NewPP limit report
Preprocessor node count: 668/1000000
Post-expand include size: 4038/2048000 bytes
Template argument size: 1351/2048000 bytes
Expensive parser function count: 1/500
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:1718105-0!*!0!!en!4 and timestamp 20110711082544 -->
<div class="printfooter">
Retrieved from "<a href="http://en.wikipedia.org/wiki/Call_stack">http://en.wikipedia.org/wiki/Call_stack</a>"</div>
				<!-- /bodytext -->
								<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>: <span dir='ltr'><a href="/wiki/Category:Subroutines" title="Category:Subroutines">Subroutines</a></span></div><div id="mw-hidden-catlinks" class="mw-hidden-cats-hidden">Hidden categories: <span dir='ltr'><a href="/wiki/Category:All_accuracy_disputes" title="Category:All accuracy disputes">All accuracy disputes</a></span> | <span dir='ltr'><a href="/wiki/Category:Articles_with_disputed_statements_from_June_2011" title="Category:Articles with disputed statements from June 2011">Articles with disputed statements from June 2011</a></span></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
					<li  id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Call_stack" title="You are encouraged to log in; however, it is not mandatory. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/wiki/Call_stack"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="/wiki/Talk:Call_stack"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="/wiki/Call_stack" >Read</a></span></li>
					<li id="ca-edit"><span><a href="/w/index.php?title=Call_stack&amp;action=edit"  title="You can edit this page. &#10;Please use the preview button before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible "><span><a href="/w/index.php?title=Call_stack&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/w/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<div id="simpleSearch">
						<input id="searchInput" name="search" type="text"  title="Search Wikipedia [f]" accesskey="f"  value="" />
						<button id="searchButton" type='submit' name='button'  title="Search Wikipedia for this text"><img src="http://bits.wikimedia.org/skins-1.17/vector/images/search-ltr.png?301-3" alt="Search" /></button>
					</div>
			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="/wiki/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
				<ul>
					<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
					<li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
					<li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
					<li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
					<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
					<li id="n-sitesupport"><a href="http://wikimediafoundation.org/wiki/Special:Landingcheck?landing_page=WMFJA085&amp;language=en&amp;utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=20101204SB002" title="Support us">Donate to Wikipedia</a></li>
				</ul>
			</div>
</div>

<!-- /navigation -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- interaction -->
<div class="portal" id='p-interaction'>
	<h5>Interaction</h5>
	<div class="body">
				<ul>
					<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
					<li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
					<li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
					<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
					<li id="n-contact"><a href="/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact Wikipedia</a></li>
				</ul>
			</div>
</div>

<!-- /interaction -->

<!-- TOOLBOX -->
<div class="portal" id="p-tb">
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
					<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Call_stack" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
						<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Call_stack" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
																																					<li id="t-upload"><a href="/wiki/Wikipedia:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li>
											<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
											<li id="t-permalink"><a href="/w/index.php?title=Call_stack&amp;oldid=436709658" title="Permanent link to this revision of the page">Permanent link</a></li>
				<li id="t-cite"><a href="/w/index.php?title=Special:Cite&amp;page=Call_stack&amp;id=436709658" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- coll-print_export -->
<div class="portal" id='p-coll-print_export'>
	<h5>Print/export</h5>
	<div class="body">
				<ul id="collectionPortletList"><li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Call+stack" title="Create a book or page collection" rel="nofollow">Create a book</a></li><li id="coll-download-as-rl"><a href="/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Call+stack&amp;oldid=436709658&amp;writer=rl" title="Download a PDF version of this wiki page" rel="nofollow">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Call_stack&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li></ul>			</div>
</div>

<!-- /coll-print_export -->

<!-- LANGUAGES -->
<div class="portal" id="p-lang">
	<h5>Languages</h5>
	<div class="body">
		<ul>
					<li class="interwiki-el"><a href="http://el.wikipedia.org/wiki/%CE%A3%CF%84%CE%BF%CE%AF%CE%B2%CE%B1_%CE%BA%CE%BB%CE%AE%CF%83%CE%B5%CF%89%CE%BD" title="Στοίβα κλήσεων">Ελληνικά</a></li>
					<li class="interwiki-es"><a href="http://es.wikipedia.org/wiki/Pila_de_llamadas" title="Pila de llamadas">Español</a></li>
					<li class="interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Pile_d%27ex%C3%A9cution" title="Pile d'exécution">Français</a></li>
					<li class="interwiki-is"><a href="http://is.wikipedia.org/wiki/Kallhla%C3%B0i" title="Kallhlaði">Íslenska</a></li>
					<li class="interwiki-it"><a href="http://it.wikipedia.org/wiki/Call_stack" title="Call stack">Italiano</a></li>
					<li class="interwiki-ja"><a href="http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF" title="コールスタック">日本語</a></li>
					<li class="interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Pilha_de_chamada" title="Pilha de chamada">Português</a></li>
					<li class="interwiki-ru"><a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BA_%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%BE%D0%B2" title="Стек вызовов">Русский</a></li>
					<li class="interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Stackpekare" title="Stackpekare">Svenska</a></li>
					<li class="interwiki-uk"><a href="http://uk.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BA_%D0%B2%D0%B8%D0%BA%D0%BB%D0%B8%D0%BA%D1%96%D0%B2" title="Стек викликів">Українська</a></li>
				</ul>
	</div>
</div>

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
											<ul id="footer-info">
																	<li id="footer-info-lastmod"> This page was last modified on 28 June 2011 at 17:53.<br /></li>
																							<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.
See <a href="http://wikimediafoundation.org/wiki/Terms_of_use">Terms of use</a> for details.<br/>
Wikipedia&reg; is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.<br /></li><li class="noprint"><a class='internal' href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact us</a></li>
															</ul>
															<ul id="footer-places">
																	<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
																							<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
																							<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
															</ul>
											<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/skins-1.17/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<script type="text/javascript">if ( window.mediaWiki ) {
	mediaWiki.loader.load(["mediawiki.legacy.wikibits", "mediawiki.util", "mediawiki.legacy.ajax", "mediawiki.legacy.mwsuggest", "ext.vector.collapsibleNav", "ext.vector.collapsibleTabs", "ext.vector.editWarning", "ext.vector.simpleSearch", "ext.UserBuckets", "ext.articleFeedback.startup"]);
	mediaWiki.loader.go();
}
</script>

<script src="/w/index.php?title=Special:BannerController&amp;cache=/cn.js&amp;301-3" type="text/javascript"></script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector" type="text/javascript"></script>
<script type="text/javascript">if ( window.mediaWiki ) {
	mediaWiki.user.options.set({"ccmeonemails":0,"cols":80,"contextchars":50,"contextlines":5,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":false,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,
	"watchlistdays":"3","watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"flaggedrevssimpleui":1,"flaggedrevsstable":false,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"vector-simplesearch":1,"useeditwarning":1,"vector-collapsiblenav":1,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikilove-enabled":1,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,"searchNs109":false});;mediaWiki.loader.state({"user.options":"ready"});
	
	/* cache key: enwiki:resourceloader:filter:minify-js:5:c183491fdc987ec95b8873a74ef2bb96 */
}
</script><script type="text/javascript" src="http://geoiplookup.wikimedia.org/"></script>		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<!-- Served by srv265 in 0.091 secs. -->			</body>
</html>
