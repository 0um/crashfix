
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<html>
	<head>
<TITLE>Under the Hood, MSJ March 1999</TITLE>
<META NAME="Description" CONTENT="In this column, I'll describe a DLL that CoClassSyms hooks up with to generate a .DBG file. The generated .DBG file is the bare minimum required to get symbol information that is usable by a Microsoft? debugger." />
	<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "http://www.rsac.org/ratingsv01.html" l comment "RSACi North America Server" by "inet@microsoft.com" r (n 0 s 0 v 0 l 0))'>
	<META NAME="Robots" CONTENT="all" />
	<META NAME="MS.LOCALE" CONTENT="en-us" />
	<link type="text/css" rel="Stylesheet" href="/msj/css/msdnmag.css" />
	<link type="text/css" rel="Stylesheet" href="/msj/css/msdn.css" />
	<SCRIPT LANGUAGE="javascript" SRC="/msj/js/msdnmag.js"></SCRIPT>
	<link type='text/css' rel='Stylesheet' href='/library/mnp/2/aspx/css.aspx?locale=en-us&amp;name=QuickSearch&amp;name=Menu&amp;static=Page' />
<script type='text/javascript' language='Javascript' src='/msj/mnp_utility.mspx/menujs?mnpshell=%2fmsj%2f0399%2fconfig_issue.xml&amp;clicktrax=False'></script>
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7"><link rel='stylesheet' type='text/css' href='/library/toolbar/3.0/css.aspx?c=/msj/0399/config_issue.xml'/><script language='JavaScript'>var doImage=doImage;var TType=TType;var defaultSearchLable;
function mhHover(tbl,idx,cls){var t,d;if(document.getElementById)t=document.getElementById(tbl);else t=document.all(tbl);if(t==null)return;if(t.getElementsByTagName)d=t.getElementsByTagName("TD");else d=t.all.tags("TD");if(d==null)return;if(d.length<=idx)return;d[idx].className=cls;}
function footerjs(doc){};
var varSegmentation = 0;
var varClickTracking = 1;
var varCustomerTracking=1;
document.write("<script type='text/javascript' src='" + (window.location.protocol) + "//c.microsoft.com/ms.js'"+"'><\/script>");


var rsltextbox = 'msviLSBtbox'; var wtflag = false;
function stripSymbols () { var objrslttextbox = getObjectById(rsltextbox); if (objrslttextbox) { var form = objrslttextbox.form; var s = objrslttextbox.value; filteredValues = "<>!@^*"; var i; var returnString = ""; for (i = 0; i < s.length; i++) { var c = s.charAt(i); if (filteredValues.indexOf(c) == -1) { returnString += c; } else { returnString += " "; } } objrslttextbox.value = returnString; } if(!wtflag) { trackLSB("Site"); } } 
function addSubmitEvent() {
 msviLSBtbox=document.getElementById("msviLSBtbox")
 if(msviLSBtbox)
 {
    defaultSearchLable = msviLSBtbox.value;
 }
 var objrslttextbox = getObjectById(rsltextbox); 
 if (objrslttextbox) 
 { 
    var form = objrslttextbox.form;
     if (window.attachEvent) 
     { 
         form.attachEvent("onsubmit",stripSymbols); 
     }
     else 
     { 
        form.addEventListener("submit",stripSymbols,false);
     }
  } 
} 
function getObjectById(elid) 
{ 
    if (document.getElementById) 
    { 
        return document.getElementById(elid); 
    } 
    else if (document.all) 
    { 
        return document.all[elid]; 
    } 
    else if (document.layers) 
    { 
        return document.layers[elid];
    } 
} 
if (window.attachEvent) { window.attachEvent("onload",addSubmitEvent); } else { window.addEventListener("load",addSubmitEvent,false); } 
var FromWeb = false;
function trackLSB(type)
{

  clearDefaultSearchLable();
 
  if(type=="Web")
    FromWeb = true;
  var tmp = document.getElementById("msviLSBtbox");
  var errorInfo = document.getElementById("errorInfo");
  if(type=="Site" && tmp.value.length==0 && !FromWeb)
  {
       tmp.value=errorInfo.value;
       tmp.style.color='#bc2b2b';
       ajustWidth();
  }
  if (typeof dcsMultiTrack == "function")
  { 
      var qu = document.getElementById("msviLSBtbox").value;
      var dcsuri = "results.aspx";
      var dcssip, ti;
      if (type == "Site")
      {
        dcssip = "search.microsoft.com";
        ti = "SearchButton: OnSite"; 
      }
      else if (type == "Web")
      {
         dcssip = "bing.com";
         ti = "SearchButton: Web";
      }
      dcsMultiTrack("DCS.dcsuri", dcsuri, "DCS.dcssip", dcssip, "WT.ti", ti, "WT.dl", "2", "WT.z_srch_t", qu, "DCS.dcsqry", "", "WT.ad", "", "WT.mc_id", ""); 
      wtflag = true; DCS.dcsuri=DCS.dcssip=DCS.dcsqry=WT.ti=WT.z_srch_t="";
  }
}

var isInputqu = false;
var searchBoxWidthWithKievLogo = 0;
var searchBoxWidthWithoutKievLogo = 0;
function clearDefaultSearchLable()
{var searchBox = document.getElementById("msviLSBtbox");
if(!isInputqu){searchBox.value = "";}}
var kievImageWidth = 47;
var isAdTboxWidth = false;
var isInitailed = false;
function ajustWidth()
{
    var searchBoxInput = document.getElementById("msviLSBtbox");
    var kievImage = document.getElementById("msviLSBlogo");
    if(!isInitailed)
    {
         searchBoxWidthWithKievLogo = searchBoxInput.style.width;
         searchBoxWidthWithoutKievLogo = searchBoxInput.clientWidth + (kievImageWidth - 1);
         isInitailed = true;
    }
    var width = kievImage.clientWidth-1;
    kievImage.style.width = '1px';
    var tBoxAloneWidth = searchBoxInput.clientWidth + width;
    searchBoxInput.style.width = tBoxAloneWidth;
    isAdTboxWidth = true;
    
      
    
}

function searchBoxFocused(defaultSearchLabel)
{
    var searchBoxInput = document.getElementById("msviLSBtbox");
    var kievImage = document.getElementById("msviLSBlogo");
    if(searchBoxInput.value == defaultSearchLabel || searchBoxInput.value==document.getElementById("errorInfo").value)
    {
        searchBoxInput.value = '';
        searchBoxInput.style.fontStyle = '';
        searchBoxInput.style.color='#000000';
        kievImage.style.width = '1px';
        if(searchBoxWidthWithKievLogo == 0 && !isAdTboxWidth &&!isInitailed)
        {
            searchBoxWidthWithKievLogo = searchBoxInput.style.width;
            searchBoxWidthWithoutKievLogo = searchBoxInput.clientWidth + (kievImageWidth - 1);
            isInitailed = true;
        }
        searchBoxInput.style.width = searchBoxWidthWithoutKievLogo;
    }
}

function searchBoxBlur(defaultSearchLabel)
{
    var searchBoxInput = document.getElementById("msviLSBtbox");
    var kievImage = document.getElementById("msviLSBlogo");
    if(searchBoxInput.value.replace(/(^\s*)|(\s*$)/g, '')=='') 
    {
        searchBoxInput.value=defaultSearchLabel;searchBoxInput.style.fontStyle ='Italic';
        searchBoxInput.style.color = "#a1a1a1";
        kievImage.style.width = kievImageWidth;
        
        searchBoxInput.style.width = searchBoxWidthWithKievLogo;
        isInputqu = false;
     }
     else
     {
        isInputqu = true;
     }
}

function Test()
{
    var searchBox = document.getElementById(rsltextbox);
    var go = document.getElementById("errorInfo");
    if(searchBox.value==go.value)
        return false;
    return true; 
}</script><meta name="WT.sp" content="_msj_" /><script language='JavaScript' src='http://js.microsoft.com/library/svy/broker.js'></script>
	</head>
	<body leftmargin="0" topmargin="0" rightmargin="5" bgcolor="#ffffff">
		
		<!--NOINDEX_START--><script language="Javascript">
				if (self.name == "MNPMainFrame") top.location.href = self.location.href;
			</script><div id="msviMasthead"><table cellpadding="0" cellspacing="0" width="100%" border="0"><tr><td width="100%"><table cellpadding="0" cellspacing="0" width="100%" height="22" border="0"><tr><td id="msviMarketing" bgcolor="#FFFFFF" nowrap=""><a href="http://go.microsoft.com/fwlink/?LinkID=92799">Click Here to Install Silverlight</a></td><td width="100%" bgcolor="#3568CC"><img src="/library/toolbar/3.0/gradient.aspx?a=FFFFFF&amp;b=3568CC&amp;w=250&amp;h=22&amp;d=ltr&amp;c=RkWooiSyZq0Yx5DIezuYpFhZ%2ffA%3d" width="250" height="22" alt="*" title=""></td></tr></table></td><td id="msviGlobalToolbar" bgcolor="#3568CC" height="22" nowrap="" dir="ltr" align="left"><table cellpadding="0" cellspacing="0" border="0"><tr><td id="msviRegionId" nowrap>United States</td><td id="msviRegionSelector" nowrap><a href="http://www.microsoft.com/worldwide">Change</a></td><td class="gtsep">|</td><td id="msviSiteMap" nowrap><a href="http://www.microsoft.com/en/us/sitemap.aspx">All Microsoft Sites</a></td><td class="msviPPSpace"></td></tr></table></td></tr></table><table cellpadding="0" cellspacing="0" width="100%" border="0"><tr valign="top"><td><table cellpadding="0" cellspacing="0" width="100%" height="42" border="0" style="height:expression(parentElement.parentElement.parentElement.parentElement.offsetHeight)"><tr valign="top"><td id="msviBrandBanner" bgcolor="FFFFFF"><a href="http://msdn.microsoft.com"><img src="/library/toolbar/3.0/images/banners/msdn_masthead_ltr.gif" width="225" height="42" alt="MSDN" title="" border="0"></a></td></tr></table></td><td id="msviGlobalSearch" width="100%" bgcolor="#6799FF"><div class="msviLSBsform"><form id="msviLSBForm" action="/library/toolbar/3.0/search.aspx" target="_top"><div id="msKiev"><input type="hidden" name="View" value="en-us"><input type="hidden" name="charset" value="iso-8859-1"><input id="msviLSBtbox" style="font-style:italic; color:#a1a1a1" onkeydown="if(event.keyCode == 13)searchBoxBlur('Search Microsoft.com')" onfocus="searchBoxFocused('Search Microsoft.com')" onblur="searchBoxBlur('Search Microsoft.com')" type="text" name="qu" value="Search Microsoft.com" autocomplete="off"><span id="msviLSBlogo" class="msviLSBlogo" title="Results by Bing"></span><input id="msviLSBssearch" title="Search Microsoft.com" type="image" name="site" src="/library/toolbar/3.0/images/LSB/Search_icon.gif" align="absmiddle" onclick="trackLSB('Site')"></div><input id="msviLSBWeb" title="Search the Web" name="sweb" type="submit" value="" onclick="trackLSB('Web')" align="absmiddle"></form></div></td></tr></table><div id="msviLocalToolbar"><table cellpadding="0" cellspacing="0" width="100%" height="19" border="0"><tr><td nowrap id="msviHomePageLink"><a href="/isapi/gomsdn.asp?TARGET=/default.aspx">MSDN Home</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 2, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 2, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/developercenters/">Developer Centers</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 4, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 4, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/library/default.asp">Library</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 6, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 6, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/downloads/">Downloads</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 8, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 8, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/code/">Code Center</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 10, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 10, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/subscriptions/">Subscriptions</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 12, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 12, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/worldwide.aspx">MSDN Worldwide</a></td><td width="100%"></td></tr></table></div></div>
			<table cellpadding="0" cellspacing="0" border="0" width="100%" dir="LTR">
				<tr valign="top">
		<td height="100%" style="overflow-x: hidden" width="181">
  <table cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td class="mnpQuickSearch" style="background: #CCCCCC; color: #000000" dir="LTR"><form style="margin: 0px" action="http://msdn.microsoft.com/msdn-online/shared/components/mscomsearch30.aspx"><nobr><font color="#000000">Search for</font><br><input class="mnpSearchBox" type="text" id="qu" name="qu" maxlength="255" style="width: 165px"><br><table cellpadding="0" cellspacing="0" border="0" width="100%" style="margin-top: 2px"><tr><td width="100%" class="mnpQuickSearch" style="padding: 0px"><select class="mnpSearchScopes" style="width: 137px" name="SearchScope"><option value="1">All of MSDN</option><option value="2">All Library</option><option value="3">Code &amp; Downloads</option><option value="7" selected>MSDN Magazine</option><option value="5">Support &amp; KB</option></select></td><td><input class="mnpSearchButton" type="submit" value="Go"><br></td></tr></table><a href="http://search.microsoft.com/search/search.aspx?View=msdn&amp;st=a" style="color: #000000" onmouseover="style.color='#0033CC';" onmouseout="style.color='#000000';">Advanced Search</a></nobr></form></td></tr></table>
  <div id="mnpMenuTop" class="mnpMenuTop" style="overflow-x: hidden; width: 181px" url="/msj/0399/hood/hood0399.aspx" dir="LTR" parent="/msj/0399/default.aspx"><div class="mnpInherit"><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/msj/default.aspx">MSJ Home</a></div><div class="mnpMenuBorder" style="width: 180px"></div><div class="mnpMenuRow" style="border-color: #999999; width: 153px; overflow-x: hidden" menu="m3e4a4a7084d2e7c3af2f07f03c1f144e"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/msj/0399/default.aspx">March 1999</a></div><div class="mnpMenuBorder" style="width: 180px"></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/find/default.aspx">Search</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden" menu="m3fd9abd6d4e6b1d47da1677743a69def"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/msj/code.aspx">Source Code</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden" menu="m0e5c80cdf8bdd73274e5171bd96f4ed9"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/msj/backissues.aspx">Back Issues</a></div><div class="mnpMenuBorder" style="width: 180px"></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/Subscribe.aspx">Subscribe</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/service.aspx">Reader Services</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/write.aspx">Write to Us</a></div><div class="mnpMenuBorder" style="width: 180px"></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/default.aspx">MSDN Magazine</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/mind/default.asp">MIND Archive</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="http://msdn.microsoft.com/newsgroups/topic.aspx?url=/msdn-files/028/201/133/topic.xml">Magazine Newsgroup</a></div><div class="mnpMenuBorder" style="width: 180px; margin-bottom: 0px"></div></div></div>
  <div class="mnpAds" style="width: 181px; height: 100%; padding-bottom: 20px; background: #F1F1F1; border-style: solid; border-color: #999999; border-width: 0px 1px 0px 0px">
    <center><script type="text/javascript" src=""></script></center>
  </div>
</td>
          <td width="100%" dir="LTR">
        <!--NOINDEX_STOP-->

<table class="downleveleyebrow" width="100%" height="24px"><tr><td>
<span id="ctl00_eb" style="COLOR: #003399;width: 100%;height: 24px;padding-top:4px;padding-left:14px;"><a href='isapi/gomsdn.asp?TARGET=/'>MSDN Home</a>&nbsp;&gt;&nbsp;<a href='/msj/'>MSJ</a>&nbsp;&gt;&nbsp;<a href='/msj/0399/default.aspx'>March 1999</a></span>

</td></tr></table>

	<!----------------->
	<!--BEGIN_CONTENT-->
	<!----------------->

<!--TOOLBAR_START-->

<!--TOOLBAR_EXEMPT-->

<!--TOOLBAR_END-->
<SCRIPT TYPE="text/javascript">
<!--

// -->
</SCRIPT>
<center><font size=3 color=000080 face="verdana, arial, helv"><B><a href="/msj/0399/default.aspx"  alt="home">March 1999</B></a></font></center><P>
<center><a href="/msj/default.asp" ><img border=0 src="/msj/images/msjheader02.gif" width=399 height=33 alt="Microsoft Systems Journal Homepage"></a></center>
<hr color=000080 width=300>

<center><img src="/msj/images/logos/hoodlogo.gif" width=244 height=77 border=0 alt="Under the Hood"></center>
<P>


<center><font size=2>Code for this article: <a href="http://download.microsoft.com/download/0/6/7/0678184e-905e-4783-9511-d4dca1f492b4/Mar99hood.exe">Mar99hood.exe</a> (31KB)</font></center>


<center>

<table width=380>
<tr><td>
<center><font size=2><i>Matt Pietrek does advanced research for the NuMega Labs of Compuware Corporation, and is the author of several books. 
His Web site at <a href="http://www.wheaty.net" >http://www.wheaty.net</a> has a FAQ page 
and information on previous columns and articles.</i></font></center>
</td></tr>
</table>
</center>



</center>
&nbsp;
<center>
<table width=380>
<tr><td>
<FONT SIZE=4 color=800080 face="verdana, arial, helv"><b>In this month's</b></font><font size=2> <i>MSJ</i> article, &quot;<a href="/msj/0399/comtype/comtype.aspx">Improve Your Debugging 
		by Generating Symbols from COM Type Libraries</a>,&quot; I 
		wrote about the CoClassSyms program that uses a COM component's type library to create debug symbols. The output from the article's code is a .MAP file. By itself, a .MAP file containing symbol information is somewhat interesting, but ultimately not terribly useful. You're really cooking with gas when you get a debugger to load and use the symbols.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>In this column, I'll describe a DLL that CoClassSyms hooks up with to generate a .DBG file. 
The generated .DBG file is the bare minimum required to get symbol information that is usable by a Microsoft</font><font size=1>&reg;</font><font size=2> debugger. Nonetheless, creating a .DBG file requires a deep understanding of symbol tables and provides a good opportunity to delve under the hood of 
.DBG files.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Deciding to store the debug symbol output from CoClassSyms in a .DBG file is a no-brainer. After all, Microsoft supplies .DBG files for just about every Windows NT</font><font size=1>&reg;</font><font size=2> component. I'm simply following Microsoft's lead. The primary advantage to .DBG files is that they allow debug information to reside in a file separate from the executable. The alternative is to append the symbol information to the executable, something I am loathe to do. If something's working, don't mess with it! Both WinDbg and the Visual Studio</font><font size=1>&reg;</font><font size=2> 6.0 debugger can use .DBG files, but I didn't have much luck with Visual Studio 5.0.<br>
</font><p>
<font FACE="Verdana, arial, helvetica" SIZE=4 COLOR=000080>
<center><b>The Scoop on .DBG Files</b>
</center>
</font>
<font size=2>
<p>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Contrary to popular belief, .DBG files aren't a distinct type of debug information à la COFF or CodeView</font><font size=1>&reg;</font><font size=2>. Rather, a .DBG file is merely a container for various types of debug information. Here's a snippet from WINNT.H that lists the types of debug information commonly found in .DBG files:
</font>
</td>
</tr>
</table>
</center>

<center>
<table width=380>
<tr>
<td>
<pre>
<font size=1>
 #define IMAGE_DEBUG_TYPE_COFF             1
 #define IMAGE_DEBUG_TYPE_CodeView         2
 #define IMAGE_DEBUG_TYPE_FPO              3
 #define IMAGE_DEBUG_TYPE_MISC             4
 #define IMAGE_DEBUG_TYPE_EXCEPTION        5
 #define IMAGE_DEBUG_TYPE_FIXUP            6
 #define IMAGE_DEBUG_TYPE_OMAP_TO_SRC      7
 #define IMAGE_DEBUG_TYPE_OMAP_FROM_SRC    8
</font></pre>
</td>
</tr>
</table>
</center>

<center>
<table width=380>
<tr>
<td>
<font size=2>Of particular interest are the first two entries, COFF and CodeView. These two debug information formats convey essentially the same information, and are what most people think of as debug information. The COFF format migrated to Win32</font><font size=1>&reg;</font><font size=2> from Unix System V, while CodeView originated at Microsoft.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Most .DBG files contain several different types of debug information. You can see this in <a TARGET="_self" href="javascript:OpenUrl('hoodtextfigs.htm#fig1');"><b>Figure 1</b></a>, which is an excerpt from running DUMPBIN /HEADERS ADVAPI32.DBG. The misc and fpo information is outside the scope of this discussion. The interesting thing here is that the .DBG file contains both COFF and CodeView (labeled &quot;cv&quot;) information. More on this later.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Moving to the bits and bytes level, what does a .DBG file look like? As it turns out, WINNT.H is unusually verbose on the subject, having this to say:<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>&quot;The beginning of the .DBG file contains the following structure which captures certain information from the image file. This allows a debug to proceed even if the original image file is not accessible. This header is followed by zero or more IMAGE_SECTION_HEADER structures, followed by zero or more IMAGE_DEBUG_DIRECTORY structures. The latter structures and those in the image file contain file offsets relative to the beginning of the .DBG file.&quot;<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>To be more succinct, a .DBG file begins with a standard header called an IMAGE_SEPARATE_DEBUG_HEADER. Following this is a copy of the executable's section table. After that comes an array of IMAGE_DEBUG_DIRECTORY structures, each structure describing one type of debug information in the file. At the end of the .DBG file is the raw debug information. <b>Figure 2</b> shows the structure of the .DBG file for the aforementioned ADVAPI32.DBG.<br>
</font>
</td>
</tr>
</table>
</center>

<center>
<table>
<tr>
<td bgcolor=ffffff>
<img src="hoodfig02.gif" height=215 width=212 alt="Figure 2  ADVAPI32.DBG File Structure"></td></tr>
<tr>
<td>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4><font size=1 face="verdana, arial, helv"><b>Figure 2  ADVAPI32.DBG File Structure</b>
</font>
</td>
</tr>
</table>
</center>
<p>
<center>
<table width=380>
<tr>
<td>
<font size=2>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The IMAGE_SEPARATE_DEBUG_HEADER is a condensed version of the fields found in an executable file. <a TARGET="_self" href="javascript:OpenUrl('hoodtextfigs.htm#fig3');"><b>Figure 3</b></a> shows the fields of an IMAGE_SEPARATE_
DEBUG_HEADER and how they map to the executable's fields. The first field (Signature) must contain the value 0x4944 to indicate that the file is a .DBG file. If you translate 0x4944 into ASCII, you will end up with DI (Debug Information).<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Following the IMAGE_SEPARATE_DEBUG_HEADER is an exact copy of the executable's section table. This is just an array of IMAGE_SECTION_HEADER structures, with one structure for each code and data section in the executable. Between the information in the .DBG file's section table and the IMAGE_SEPARATE_DEBUG_HEADER, most debuggers have everything they require without needing to locate and read the executable file.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Following the .DBG file header and section table is the debug directory. This consists of an array of IMAGE_
DEBUG_DIRECTORY structures, which is the same layout used to describe debug information in 
executable files. Some of the fields are meaningful, while some don't seem to be used. <a TARGET="_self" href="javascript:OpenUrl('hoodtextfigs.htm#fig4');"><b>Figure 4</b></a> shows my interpretation of the IMAGE_DEBUG_ DIRECTORY fields.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>This ends my whirlwind tour of .DBG files. Generating a .DBG file shouldn't be terribly hard, at least as far as creating the .DBG file infrastructure goes. Creating the IMAGE_SEPARATE_
DEBUG_HEADER and the section table is really just a matter of copying data out of the corresponding executable. I'll be generating only one type of debug information, so I'll need to create and write only a single IMAGE_DEBUG_DIRECTORY.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Things start to get messy when you create the debug information representing symbol names and their associated addresses. Up to this point, I've deferred deciding what debug format to generate. However, it can't be avoided any longer, so let's look at the issues and decide.<br>
</font><p>
<font FACE="Verdana, arial, helvetica" SIZE=4 COLOR=000080>
<center><b>Which Debug Format?</b>
</center>
</font>
<font size=2>
<p>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Recall that ADVAPI32.DBG had both COFF and CodeView symbols. Why two overlapping forms of debug information? Some Microsoft tools such as the Working Set Tuner (WST) require COFF symbols, while other tools require CodeView symbols. In the prehistory of Win32, COFF was the only game in town, since the early tools were written by the Windows NT team. Eventually, the Microsoft language folks turned their focus away from 16-bit products and the CodeView format was extended for 32-bit programming.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Of the three possible debug formats (COFF, CodeView, and PDB), the PDB format can be eliminated immediately. There's no documented interface to read .PDB files directly, much less write one. For the very basic symbol table I want to generate from CoClassSyms.EXE, it would be easiest to generate COFF symbols since the format is relatively simple as compared to the CodeView format.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>As I began writing CoClassSyms, my intention was to generate COFF symbols. However, I quickly learned that the Microsoft debuggers (WinDbg and the Visual Studio debugger) require CodeView format symbols. I briefly flirted with the idea of writing COFF symbols and then converting them to CodeView symbols. The Platform SDK contains the source code for a DLL called SYMCVT.DLL, which reads COFF symbols and writes an equivalent CodeView symbol table. (If you're curious, it's in the \Examples\Sdktools\
Image\Symcvt directory.) However, I didn't want to rely on SYMCVT.DLL being present on the user's system. Facing this self-imposed restriction, my only option was to create CodeView symbols.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>If you just want to read symbols and don't care what format they're in, consider using IMAGEHLP.DLL. It can read COFF, CodeView, and .PDB format information. The IMAGEHLP APIs such as SymGetSymFromAddr provide a common, abstracted layer over the different symbol table formats.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>For those of you seeking enlightenment about the .PDB format, you won't find it here. Microsoft doesn't document the format, and it has changed over time. The IMAGEHLP APIs are the only supported means of accessing .PDB information. 
However, it is interesting to note that .PDB information appears in the IMAGE_DEBUG_ DIRECTORY as CodeView information, but with the NB10 signature. Unlike regular CodeView symbols, an NB10 CodeView symbol table in an executable is simply a string containing a path to the .PDB file. Conceptually, this is similar to .LNK shortcuts.<br>
</font><p>
<font FACE="Verdana, arial, helvetica" SIZE=4 COLOR=000080>
<center><b>The CodeView Way</b>
</center>
</font>
<font size=2>
<p>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>As a rich symbol table format, CodeView symbols convey quite a bit of information. Besides associating symbol names with addresses, CodeView symbols also convey details such as user-defined types and source line to address mappings. When pushed to its full capabilities, the CodeView information produced by a compiler and linker is complex (to put it mildly).<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Part of the format's complexity is because CodeView information was originally supposed to be as small as possible. (Remember the carefree days of the 640KB MS-DOS</font><font size=1>&reg;</font><font size=2> address space?) Cramming information into every spare bit means more complexity. CodeView information is also cumbersome because the format has evolved over many iterations of compilers and linkers. Various tables and records are no longer generated by today's tools, yet they remain part of the specification and need to be dealt with properly when encountered.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Under the Specifications\Technologies and Languages node of the MSDN</font><font size=1>&#153;</font><font size=2> documentation, you'll find relatively up-to-date information on the CodeView format published with recent editions of Visual C++</font><font size=1>&reg;</font><font size=2>. However, it's so full of details that it's hard to separate the basics from the esoteric stuff. I'll go over just the basic pieces needed to generate a minimal CodeView symbol table.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>A CodeView symbol table always begins with a DWORD-sized signature, which is interpreted as ASCII text. These days, you'll usually see signatures of either NB09 or NB11. (An NB10 signature indicates that the symbol table is just a path to a .PDB file containing the actual symbols. I'm not concerned with .PDB files or the NB10 signature here.) The location of this DWORD signature in the file is known as the lfaBase. All offsets in the CodeView information are relative to the lfaBase value. This makes it easy to move the CodeView information to another file entirely (such as a .DBG file), without needing to recalculate all the file offsets stored throughout the CodeView information.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Following the initial DWORD NB<i>xx</i> signature is another DWORD containing the offset to the subsection directory. The subsection directory is a table of contents for all the subsections found in the symbol table. A subsection contains data such as source line information and public symbols. The subsection directory is an array of OMFDirEntry structures, one per subsection.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The OMFDirEntry structure is defined in CVEXEFMT.H (along with most of the other structures I'll mention from here on). You won't find CVEXEFMT.H in any of the standard C++ compiler include directories. Rather, on the most recent Platform SDK I found CVEXEFMT.H in the \Samples\Sdktools\Image\Include directory. What's more interesting is that the file is dated 9/7/1994. There are several other .H files in that directory that relate to CodeView symbols. Be forewarned that these .H files are old enough that they're missing many things described in the MSDN documentation.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Returning to CodeView subsections, a variety of subsection types are defined. Subsections define information such as compilation units (sstModule), source line to address mappings (sstSrcModule), public symbols (sstGlobalSym and sstGlobalPub), and user-defined types (sstGlobalTypes). The subsections have a variety of formats, some of which can be pretty contorted. Luckily, for the purpose of CoClassSyms, you need just a few of the relatively simple sections. Even within the few subsections my code writes, it takes some shortcuts to keep things as simple as possible.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>When I first set out to write a symbol table, my thought was to create just one CodeView subsection, an sstGlobalPub. This subsection would contain nothing more than symbol names and their addresses. In other words, the same thing you'd find in a .MAP file, albeit encoded in the proper CodeView binary format. As it turned out, it was necessary to create two other supporting subsections. However, the sstGlobalPub subsection is at the heart of the bare-bones symbol table. The key point is that I escaped the need to create complex subsections such as the types and source line information.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>In the sstGlobalPub subsection, the code writes a series of simple records representing the symbol to address mappings created by CoClassSyms.EXE. For each symbol name and address pair, the code emits an S_PUB32 record. The simple sstGlobalPub subsection created is just the header (an OMFSymHash structure), followed by a bunch of S_PUB32 records.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The S_PUB32 record is interpreted as a PUBSYM32 struct defined in CVINFO.H. (CVINFO.H is buried in the same sample directory as CVEXEFMT.H). Here's the layout of a PUBSYM32 record:
</font>
</td>
</tr>
</table>
</center>

<center>
<table width=380>
<tr>
<td>
<pre>
<font size=1>
 struct PUBSYM32 {
     unsigned short  reclen; // Record length
     unsigned short  rectyp  // S_PUB32
     unsigned long   off;    // Symbol offset
     unsigned short  seg;    // Symbol segment (section)
     unsigned short  typind; // Type index 
     unsigned char   name[1];// Length-prefixed name
 };
</font></pre>
</td>
</tr>
</table>
</center>

<center>
<table width=380>
<tr>
<td>
<font size=2>The first field, reclen, contains the length of the particular record instance. This is needed because PUBSYM32 records are of variable length. The next field contains the value 0x203, which is the enum value for S_PUB32. Following the S_PUB32 enum comes the address of the symbol in offset and segment format. These fields are set to the values passed by CoClassSyms.EXE, along with each symbol name.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Next in the PUBSYM32 record is the type index. Describing the CodeView type system could easily fill up an article in its own right. I'll sidestep that whole mess, since the 
code cheats and uses 0 as the type index. This means that the type of the symbol isn't known, which just happens to 
be true. The final field of the PUBSYM32 is a length-prefixed string (a byte length, followed by a non-null-terminated string).<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Besides the sstGlobalPub, the two additional sections necessary for a minimal CodeView symbol table are sstModule and sstSegMap. An sstModule normally corresponds to a single .OBJ file, and usually there are multiple sstModule subsections in a CodeView symbol table. However, for the purpose of synthesizing a .DBG file, I can get away with a single sstModule that represents the entire executable file.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The sstSegMap subsection is an anachronism in a 
Win32 symbol table. In Win32 there's really no need to translate between symbol table segment values and executable module segment values&#151;they're one and the same. Nonetheless, the Microsoft debuggers insist on seeing an sstSegMap. My code creates a minimalist sstSegMap, using 0 and -1 for most of the fields. After all, they'll be ignored by the debugger.<br>
</font><p>
<font FACE="Verdana, arial, helvetica" SIZE=4 COLOR=000080>
<center><b>The CoClassSymsDbgFile Code</b>
</center>
</font>
<font size=2>
<p>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Now that I've described some of the top-level characteristics of a minimal CodeView symbol table that conveys symbol names and their addresses, let's take a look at the code for the implementation DLL. This DLL, CoClassSymsDbgFile.DLL, creates a .DBG file containing the minimal CodeView symbols. By placing this DLL in the same directory as CoClassSyms.EXE, you'll get a .DBG file rather than a .MAP file when running CoClassSyms against an appropriate executable file.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The source code for CoClassSymsDbgFile.DLL can be found in <a TARGET="_self" href="javascript:OpenUrl('hoodtextfigs.htm#fig5');"><b>Figure 5</b></a>. The public interface to CoClassSymsDbgFile.DLL is the three exported CoClassSymsCallouts APIs described in &quot;;<a href="/msj/0399/comtype/comtype.aspx">Improve Your Debugging by Generating Symbols from COM Type Libraries</a>.&quot; The first API, CoClassSymsBeginSymbolCallouts, begins by mapping the specified executable into memory so that various fields and structures can be read from it. Next, the API synthesizes the name of the .DBG file and opens it for writing. Finally, the code invokes the CalculateCVInfoOffsets function.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>CalculateCVInfoOffsets is a small but essential function. The size and location of every portion of the CodeView symbols and encompassing .DBG file can be calculated at this early point, with one exception: the missing piece is the size of the sstGlobalPub section, which can't be calculated in advance. Another API will later be called an indeterminate number of times, once for each symbol. Rather than caching all the symbol names and addresses for writing later, I chose instead to write out each symbol in S_PUB32 format incrementally.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>To write each symbol as it's encountered requires the DLL to know in advance where the sstGlobalPub subsection will be. The CalculateCVInfoOffsets function calculates the total size of each item that precedes the sstGlobalPub in the file. This includes the IMAGE_SEPARATE_DEBUG_HEADER, the executable section table, the debug directory, the CodeView symbol table header, and an sstModule subsection. All of these items will 
be written later, after the sstGlobalPub subsection has been completed.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The second API exported by CoClassSymsDbgFile.DLL is CoClassSymsAddSymbol. This API delegates the workload to AddPublicSymbol32. AddPublicSymbol32 initializes a PUBSYM32 record with the passed information, seeks to the appropriate file offset, and writes out the record. Back in CoClassSymsAddSymbol, the code keeps a running tally of how big the sstGlobalPub section 
has become, storing the value in the g_cbPublicSymbols global variable.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The final API exported by CoClassSymsDbgFile.DLL is CoClassSymsSymbolsFinished. This high-level routine calls down to several more specialized functions to handle the grungy details of finishing off the CodeView symbol table and .DBG file constructs. The first order of business is to write the CodeView header, the subsection directory, and the remaining subsections (sstModule and sstSegMap). All this is accomplished inside the aptly named WriteRemainingCVInfo function.<br>
</font>
</td>
</tr>
</table>
</center>

<center>
<table>
<tr>
<td bgcolor=ffffff>
<img src="hoodfig06.gif" height=243 width=263 alt="Figure 6  CoClassSyms.DBG File"></td></tr>
<tr>
<td>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4><font size=1 face="verdana, arial, helv"><b>Figure 6  CoClassSyms.DBG File</b>
</font>
</td>
</tr>
</table>
</center>
<p>
<center>
<table width=380>
<tr>
<td>
<font size=2>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>After completing the CodeView symbol table, CoClassSymsSymbolsFinished turns its attention to writing the .DBG file structures that precede the symbol table. To review, these are the .DBG file header, the section table, and the debug directory. There are suitably named functions for writing out each element. Finally, the API closes the .DBG file and unmaps the executable file from memory. If all went well, there should be a healthy, happy baby .DBG file ready to be placed alongside its parent executable and usable by a debugger. <b>Figure 6</b> shows the layout of a CoClassSymsDbgFile-generated .DBG file.<br>
</font><p>
<font FACE="Verdana, arial, helvetica" SIZE=4 COLOR=000080>
<center><b>Some Final Notes</b>
</center>
</font>
<font size=2>
<p>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>To use CoClassSymsDbgFile.DLL successfully, you'll need to do a few things. First, make sure that CoClassSymsDbgFile.DLL is in the same directory as CoClassSyms.EXE, or in the path. After running CoClassSyms on the target executable, you should have a corresponding .DBG file in the current directory. You can poke at the .DBG file by running DUMPBIN /HEADERS on it. At the end of DUMPBIN's output should be a reference to cv information of format NB09. If you don't get a .DBG file, first try removing CoClassSymsDbgFile.DLL temporarily and see if CoClassSyms creates a reasonable-looking .MAP file.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Once you have a .DBG file, it's important to copy it to the same directory as the target executable. If you follow these steps, the Visual C++ 6.0 debugger should load the .DBG file automatically when the associated executable loads. When using WinDBG, you may have to tell WinDBG explicitly to load the symbol table. <br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>This column definitely isn't the definitive description of CodeView symbols or .DBG files. However, I've touched upon many of the key concepts necessary to work with this type of symbolic debug information. You may never have the need to write your own symbol tables, but many readers have asked about reading symbols in their own code. The code here is rather simplistic, but provides a starting point for more detailed exploration.<br>
<img align=right src="/msj/images/dingbats/end.gif" width="12" height="12">


<p>
<i>Have a suggestion for Under the Hood? Send it to Matt at <a >mpietrek@tiac.com</a> or <a href="http://www.wheaty.net" >http://www.wheaty.net</a>.<br></i>
</FONT>

</td></tr></table></center>
<!--Footer-->
<p>
<CENTER>
<TABLE>
<TR><TD WIDTH=380>
<CENTER><FONT SIZE=2 COLOR=#000000><i>From the March 1999 issue of <a href="/msj/default.asp" >Microsoft Systems Journal</A>.
 Get it at your local newsstand, or better yet, </i><A  HREF="/isapi/gomsdn.asp?TARGET=/msdnmag/subscribe.asp"><i>subscribe</i></A>.<br></FONT>
</CENTER>

</TD></TR>
</TABLE>
</CENTER>
<CENTER>
<table>
<tr><td width=380>
<HR width=80%>
<center><font SIZE=1><i><a href="/misc/info/cpyright.htm">&#169; 1999 Microsoft Corporation. All rights reserved.<br> Terms of Use</a>.
</i>
</font>
</center>
</td>
</tr>
</table>
</CENTER>


	<!----------------->
	<!--END_CONTENT-->
	<!----------------->
		
					</td>
		
				</tr>
			</table>
		<!--NOINDEX_START-->
<br clear="all" style="line-height: 1px; overflow: hidden"><table id="msviFooter" width="100%" cellpadding="0" cellspacing="0"><tr valign="bottom"><td id="msviFooter2" style="filter:progid:DXImageTransform.Microsoft.Gradient(startColorStr='#FFFFFF', endColorStr='#669AFF', gradientType='1')"><div id="msviLocalFooter"><nobr><a href="http://go.microsoft.com/?linkid=317027" target="_top">Manage Your Profile</a> |</nobr><wbr></wbr><nobr><a href="/legal/" target="_parent">Legal</a> |</nobr><wbr></wbr><nobr><a href="http://go.microsoft.com/?linkid=2028439" target="_parent">Contact us</a> |</nobr><wbr></wbr><nobr><a href="/isapi/gomsdn.asp?TARGET=/flash/" target="_parent">MSDN Flash Newsletter</a></nobr></div><div id="msviGlobalFooter"><span dir="ltr">&#169; 2011 Microsoft Corporation. All rights reserved.&nbsp;</span><nobr><a href="http://support.microsoft.com/contactus/?ws=mscom" target="_parent">Contact Us</a> |</nobr><wbr></wbr><nobr><a href="http://go.microsoft.com/?linkid=4412892" target="_parent">Terms of Use</a> |</nobr><wbr></wbr><nobr><a href="http://go.microsoft.com/?linkid=4412893" target="_parent">Trademarks</a> |</nobr><wbr></wbr><nobr><a href="http://go.microsoft.com/?linkid=4412894" target="_parent">Privacy Statement</a></nobr></div></td><td bgcolor="#669AFF" width="105"><img src="/library/toolbar/3.0/text.aspx?text=TQ%3d%3d&amp;fore=FFFFFF&amp;b=669AFF&amp;font=Microsoft+Logo+95%2c+13pt&amp;w=105&amp;h=29&amp;a=0&amp;l=0&amp;v=0&amp;c=eAdQAhJgwJihw2DKZGDGx4FnKIM%3d" width="105" height="29" alt="Microsoft" title="" border="0" /></td></tr></table><div style="display:none"><script type="text/javascript">var gDomain="m.webtrends.com";var gDcsId="dcsjwb9vb00000c932fd0rjc7_5p3t";var gFpc="WT_FPC";if(document.cookie.indexOf(gFpc+"=")==-1){document.write("<SCR"+"IPT TYPE='text/javascript' SRC='"+"http"+(window.location.protocol.indexOf('https:')==0?'s':'')+"://"+gDomain+"/"+gDcsId+"/wtid.js"+"'><\/SCR"+"IPT>");}</script><script src="http://js.microsoft.com/library/mnp/2/wt/js/wt.js" type="text/javascript"></script><noscript><img border="0" name="DCSIMG" width="1" height="1" src="http://m.webtrends.com/dcsjwb9vb00000c932fd0rjc7_5p3t/njs.gif?dcsuri=/nojavascript&WT.js=No"/></noscript></div><layer visibility="hide"><div style="display:none"><img alt="" width="0" height="0" border="0" hspace="0" vspace="0" src="http://c.microsoft.com/trans_pixel.asp?source=www&amp;TYPE=PV&amp;p=msj_0399_hood&amp;URI=%2fmsj%2f0399%2fhood%2fhood0399.aspx&amp;GUID=1F4FC18C-F71E-47FB-8FC9-612F8EE59C61&amp;r=http%3a%2f%2fwww.microsoft.com%2fmsj%2f0399%2fhood%2fhood0399.aspx&amp;lc=en-us"></div></layer>
	</body>
</html>