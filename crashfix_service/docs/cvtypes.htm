<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>  
  <title>everfall.com :: paste</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8"/>  <link rel="StyleSheet" href="style.css" type="text/css"/>
  <style type="text/css">   
      /* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */
.c .de1, .c .de2 {font-family: 'Courier New', Courier, monospace; font-weight: normal;font-size: small; color: #000020;}
.c  {color: #000000; border: 1px solid #999; background-color: #ffffff;}
.c a:link {color: #000060;}
.c a:hover {background-color: #f0f0f0;}
.c .imp {font-weight: bold; color: red;}
.c li {font-family: 'Courier New', Courier, monospace; color: black; font-weight: normal; font-style: normal;font: normal normal small 'Courier New', Courier, monospace; color: #003030;}
.c .kw1 {color: #b1b100;}
.c .kw2 {color: #000000; font-weight: bold;}
.c .kw3 {color: #000066;}
.c .kw4 {color: #993333;}
.c .co1 {color: #808080; font-style: italic;}
.c .co2 {color: #339933;}
.c .coMULTI {color: #808080; font-style: italic;}
.c .es0 {color: #000099; font-weight: bold;}
.c .br0 {color: #66cc66;}
.c .st0 {color: #ff0000;}
.c .nu0 {color: #cc66cc;}
.c .me1 {color: #202020;}
.c .me2 {color: #202020;}
  </style>  
  <script type="text/javascript"><!--
    if (document.all && !document.getElementById) { document.getElementById = function(id) { return document.all[id]; } }

    function enteredit() {
      document.getElementById("editbuttonbox").style.display = "none";      
      document.getElementById("editbox").style.display = "block";
    }
                         
    function canceledit() {
      document.getElementById("editbuttonbox").style.display = "block";     
      document.getElementById("editbox").style.display = "none";
    }

    function copysource() {
      copy(document.getElementById("source").value);
    }

    function copyhtml() {
      copy(document.getElementById("codebox").innerHTML);
    }

    function copy(text2copy) {
      if (window.clipboardData) {
        window.clipboardData.setData("Text",text2copy);
      } else {
        var flashcopier = 'flashcopier';
        if(!document.getElementById(flashcopier)) {
          var divholder = document.createElement('div');
          divholder.id = flashcopier;
          document.body.appendChild(divholder);
        }
        document.getElementById(flashcopier).innerHTML = '';
        text2copy = text2copy.replace(/\r\n/g, "\n").replace(/\n/g, "\r\n");
        var divinfo = '<embed src="_clipboard.swf" FlashVars="clipboard='+encodeURIComponent(text2copy)+'" width="0" height="0" type="application/x-shockwave-flash"></embed>';
        document.getElementById(flashcopier).innerHTML = divinfo;
      }
    }
  --></script>
  <script type="text/javascript" src="cookies.js"></script>
	<script type="text/javascript">
	  function set_cookie() {
      var expire_date = new Date();
      expire_date.setDate(expire_date.getDate() + 365);

      setCookie("PASTER_NAME", document.forms["pasteform"].from.value, expire_date)
      setCookie("PASTER_LANG", document.forms["pasteform"].language.value, expire_date)
	  }
	</script>	
  </head> 
  <body>
    
        <div id="mainbox">          
          <div id="logbox">
                        <p>
            <div><a class='versionlink' href='id.php?id=3mbt4ptysshv&v=0'>v 0.</a> Pasted by <span class='nick'>gr8</span> as <span class='language'>c</span> at 2010-10-28 09:19:52 MSK and set expiration to never.</div>            
            <div><br/>Paste will expire <span class="expiration">never</span>.
              Expiration is locked.</div>
            </p>
          </div>

          <div id="codebox">
            <p>
            <div class="c" style="color: #000000; border: 1px solid #999; background-color: #ffffff;"><ol><li class="li1"><div class="de1"><span class="co2">#pragma once</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma once</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// pdb_info.h</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// 06-25-2006 Sven B. Schreiber</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// sbs@orgon.com</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// PDB INTERFACE VERSIONS</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv41&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;920924</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv50&nbsp; &nbsp; &nbsp; &nbsp;19960502</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv50a&nbsp; &nbsp; &nbsp; 19970116</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv60&nbsp; &nbsp; &nbsp; &nbsp;19970116</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv61&nbsp; &nbsp; &nbsp; &nbsp;19980914</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv69&nbsp; &nbsp; &nbsp; &nbsp;19990511</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv70Dep&nbsp; &nbsp; 20000406</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv70&nbsp; &nbsp; &nbsp; &nbsp;20001102</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntv&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PDBIntv70</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntvAlt&nbsp; &nbsp; &nbsp; PDBIntv50</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntvAlt2&nbsp; &nbsp; &nbsp;PDBIntv60</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBIntvAlt3&nbsp; &nbsp; &nbsp;PDBIntv69</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// PDB IMPLEMENTATION VERSIONS</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBImpvVC2&nbsp; &nbsp; &nbsp; 19941610</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBImpvVC4&nbsp; &nbsp; &nbsp; 19950623</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBImpvVC41&nbsp; &nbsp; &nbsp;19950814</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBImpvVC50&nbsp; &nbsp; &nbsp;19960307</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBImpvVC98&nbsp; &nbsp; &nbsp;19970604</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBImpvVC70Dep&nbsp; 19990604</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBImpvVC70&nbsp; &nbsp; &nbsp;20000404</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBImpv&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PDBImpvVC70</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// DBI IMPLEMENTATION VERSIONS</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define DBIImpvV41&nbsp; &nbsp; &nbsp; &nbsp; 930803</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define DBIImpvV50&nbsp; &nbsp; &nbsp; 19960307</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define DBIImpvV60&nbsp; &nbsp; &nbsp; 19970606</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define DBIImpvV70&nbsp; &nbsp; &nbsp; 19990903</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define DBIImpv&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DBIImpvV70</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// BASIC TYPES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _TYPE_ENUM_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_NOTYPE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_ABS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_SEGMENT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_VOID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000003,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_HRESULT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PHRESULT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000408,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PHRESULT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000608,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PVOID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000103,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFVOID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000203,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHVOID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000303,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PVOID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000403,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFVOID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000503,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PVOID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000603,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_CURRENCY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_NBASICSTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_FBASICSTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_NOTTRANS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000007,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_BIT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000060,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PASCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000061,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_CHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000010,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000110,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000210,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000310,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000410,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000510,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000610,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_UCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000020,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000120,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000220,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000320,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000420,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000520,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000620,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_RCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000070,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PRCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000170,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFRCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000270,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHRCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000370,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PRCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000470,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFRCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000570,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PRCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000670,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_WCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000071,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PWCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000171,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFWCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000271,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHWCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000371,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PWCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000471,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFWCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000571,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PWCHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000671,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_INT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000068,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000168,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000268,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000368,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000468,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000568,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000668,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_UINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000069,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000169,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000269,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000369,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000469,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000569,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUINT1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000669,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_SHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000011,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000111,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000211,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000311,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000411,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000511,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000611,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_USHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000021,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000121,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000221,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000321,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000421,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000521,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUSHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000621,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_INT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000072,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000172,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000272,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000372,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000472,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000572,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000672,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_UINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000073,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000173,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000273,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000373,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000473,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000573,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUINT2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000673,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_LONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000012,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PLONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000112,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFLONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000212,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHLONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000312,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PLONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000412,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFLONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000512,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PLONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000612,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_ULONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000022,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PULONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000122,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFULONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000222,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHULONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000322,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PULONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000422,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFULONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000522,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PULONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000622,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_INT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000074,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000174,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000274,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000374,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000474,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000574,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000674,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_UINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000075,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000175,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000275,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000375,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000475,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000575,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUINT4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000675,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_QUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000013,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000113,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000213,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000313,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000413,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000513,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000613,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_UQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000023,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000123,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000223,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000323,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000423,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000523,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUQUAD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000623,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_INT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000076,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000176,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000276,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000376,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000476,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000576,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000676,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_UINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000077,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000177,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000277,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000377,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000477,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000577,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUINT8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000677,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_OCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000014,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_POCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000114,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000214,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000314,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32POCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000414,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000514,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64POCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000614,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_UOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000024,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000124,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000224,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000324,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000424,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000524,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUOCT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000624,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_INT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000078,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000178,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000278,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000378,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000478,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000578,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000678,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_UINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000079,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PUINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000179,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFUINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000279,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHUINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000379,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PUINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000479,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFUINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000579,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PUINT16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000679,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_REAL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000040,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PREAL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000140,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFREAL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000240,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHREAL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000340,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PREAL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000440,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFREAL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000540,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PREAL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000640,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_REAL48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000044,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PREAL48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000144,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFREAL48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000244,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHREAL48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000344,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PREAL48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000444,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFREAL48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000544,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PREAL48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000644,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_REAL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000041,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PREAL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000141,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFREAL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000241,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHREAL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000341,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PREAL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000441,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFREAL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000541,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PREAL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000641,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_REAL80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000042,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PREAL80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000142,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFREAL80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000242,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHREAL80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000342,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PREAL80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000442,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFREAL80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000542,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PREAL80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000642,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_REAL128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000043,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PREAL128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000143,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFREAL128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000243,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHREAL128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000343,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PREAL128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000443,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFREAL128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000543,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PREAL128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000643,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_CPLX32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000050,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PCPLX32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000150,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFCPLX32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000250,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHCPLX32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000350,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PCPLX32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000450,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFCPLX32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000550,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PCPLX32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000650,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_CPLX64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000051,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PCPLX64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000151,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFCPLX64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000251,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHCPLX64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000351,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PCPLX64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000451,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFCPLX64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000551,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PCPLX64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000651,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_CPLX80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000052,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PCPLX80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000152,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFCPLX80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000252,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHCPLX80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000352,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PCPLX80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000452,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFCPLX80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000552,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PCPLX80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000652,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_CPLX128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000053,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PCPLX128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000153,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFCPLX128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000253,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHCPLX128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000353,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PCPLX128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000453,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFCPLX128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000553,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PCPLX128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000653,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_BOOL08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000030,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PBOOL08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000130,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFBOOL08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000230,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHBOOL08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000330,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PBOOL08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000430,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFBOOL08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000530,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PBOOL08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000630,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_BOOL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000031,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PBOOL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000131,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFBOOL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000231,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHBOOL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000331,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PBOOL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000431,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFBOOL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000531,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PBOOL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000631,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_BOOL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000032,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PBOOL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000132,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFBOOL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000232,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHBOOL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000332,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PBOOL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000432,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFBOOL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000532,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PBOOL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000632,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_BOOL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000033,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PBOOL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000133,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PFBOOL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000233,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_PHBOOL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000333,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PBOOL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000433,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32PFBOOL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000533,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64PBOOL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000633,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_NCVPTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000001F0,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_FCVPTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000002F0,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_HCVPTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000003F0,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32NCVPTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000004F0,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_32FCVPTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000005F0,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; T_64NCVPTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000006F0,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; TYPE_ENUM_e, *PTYPE_ENUM_e, **PPTYPE_ENUM_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// TYPE INFO RECORD TAGS</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _LEAF_ENUM_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MODIFIER_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_POINTER_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ARRAY_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_CLASS_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_STRUCTURE_16t&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_UNION_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ENUM_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000007,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PROCEDURE_16t&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MFUNCTION_16t&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000009,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VTSHAPE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_COBOL0_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_COBOL1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_BARRAY_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_LABEL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_NULL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_NOTTRAN&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000010,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMARRAY_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000011,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VFTPATH_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000012,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PRECOMP_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000013,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ENDPRECOMP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000014,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_OEM_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000015,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_TYPESERVER_ST&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000016,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_SKIP_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000200,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ARGLIST_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000201,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DEFARG_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000202,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_LIST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000203,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_FIELDLIST_16t&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000204,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DERIVED_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000205,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_BITFIELD_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000206,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_METHODLIST_16t&nbsp; &nbsp; &nbsp; &nbsp;= 0x00000207,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMCONU_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000208,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMCONLU_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000209,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMVARU_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000020A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMVARLU_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000020B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_REFSYM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000020C,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_BCLASS_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000400,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VBCLASS_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000401,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_IVBCLASS_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000402,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ENUMERATE_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000403,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_FRIENDFCN_16t&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000404,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_INDEX_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000405,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MEMBER_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000406,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_STMEMBER_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000407,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_METHOD_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000408,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_NESTTYPE_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000409,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VFUNCTAB_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000040A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_FRIENDCLS_16t&nbsp; &nbsp; &nbsp; &nbsp; = 0x0000040B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ONEMETHOD_16t&nbsp; &nbsp; &nbsp; &nbsp; = 0x0000040C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VFUNCOFF_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000040D,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_TI16_MAX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MODIFIER&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_POINTER&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ARRAY_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_CLASS_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_STRUCTURE_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_UNION_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ENUM_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001007,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PROCEDURE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MFUNCTION&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001009,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_COBOL0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000100A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_BARRAY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000100B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMARRAY_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000100C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VFTPATH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000100D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PRECOMP_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000100E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_OEM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000100F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ALIAS_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001010,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_OEM2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001011,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_SKIP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001200,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ARGLIST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001201,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DEFARG_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001202,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_FIELDLIST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001203,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DERIVED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001204,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_BITFIELD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001205,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_METHODLIST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001206,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMCONU&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001207,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMCONLU&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001208,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMVARU&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001209,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMVARLU&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000120A,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_BCLASS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001400,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VBCLASS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001401,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_IVBCLASS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001402,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_FRIENDFCN_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001403,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_INDEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001404,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MEMBER_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001405,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_STMEMBER_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001406,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_METHOD_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001407,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_NESTTYPE_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001408,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VFUNCTAB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001409,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_FRIENDCLS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000140A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ONEMETHOD_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000140B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VFUNCOFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000140C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_NESTTYPEEX_ST&nbsp; &nbsp; &nbsp; &nbsp; = 0x0000140D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MEMBERMODIFY_ST&nbsp; &nbsp; &nbsp; = 0x0000140E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MANAGED_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000140F,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ST_MAX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001500,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_TYPESERVER&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001501,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ENUMERATE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001502,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ARRAY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001503,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_CLASS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001504,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_STRUCTURE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001505,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_UNION&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001506,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ENUM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001507,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DIMARRAY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001508,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PRECOMP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001509,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ALIAS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000150A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DEFARG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000150B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_FRIENDFCN&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000150C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MEMBER&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000150D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_STMEMBER&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000150E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_METHOD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000150F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_NESTTYPE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001510,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ONEMETHOD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001511,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_NESTTYPEEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001512,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MEMBERMODIFY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001513,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_MANAGED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001514,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_TYPESERVER2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001515,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_NUMERIC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00008000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_CHAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00008000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_SHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00008001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_USHORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00008002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_LONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00008003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_ULONG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00008004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_REAL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00008005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_REAL64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00008006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_REAL80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00008007,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_REAL128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00008008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_QUADWORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00008009,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_UQUADWORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000800A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_REAL48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000800B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_COMPLEX32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000800C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_COMPLEX64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000800D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_COMPLEX80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000800E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_COMPLEX128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000800F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_VARSTRING&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00008010,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_OCTWORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00008017,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_UOCTWORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00008018,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DECIMAL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00008019,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_DATE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000801A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_UTF8STRING&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000801B,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F0,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F1,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F2,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F3,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F4,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F5,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F6,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F7,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F8,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x000000F9,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000000FA,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD11&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000000FB,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000000FC,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD13&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000000FD,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000000FE,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LF_PAD15&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x000000FF,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; LEAF_ENUM_e, *PLEAF_ENUM_e, **PPLEAF_ENUM_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// SYMBOL RECORD TAGS</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _SYM_ENUM_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_COMPILE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_REGISTER_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_CONSTANT_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_UDT_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_SSEARCH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_END&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_SKIP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000007,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_CVRESERVE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_OBJNAME_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000009,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_ENDARG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_COBOLUDT_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANYREG_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_RETURN&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_ENTRYTHIS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000E,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_BPREL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000100,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LDATA16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000101,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GDATA16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000102,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_PUB16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000103,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROC16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000104,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROC16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000105,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_THUNK16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000106,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_BLOCK16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000107,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_WITH16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000108,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LABEL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000109,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_CEXMODEL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000010A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_VFTABLE16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000010B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_REGREL16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000010C,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_BPREL32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000200,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LDATA32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000201,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GDATA32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000202,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_PUB32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000203,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROC32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000204,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROC32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000205,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_THUNK32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000206,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_BLOCK32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000207,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_WITH32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000208,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LABEL32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000209,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_CEXMODEL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000020A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_VFTABLE32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000020B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_REGREL32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000020C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LTHREAD32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000020D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GTHREAD32_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000020E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_SLINK32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000020F,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROCMIPS_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000300,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROCMIPS_16t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000301,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_PROCREF_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000400,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_DATAREF_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000401,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_ALIGN&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000402,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROCREF_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000403,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_OEM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000404,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_TI16_MAX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_REGISTER_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_CONSTANT_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_UDT_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_COBOLUDT_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANYREG_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_BPREL32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LDATA32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001007,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GDATA32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_PUB32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001009,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROC32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000100A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROC32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000100B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_VFTABLE32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000100C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_REGREL32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000100D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LTHREAD32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000100E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GTHREAD32_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000100F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROCMIPS_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001010,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROCMIPS_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001011,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_FRAMEPROC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001012,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_COMPILE2_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001013,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANYREG2_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001014,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROCIA64_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001015,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROCIA64_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001016,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LOCALSLOT_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001017,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_PARAMSLOT_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001018,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_ANNOTATION&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001019,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GMANPROC_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000101A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LMANPROC_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000101B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_RESERVED1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000101C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_RESERVED2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000101D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_RESERVED3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000101E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_RESERVED4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000101F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LMANDATA_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001020,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GMANDATA_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001021,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANFRAMEREL_ST&nbsp; &nbsp; &nbsp; &nbsp; = 0x00001022,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANREGISTER_ST&nbsp; &nbsp; &nbsp; &nbsp; = 0x00001023,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANSLOT_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001024,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANMANYREG_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001025,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANREGREL_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001026,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANMANYREG2_ST&nbsp; &nbsp; &nbsp; &nbsp; = 0x00001027,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANTYPREF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001028,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_UNAMESPACE_ST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001029,</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_ST_MAX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001100,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_OBJNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001101,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_THUNK32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001102,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_BLOCK32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001103,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_WITH32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001104,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LABEL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001105,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_REGISTER&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001106,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_CONSTANT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001107,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_UDT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001108,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_COBOLUDT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001109,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANYREG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000110A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_BPREL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000110B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LDATA32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000110C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GDATA32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000110D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_PUB32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000110E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROC32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000110F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROC32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001110,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_REGREL32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001111,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LTHREAD32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001112,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GTHREAD32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001113,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROCMIPS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001114,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROCMIPS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001115,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_COMPILE2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001116,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANYREG2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001117,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROCIA64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001118,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GPROCIA64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001119,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LOCALSLOT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000111A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_SLOT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000111A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_PARAMSLOT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000111B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LMANDATA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000111C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GMANDATA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000111D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANFRAMEREL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000111E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANREGISTER&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000111F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANSLOT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001120,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANMANYREG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001121,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANREGREL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001122,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANMANYREG2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001123,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_UNAMESPACE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001124,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_PROCREF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001125,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_DATAREF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001126,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LPROCREF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001127,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_ANNOTATIONREF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00001128,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_TOKENREF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00001129,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_GMANPROC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000112A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_LMANPROC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000112B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_TRAMPOLINE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000112C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_MANCONSTANT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000112D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_RECTYPE_LAST&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000112D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; S_RECTYPE_MAX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000112E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; SYM_ENUM_e, *PSYM_ENUM_e, **PPSYM_ENUM_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// CALLING CONVENTIONS</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _CV_call_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_NEAR_C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_FAR_C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_NEAR_PASCAL&nbsp; &nbsp; &nbsp;= 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_FAR_PASCAL&nbsp; &nbsp; &nbsp; = 0x00000003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_NEAR_FAST&nbsp; &nbsp; &nbsp; &nbsp;= 0x00000004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_FAR_FAST&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_SKIPPED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_NEAR_STD&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000007,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_FAR_STD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_NEAR_SYS&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000009,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_FAR_SYS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_THISCALL&nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_MIPSCALL&nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_GENERIC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_ALPHACALL&nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000E,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_PPCCALL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000F,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_SHCALL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000010,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_ARMCALL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000011,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_AM33CALL&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000012,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_TRICALL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000013,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_SH5CALL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000014,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_M32RCALL&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000015,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CALL_RESERVED&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000016,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_call_e, *PCV_call_e, **PPCV_call_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// POINTER TYPES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _CV_ptrtype_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_NEAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_FAR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_HUGE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_BASE_SEG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_BASE_VAL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_BASE_SEGVAL&nbsp; &nbsp; &nbsp; = 0x00000005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_BASE_ADDR&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_BASE_SEGADDR&nbsp; &nbsp; &nbsp;= 0x00000007,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_BASE_TYPE&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_BASE_SELF&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000009,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_NEAR32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000A,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_FAR32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000B,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_<span class="nu0">64</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x0000000C,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_UNUSEDPTR&nbsp; &nbsp; &nbsp; &nbsp; = 0x0000000D,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_ptrtype_e, *PCV_ptrtype_e, **PPCV_ptrtype_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// POINTER MODES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _CV_ptrmode_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_MODE_PTR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_MODE_REF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_MODE_PMEM&nbsp; &nbsp; &nbsp; &nbsp; = 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_MODE_PMFUNC&nbsp; &nbsp; &nbsp; = 0x00000003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PTR_MODE_RESERVED&nbsp; &nbsp; = 0x00000004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_ptrmode_e, *PCV_ptrmode_e, **PPCV_ptrmode_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// ACCESS PROTECTION MODES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _CV_access_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_private&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_protected&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_public&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_access_e, *PCV_access_e, **PPCV_access_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// METHOD PROPERTIES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _CV_methodprop_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_MTvanilla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_MTvirtual&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_MTstatic&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_MTfriend&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000003,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_MTintro&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_MTpurevirt&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x00000005,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_MTpureintro&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x00000006,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_methodprop_e, *PCV_methodprop_e, **PPCV_methodprop_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// CODEVIEW STRUCTURES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack (1)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _NB10I</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD dwSig;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD dwOffset;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD sig;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD age;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> BYTE&nbsp; szPdb <span class="br0">&#91;</span>MAX_PATH<span class="br0">&#93;</span>; <span class="co1">// PDB file name</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*114*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; NB10I, *PNB10I, **PPNB10I;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define NB10I_ sizeof (NB10I)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _RSDSI</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD dwSig;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> GUID&nbsp; guidSig;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD age;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> BYTE&nbsp; szPdb <span class="br0">&#91;</span><span class="nu0">3</span>*MAX_PATH<span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*324*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; RSDSI, *PRSDSI, **PPRSDSI;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define RSDSI_ sizeof (RSDSI)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">union</span> _CV</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD dwSig;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> NB10I nb10i;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> RSDSI rsdsi;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*324*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CV, *PCV, **PPCV;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_ sizeof (CV)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack ()</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// MSF STRUCTURES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack (1)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _SI_PERSIST</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> <span class="kw4">LONG</span> cb;&nbsp; &nbsp; &nbsp; <span class="co1">// number of bytes</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span> mpspnpn;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; SI_PERSIST, *PSI_PERSIST, **PPSI_PERSIST;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define SI_PERSIST_ sizeof (SI_PERSIST)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PG</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0000*/</span> BYTE rgb <span class="br0">&#91;</span>0x1000<span class="br0">&#93;</span>; <span class="co1">// page data</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*1000*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PG, *PPG, **PPPG;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PG_ sizeof (PG)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">union</span> _XMSF_HDR</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0000*/</span>&nbsp; &nbsp; &nbsp;BYTE&nbsp; &nbsp; &nbsp; &nbsp;szMagic <span class="br0">&#91;</span>0x2C<span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002C*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">LONG</span>&nbsp; &nbsp; &nbsp; &nbsp;cbPg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0030*/</span>&nbsp; &nbsp; &nbsp;WORD&nbsp; &nbsp; &nbsp; &nbsp;pnFpm;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0032*/</span>&nbsp; &nbsp; &nbsp;WORD&nbsp; &nbsp; &nbsp; &nbsp;pnMac;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0034*/</span>&nbsp; &nbsp; &nbsp;SI_PERSIST siSt;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*003C*/</span>&nbsp; &nbsp; &nbsp;WORD&nbsp; &nbsp; &nbsp; &nbsp;mpspnpn <span class="br0">&#91;</span>0x141<span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02BE*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0000*/</span> PG pg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*1000*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;XMSF_HDR, *PXMSF_HDR, **PPXMSF_HDR;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define XMSF_HDR_ sizeof (XMSF_HDR)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">union</span> _BIGMSF_HDR</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0000*/</span>&nbsp; &nbsp; &nbsp;BYTE&nbsp; &nbsp; &nbsp; &nbsp;szMagic <span class="br0">&#91;</span>0x1E<span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*001E*/</span>&nbsp; &nbsp; &nbsp;WORD&nbsp; &nbsp; &nbsp; &nbsp;reserved;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0020*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">LONG</span>&nbsp; &nbsp; &nbsp; &nbsp;cbPg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0024*/</span>&nbsp; &nbsp; &nbsp;DWORD&nbsp; &nbsp; &nbsp; pnFpm;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0028*/</span>&nbsp; &nbsp; &nbsp;DWORD&nbsp; &nbsp; &nbsp; pnMac;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002C*/</span>&nbsp; &nbsp; &nbsp;SI_PERSIST siSt;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0034*/</span>&nbsp; &nbsp; &nbsp;DWORD&nbsp; &nbsp; &nbsp; mpspnpnSt <span class="br0">&#91;</span>0x49<span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0158*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*0000*/</span> PG pg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*1000*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;BIGMSF_HDR, *PBIGMSF_HDR, **PPBIGMSF_HDR;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define BIGMSF_HDR_ sizeof (BIGMSF_HDR)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _FPM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD&nbsp; &nbsp;iwMac;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp;iwRover;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="kw4">LONG</span>&nbsp; &nbsp; cbPg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> BOOLEAN fBigMsf;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00D*/</span> BYTE&nbsp; &nbsp; reserved1; <span class="co1">// padding</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> WORD&nbsp; &nbsp; reserved2; <span class="co1">// padding</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> <span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span>&nbsp; &nbsp; &nbsp;DWORD rgt;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span>&nbsp; &nbsp; &nbsp;DWORD itMac;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span>&nbsp; &nbsp; &nbsp;DWORD itMax;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> rgw;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> DWORD&nbsp; &nbsp;wFill;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; FPM, *PFPM, **PPFPM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define FPM_ sizeof (FPM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack ()</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// PDB STRUCTURES (STREAM #1)</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack (1)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define GUID_SIG70 \</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span>0x33DED1D8, 0x5D57, 0x40D0, \</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span>0xA5, 0xE2, 0xF1, 0x71, 0x96, 0x98, 0x07, 0x21<span class="br0">&#125;</span><span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PDBStream</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD impv;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD sig;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD age;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PDBStream, *PPDBStream, **PPPDBStream;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBStream_ sizeof (PDBStream)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PDBStream70</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> PDBStream pdbstream;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> GUID&nbsp; &nbsp; &nbsp; sig70;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PDBStream70, *PPDBStream70, **PPPDBStream70;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PDBStream70_ sizeof (PDBStream70)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack ()</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// TPI STRUCTURES (STREAM #2)</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack (1)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _OffCb</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> <span class="kw4">LONG</span> off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span> cb;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; OffCb, *POffCb, **PPOffCb;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define OffCb_ sizeof (OffCb)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _TpiHash</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; sn;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// stream #</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; snPad;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// padding</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span>&nbsp; cbHashKey;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="kw4">LONG</span>&nbsp; cHashBuckets;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> OffCb offcbHashVals;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> OffCb offcbTiOff;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> OffCb offcbHashAdj;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; TpiHash, *PTpiHash, **PPTpiHash;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define TpiHash_ sizeof (TpiHash)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _HDR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// TPI stream header</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD&nbsp; &nbsp;vers;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// implementation version</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span>&nbsp; &nbsp; cbHdr;&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// header size</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp;tiMin;&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// type index base&nbsp; (0x1000..0xFFFFFF)</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD&nbsp; &nbsp;tiMac;&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// type index limit (0x1000..0xFFFFFF)</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD&nbsp; &nbsp;cbGprec;&nbsp; &nbsp; &nbsp;<span class="co1">// size of follow-up data</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> TpiHash tpihash;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*038*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; HDR, *PHDR, **PPHDR;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define HDR_ sizeof (HDR)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _OHDR</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> BYTE&nbsp; szMagic <span class="br0">&#91;</span>0x2C<span class="br0">&#93;</span>; <span class="co1">// magic string</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02C*/</span> DWORD vers;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// implementation version</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*030*/</span> DWORD sig;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// signature</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*034*/</span> DWORD age;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// file age</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*038*/</span> WORD&nbsp; tiMin;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// type index base</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*03A*/</span> WORD&nbsp; tiMac;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// type index limit</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*03C*/</span> <span class="kw4">LONG</span>&nbsp; cb;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// size</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*040*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; OHDR, *POHDR, **PPOHDR;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define OHDR_ sizeof (OHDR)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CV_prop_t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.0*/</span> WORD packed&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.1*/</span> WORD ctor&nbsp; &nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.2*/</span> WORD ovlops&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.3*/</span> WORD isnested : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.4*/</span> WORD cnested&nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.5*/</span> WORD opassign : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.6*/</span> WORD opcast&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.7*/</span> WORD fwdref&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*001.0*/</span> WORD scoped&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*001.1*/</span> WORD reserved : <span class="nu0">7</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CV_prop_t, *PCV_prop_t, **PPCV_prop_t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_prop_t_ sizeof (CV_prop_t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CV_fldattr_t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.0*/</span> WORD access&nbsp; &nbsp; &nbsp; : <span class="nu0">2</span>; <span class="co1">// CV_access_e</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.2*/</span> WORD mprop&nbsp; &nbsp; &nbsp; &nbsp;: <span class="nu0">3</span>; <span class="co1">// CV_methodprop_e</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.5*/</span> WORD pseudo&nbsp; &nbsp; &nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.6*/</span> WORD noinherit&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.7*/</span> WORD noconstruct : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*001.0*/</span> WORD compgenx&nbsp; &nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*001.1*/</span> WORD unused&nbsp; &nbsp; &nbsp; : <span class="nu0">7</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CV_fldattr_t, *PCV_fldattr_t, **PPCV_fldattr_t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_fldattr_t_ sizeof (CV_fldattr_t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfArray&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// array</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_ARRAY</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> DWORD elemtype;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// element type index</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> DWORD idxtype;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// indexing type index</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> BYTE&nbsp; data <span class="br0">&#91;</span><span class="br0">&#93;</span>;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// size in bytes</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfArray, *PlfArray, **PPlfArray;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfArray_ sizeof (lfArray)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfBitfield&nbsp; &nbsp; &nbsp; <span class="co1">// bitfield structure</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_BITFIELD</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> DWORD type;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// base type index</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> BYTE&nbsp; length;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// number of bits</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007*/</span> BYTE&nbsp; position;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// bit offset of bit 0</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfBitfield, *PlfBitfield, **PPlfBitfield;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfBitfield_ sizeof (lfBitfield)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfClass&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// class or structure</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_CLASS, LF_STRUCTURE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; count;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// number of members</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> CV_prop_t property;&nbsp; &nbsp; &nbsp;<span class="co1">// type properties</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> DWORD&nbsp; &nbsp; &nbsp;field;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// LF_FIELD descriptor index</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> DWORD&nbsp; &nbsp; &nbsp;derived;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> DWORD&nbsp; &nbsp; &nbsp;vshape;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> BYTE&nbsp; &nbsp; &nbsp; data <span class="br0">&#91;</span><span class="br0">&#93;</span>;&nbsp; &nbsp; &nbsp; <span class="co1">// size and name</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfClass, *PlfClass, **PPlfClass;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfClass_ sizeof (lfClass)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> lfClass lfStructure, *PlfStructure, **PPlfStructure;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfStructure_ sizeof (lfStructure)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfUnion&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// union</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_UNION</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; count;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// number of members</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> CV_prop_t property;&nbsp; &nbsp; &nbsp;<span class="co1">// type properties</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> DWORD&nbsp; &nbsp; &nbsp;field;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// LF_FIELD descriptor index</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> BYTE&nbsp; &nbsp; &nbsp; data <span class="br0">&#91;</span><span class="br0">&#93;</span>;&nbsp; &nbsp; &nbsp; <span class="co1">// size and name</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfUnion, *PlfUnion, **PPlfUnion;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfUnion_ sizeof (lfUnion)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfEnum&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// enumeration</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_ENUM</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; count;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// number of members</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> CV_prop_t property;&nbsp; &nbsp; &nbsp;<span class="co1">// type properties</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> DWORD&nbsp; &nbsp; &nbsp;utype;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// underlying type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> DWORD&nbsp; &nbsp; &nbsp;field;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// LF_FIELD descriptor index</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> BYTE&nbsp; &nbsp; &nbsp; Name <span class="br0">&#91;</span><span class="br0">&#93;</span>;&nbsp; &nbsp; &nbsp; <span class="co1">// name</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfEnum, *PlfEnum, **PPlfEnum;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfEnum_ sizeof (lfEnum)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfPointer&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// pointer to type</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> <span class="kw4">struct</span> lfPointerBody</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span>&nbsp; &nbsp; &nbsp;WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_POINTER</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span>&nbsp; &nbsp; &nbsp;DWORD utype;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// underlying type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">struct</span> lfPointerAttr</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006.0*/</span>&nbsp; &nbsp; &nbsp; &nbsp;DWORD ptrtype&nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">5</span>; <span class="co1">// pointer type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006.5*/</span>&nbsp; &nbsp; &nbsp; &nbsp;DWORD ptrmode&nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">3</span>; <span class="co1">// pointer mode</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.0*/</span>&nbsp; &nbsp; &nbsp; &nbsp;DWORD isflat32&nbsp; &nbsp; :&nbsp; <span class="nu0">1</span>; <span class="co1">// 0:32 pointer</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.1*/</span>&nbsp; &nbsp; &nbsp; &nbsp;DWORD isvolatile&nbsp; :&nbsp; <span class="nu0">1</span>; <span class="co1">// volatile pointer</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.2*/</span>&nbsp; &nbsp; &nbsp; &nbsp;DWORD isconst&nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">1</span>; <span class="co1">// constant pointer</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.3*/</span>&nbsp; &nbsp; &nbsp; &nbsp;DWORD isunaligned :&nbsp; <span class="nu0">1</span>; <span class="co1">// unaligned pointer</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.4*/</span>&nbsp; &nbsp; &nbsp; &nbsp;DWORD isrestrict&nbsp; :&nbsp; <span class="nu0">1</span>; <span class="co1">// restricted pointer</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.5*/</span>&nbsp; &nbsp; &nbsp; &nbsp;DWORD unused&nbsp; &nbsp; &nbsp; : <span class="nu0">19</span>; <span class="co1">// currently unused</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> body;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> <span class="kw4">union</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DWORD pmclass;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WORD&nbsp; pmenum;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> pm;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;WORD bseg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;BYTE Sym <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DWORD index;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;BYTE&nbsp; name <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> btype;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> pbase;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfPointer, *PlfPointer, **PPlfPointer;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfPointer_ sizeof (lfPointer)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfProc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// procedure</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_PROCEDURE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> DWORD rvtype;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// return value type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> BYTE&nbsp; calltype;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// calling convention (CV_call_e)</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007*/</span> BYTE&nbsp; reserved;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// currently not used</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; parmcount;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// number of parameters</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> DWORD arglist;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// argument list type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfProc, *PlfProc, **PPlfProc;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfProc_ sizeof (lfProc)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfMFunc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// member function</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_MFUNCTION</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> DWORD rvtype;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// return value type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> DWORD classtype;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// containing class type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> DWORD thistype;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// this-pointer type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> BYTE&nbsp; calltype;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// calling convention (CV_call_e)</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F*/</span> BYTE&nbsp; reserved;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// currently not used</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; parmcount;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// number of parameters</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> DWORD arglist;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// argument list type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*016*/</span> <span class="kw4">LONG</span>&nbsp; thisadjust;&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// this-adjuster</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfMFunc, *PlfMFunc, **PPlfMFunc;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfMFunc_ sizeof (lfMFunc)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfArgList&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// procedure argument list</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_ARGLIST</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> DWORD count;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// number of arguments</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> DWORD arg <span class="br0">&#91;</span><span class="br0">&#93;</span>;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// argument types</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfArgList, *PlfArgList, **PPlfArgList;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfArgList_ sizeof (lfArgList)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfVTShape&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// virtual function table shape</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// LF_VTSHAPE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD count;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// number of VFT entries</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> BYTE desc <span class="br0">&#91;</span><span class="br0">&#93;</span>;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// 4-bit descriptor list</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfVTShape, *PlfVTShape, **PPlfVTShape;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfVTShape_ sizeof (lfVTShape)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfEnumerate&nbsp; &nbsp; &nbsp;<span class="co1">// enumeration member</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leaf;&nbsp; &nbsp; &nbsp; <span class="co1">// LF_ENUMERATE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> CV_fldattr_t attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;value <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfEnumerate, *PlfEnumerate, **PPlfEnumerate;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfEnumerate_ sizeof (lfEnumerate)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfMember&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// non-static data member</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leaf;&nbsp; &nbsp; &nbsp; <span class="co1">// LF_MEMBER</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> CV_fldattr_t attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; index;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;offset <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00^8*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfMember, *PlfMember, **PPlfMember;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfMember_ sizeof (lfMember)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfBClass&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// base class field</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leaf;&nbsp; &nbsp; &nbsp; <span class="co1">// LF_BCLASS</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> CV_fldattr_t attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; index;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;offset <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfBClass, *PlfBClass, **PPlfBClass;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfBClass_ sizeof (lfBClass)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfVFuncTab&nbsp; &nbsp; &nbsp; <span class="co1">// virtual function table pointer</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_VFUNCTAB</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; pad0;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// padding</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD type;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// VFT pointer type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfVFuncTab, *PlfVFuncTab, **PPlfVFuncTab;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfVFuncTab_ sizeof (lfVFuncTab)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfOneMethod&nbsp; &nbsp; &nbsp;<span class="co1">// non-overloaded method</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leaf;&nbsp; &nbsp; &nbsp; <span class="co1">// LF_ONEMETHOD</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> CV_fldattr_t attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; index;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; vbaseoff <span class="br0">&#91;</span><span class="br0">&#93;</span>; <span class="co1">// VFT base offset, if present</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfOneMethod, *PlfOneMethod, **PPlfOneMethod;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfOneMethod_ sizeof (lfOneMethod)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfMethod&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// overloaded method list</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_METHOD</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; count;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// number of occurrences</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD mList;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// LF_METHODLIST descriptor index</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE&nbsp; Name <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfMethod, *PlfMethod, **PPlfMethod;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfMethod_ sizeof (lfMethod)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfNestType&nbsp; &nbsp; &nbsp; <span class="co1">// nested type definition</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_NESTTYPE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; pad0;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD index;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE&nbsp; Name <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfNestType, *PlfNestType, **PPlfNestType;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfNestType_ sizeof (lfNestType)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">union</span> _lfSubRecord</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; leaf;&nbsp; &nbsp; &nbsp; <span class="co1">// LF_*</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfEnumerate Enumerate; <span class="co1">// LF_ENUMERATE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfMember&nbsp; &nbsp; Member;&nbsp; &nbsp; <span class="co1">// LF_MEMBER</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfBClass&nbsp; &nbsp; BClass;&nbsp; &nbsp; <span class="co1">// LF_BCLASS</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfVFuncTab&nbsp; VFuncTab;&nbsp; <span class="co1">// LF_VFUNCTAB</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfOneMethod OneMethod; <span class="co1">// LF_ONEMETHOD</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfMethod&nbsp; &nbsp; Method;&nbsp; &nbsp; <span class="co1">// LF_METHOD</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfNestType&nbsp; NestType;&nbsp; <span class="co1">// LF_NESTTYPE</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfSubRecord, *PlfSubRecord, **PPlfSubRecord;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfSubRecord_ sizeof (lfSubRecord)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _lfFieldList&nbsp; &nbsp; &nbsp;<span class="co1">// struct/union/enum members</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; leaf;&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// LF_FIELDLIST</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> lfSubRecord SubRecord;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfFieldList, *PlfFieldList, **PPlfFieldList;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfFieldList_ sizeof (lfFieldList)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">union</span> _lfRecord</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; leaf;&nbsp; &nbsp; &nbsp; <span class="co1">// LF_*</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfArray&nbsp; &nbsp; &nbsp;Array;&nbsp; &nbsp; &nbsp;<span class="co1">// LF_ARRAY</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfBitfield&nbsp; Bitfield;&nbsp; <span class="co1">// LF_BITFIELD</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfClass&nbsp; &nbsp; &nbsp;Class;&nbsp; &nbsp; &nbsp;<span class="co1">// LF_CLASS</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfStructure Structure; <span class="co1">// LF_STRUCTURE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfUnion&nbsp; &nbsp; &nbsp;<span class="kw4">Union</span>;&nbsp; &nbsp; &nbsp;<span class="co1">// LF_UNION</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfEnum&nbsp; &nbsp; &nbsp; <span class="kw2">Enum</span>;&nbsp; &nbsp; &nbsp; <span class="co1">// LF_ENUM</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfPointer&nbsp; &nbsp;Pointer;&nbsp; &nbsp;<span class="co1">// LF_POINTER</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfProc&nbsp; &nbsp; &nbsp; Proc;&nbsp; &nbsp; &nbsp; <span class="co1">// LF_PROCEDURE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfMFunc&nbsp; &nbsp; &nbsp;MFunc;&nbsp; &nbsp; &nbsp;<span class="co1">// LF_MFUNCTION</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfArgList&nbsp; &nbsp;ArgList;&nbsp; &nbsp;<span class="co1">// LF_ARGLIST</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfVTShape&nbsp; &nbsp;VTShape;&nbsp; &nbsp;<span class="co1">// LF_VTSHAPE</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> lfFieldList FieldList; <span class="co1">// LF_FIELDLIST</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; lfRecord, *PlfRecord, **PPlfRecord;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define lfRecord_ sizeof (lfRecord)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack ()</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// DBI STRUCTURES (STREAM #3)</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack (1)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define hdrSignature 0xFFFFFFFF</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define hdrVersion&nbsp; &nbsp; &nbsp;19990903</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _DBIHdr</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD snGSSyms;&nbsp; <span class="co1">// stream #</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD snPSSyms;&nbsp; <span class="co1">// stream #</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD snSymRecs; <span class="co1">// stream #</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD reserved;&nbsp; <span class="co1">// padding</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="kw4">LONG</span> cbGpModi;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="kw4">LONG</span> cbSC;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> <span class="kw4">LONG</span> cbSecMap;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> <span class="kw4">LONG</span> cbFileInfo;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; DBIHdr, *PDBIHdr, **PPDBIHdr;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define DBIHdr_ sizeof (DBIHdr)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _NewDBIHdr</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD verSignature;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD verHdr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD age;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; snGSSyms;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// stream #</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> WORD&nbsp; usVerPdbDllMajMin;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; snPSSyms;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// stream #</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> WORD&nbsp; usVerPdbDllBuild;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> <span class="kw4">union</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span>&nbsp; &nbsp; &nbsp;WORD&nbsp; snSymRecs;&nbsp; &nbsp; &nbsp;<span class="co1">// stream #</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span>&nbsp; &nbsp; &nbsp;DWORD ulunusedPad2;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> <span class="kw4">LONG</span>&nbsp; cbGpModi;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> <span class="kw4">LONG</span>&nbsp; cbSC;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> <span class="kw4">LONG</span>&nbsp; cbSecMap;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> <span class="kw4">LONG</span>&nbsp; cbFileInfo;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*028*/</span> <span class="kw4">LONG</span>&nbsp; cbTSMap;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02C*/</span> DWORD iMFC;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*030*/</span> <span class="kw4">LONG</span>&nbsp; cbDbgHdr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*034*/</span> <span class="kw4">LONG</span>&nbsp; cbECInfo;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*038*/</span> WORD&nbsp; flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*03A*/</span> WORD&nbsp; wMachine;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*03C*/</span> DWORD rgulReserved <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*040*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; NewDBIHdr, *PNewDBIHdr, **PPNewDBIHdr;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define NewDBIHdr_ sizeof (NewDBIHdr)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ECInfo</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD niSrcFile;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD niPdbFile;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ECInfo, *PECInfo, **PPECInfo;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ECInfo_ sizeof (ECInfo)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _SC40</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; isect;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; reserved1;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span>&nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="kw4">LONG</span>&nbsp; cb;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD dwCharacteristics;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; imod;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> WORD&nbsp; reserved2;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; SC40, *PSC40, **PPSC40;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define SC40_ sizeof (SC40)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _SC</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> SC40&nbsp; sc40;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD dwDataCrc;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD dwRelocCrc;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; SC, *PSC, **PPSC;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define SC_ sizeof (SC)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _MODI</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> PVOID&nbsp; pmod;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// Mod *</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> SC&nbsp; &nbsp; &nbsp;sc;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> <span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020.0*/</span>&nbsp; &nbsp;WORD fWritten&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020.1*/</span>&nbsp; &nbsp;WORD fECEnabled : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020.2*/</span>&nbsp; &nbsp;WORD unused&nbsp; &nbsp; &nbsp;: <span class="nu0">6</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*021.0*/</span>&nbsp; &nbsp;WORD iTSM&nbsp; &nbsp; &nbsp; &nbsp;: <span class="nu0">8</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*022*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*022*/</span> WORD&nbsp; &nbsp;sn;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// stream number</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> <span class="kw4">LONG</span>&nbsp; &nbsp;cbSyms;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// number of symbols</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*028*/</span> <span class="kw4">LONG</span>&nbsp; &nbsp;cbLines;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// number of lines</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02C*/</span> <span class="kw4">LONG</span>&nbsp; &nbsp;cbC13Lines;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*030*/</span> WORD&nbsp; &nbsp;ifileMac;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*032*/</span> WORD&nbsp; &nbsp;reserved;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// currently not used</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*034*/</span> <span class="kw4">LONG</span>&nbsp; &nbsp;mpifileichFile;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*038*/</span> ECInfo ecInfo;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*040*/</span> BYTE&nbsp; &nbsp;rgch <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*040*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; MODI, *PMODI, **PPMODI;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define MODI_ sizeof (MODI)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack ()</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// FPO STRUCTURES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack (1)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> ___FPO_DATA</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD ulOffStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD cbProcSize;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD cdwLocals;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; cdwParams;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E.0*/</span>&nbsp; &nbsp;WORD cbProlog : <span class="nu0">8</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F.0*/</span>&nbsp; &nbsp;WORD cbRegs&nbsp; &nbsp;: <span class="nu0">3</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F.3*/</span>&nbsp; &nbsp;WORD fHasSEH&nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F.4*/</span>&nbsp; &nbsp;WORD fUseBP&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F.5*/</span>&nbsp; &nbsp;WORD reserved : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F.6*/</span>&nbsp; &nbsp;WORD cbFrame&nbsp; : <span class="nu0">2</span>;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; __FPO_DATA, *P__FPO_DATA, **PP__FPO_DATA;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define __FPO_DATA_ sizeof (__FPO_DATA)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack ()</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// PSGSI STRUCTURES</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack (1)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PSGSIHDR</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> <span class="kw4">LONG</span>&nbsp; cbSymHash;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span>&nbsp; cbAddrMap;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD nThunks;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="kw4">LONG</span>&nbsp; cbSizeOfThunk;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; isectThunkTable;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> WORD&nbsp; reserved;&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// padding</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> <span class="kw4">LONG</span>&nbsp; offThunkTable;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD nSects;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PSGSIHDR, *PPSGSIHDR, **PPPSGSIHDR;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PSGSIHDR_ sizeof (PSGSIHDR)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _GSIHashHdr</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD verSignature;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD verHdr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="kw4">LONG</span>&nbsp; cbHr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="kw4">LONG</span>&nbsp; cbBuckets;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; GSIHashHdr, *PGSIHashHdr, **PPGSIHashHdr;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define GSIHashHdr_ sizeof (GSIHashHdr)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack ()</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// SYMBOL RECORDS</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack (1)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> _CV_PUBSYMFLAGS_e</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; cvpsfNone&nbsp; &nbsp; &nbsp;= 0x00000000,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; cvpsfCode&nbsp; &nbsp; &nbsp;= 0x00000001,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; cvpsfFunction = 0x00000002,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; cvpsfManaged&nbsp; = 0x00000004,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; cvpsfMSIL&nbsp; &nbsp; &nbsp;= 0x00000008,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_PUBSYMFLAGS_e, *PCV_PUBSYMFLAGS_e, **PPCV_PUBSYMFLAGS_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">union</span> _CV_GENERIC_FLAG</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.0*/</span> WORD cstyle&nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.1*/</span> WORD rsclean :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.2*/</span> WORD unused&nbsp; : <span class="nu0">14</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CV_GENERIC_FLAG, *PCV_GENERIC_FLAG, **PPCV_GENERIC_FLAG;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_GENERIC_FLAG_ sizeof (CV_GENERIC_FLAG)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">union</span> _CV_PUBSYMFLAGS</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD grfFlags; <span class="co1">// CV_PUBSYMFLAGS_e</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> <span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.0*/</span>&nbsp; &nbsp;DWORD fCode&nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.1*/</span>&nbsp; &nbsp;DWORD fFunction :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.2*/</span>&nbsp; &nbsp;DWORD fManaged&nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.3*/</span>&nbsp; &nbsp;DWORD fMSIL&nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.4*/</span>&nbsp; &nbsp;DWORD reserved&nbsp; : <span class="nu0">28</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CV_PUBSYMFLAGS, *PCV_PUBSYMFLAGS, **PPCV_PUBSYMFLAGS;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_PUBSYMFLAGS_ sizeof (CV_PUBSYMFLAGS)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">union</span> _CV_PROCFLAGS</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> BYTE bAll;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> BYTE grfAll;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> <span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.0*/</span>&nbsp; &nbsp;BYTE CV_PFLAG_NOFPO&nbsp; &nbsp; &nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.1*/</span>&nbsp; &nbsp;BYTE CV_PFLAG_INT&nbsp; &nbsp; &nbsp; &nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.2*/</span>&nbsp; &nbsp;BYTE CV_PFLAG_FAR&nbsp; &nbsp; &nbsp; &nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.3*/</span>&nbsp; &nbsp;BYTE CV_PFLAG_NEVER&nbsp; &nbsp; &nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.4*/</span>&nbsp; &nbsp;BYTE CV_PFLAG_NOTREACHED : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.5*/</span>&nbsp; &nbsp;BYTE CV_PFLAG_CUST_CALL&nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.6*/</span>&nbsp; &nbsp;BYTE CV_PFLAG_NOINLINE&nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.7*/</span>&nbsp; &nbsp;BYTE unused&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*001*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*001*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CV_PROCFLAGS, *PCV_PROCFLAGS, **PPCV_PROCFLAGS;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_PROCFLAGS_ sizeof (CV_PROCFLAGS)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CV_LVARFLAGS</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.0*/</span> WORD fIsParam&nbsp; &nbsp;:&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.1*/</span> WORD fAddrTaken :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.2*/</span> WORD fCompGenx&nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000.3*/</span> WORD unused&nbsp; &nbsp; &nbsp;: <span class="nu0">13</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CV_LVARFLAGS, *PCV_LVARFLAGS, **PPCV_LVARFLAGS;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_LVARFLAGS_ sizeof (CV_LVARFLAGS)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CV_lvar_attr</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> CV_LVARFLAGS flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CV_lvar_attr, *PCV_lvar_attr, **PPCV_lvar_attr;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_lvar_attr_ sizeof (CV_lvar_attr)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ALIGNSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ALIGNSYM, *PALIGNSYM, **PPALIGNSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ALIGNSYM_ sizeof (ALIGNSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ANNOTATIONSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> WORD&nbsp; csz;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> BYTE&nbsp; rgsz <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00D*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ANNOTATIONSYM, *PANNOTATIONSYM, **PPANNOTATIONSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ANNOTATIONSYM_ sizeof (ANNOTATIONSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ATTRMANYREGSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> CV_lvar_attr attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;count;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*011*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reg <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ATTRMANYREGSYM, *PATTRMANYREGSYM, **PPATTRMANYREGSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ATTRMANYREGSYM_ sizeof (ATTRMANYREGSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ATTRMANYREGSYM2</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> CV_lvar_attr attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;count;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reg <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ATTRMANYREGSYM2, *PATTRMANYREGSYM2, **PPATTRMANYREGSYM2;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ATTRMANYREGSYM2_ sizeof (ATTRMANYREGSYM2)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ATTRREGREL</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> CV_lvar_attr attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*016*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*017*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ATTRREGREL, *PATTRREGREL, **PPATTRREGREL;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ATTRREGREL_ sizeof (ATTRREGREL)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ATTRREGSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> CV_lvar_attr attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*013*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ATTRREGSYM, *PATTRREGSYM, **PPATTRREGSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ATTRREGSYM_ sizeof (ATTRREGSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ATTRSLOTSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; iSlot;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> CV_lvar_attr attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*015*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ATTRSLOTSYM, *PATTRSLOTSYM, **PPATTRSLOTSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ATTRSLOTSYM_ sizeof (ATTRSLOTSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _BLOCKSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; BLOCKSYM, *PBLOCKSYM, **PPBLOCKSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define BLOCKSYM_ sizeof (BLOCKSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _BLOCKSYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> WORD&nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*013*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; BLOCKSYM16, *PBLOCKSYM16, **PPBLOCKSYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define BLOCKSYM16_ sizeof (BLOCKSYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _BLOCKSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*016*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*017*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; BLOCKSYM32, *PBLOCKSYM32, **PPBLOCKSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define BLOCKSYM32_ sizeof (BLOCKSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _BPRELSYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">SHORT</span> off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD&nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*009*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; BPRELSYM16, *PBPRELSYM16, **PPBPRELSYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define BPRELSYM16_ sizeof (BPRELSYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _BPRELSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span>&nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00D*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; BPRELSYM32, *PBPRELSYM32, **PPBPRELSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define BPRELSYM32_ sizeof (BPRELSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _BPRELSYM32_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span> off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> BYTE name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00B*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; BPRELSYM32_16t, *PBPRELSYM32_16t, **PPBPRELSYM32_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define BPRELSYM32_16t_ sizeof (BPRELSYM32_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CEXMSYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD model;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> <span class="kw4">union</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WORD pcdtable;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WORD pcdspi;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> pcode;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WORD&nbsp; subtype;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WORD&nbsp; flag;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> cobol;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CEXMSYM16, *PCEXMSYM16, **PPCEXMSYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CEXMSYM16_ sizeof (CEXMSYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CEXMSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> WORD&nbsp; model;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="kw4">union</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DWORD pcdtable;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DWORD pcdspi;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> pcode;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WORD&nbsp; subtype;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WORD&nbsp; flag;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> cobol;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp;<span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DWORD calltableOff;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WORD&nbsp; calltableSeg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span> pcode32Mac;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CEXMSYM32, *PCEXMSYM32, **PPCEXMSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CEXMSYM32_ sizeof (CEXMSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CFLAGSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> BYTE machine;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*005.0*/</span>&nbsp; &nbsp;BYTE language&nbsp; : <span class="nu0">8</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006.0*/</span>&nbsp; &nbsp;BYTE pcode&nbsp; &nbsp; &nbsp;: <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006.1*/</span>&nbsp; &nbsp;BYTE floatprec : <span class="nu0">2</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006.3*/</span>&nbsp; &nbsp;BYTE floatpkg&nbsp; : <span class="nu0">2</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006.5*/</span>&nbsp; &nbsp;BYTE ambdata&nbsp; &nbsp;: <span class="nu0">3</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.0*/</span>&nbsp; &nbsp;BYTE ambcode&nbsp; &nbsp;: <span class="nu0">3</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.3*/</span>&nbsp; &nbsp;BYTE mode32&nbsp; &nbsp; : <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007.4*/</span>&nbsp; &nbsp;BYTE pad&nbsp; &nbsp; &nbsp; &nbsp;: <span class="nu0">4</span>;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span> flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE ver <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*009*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CFLAGSYM, *PCFLAGSYM, **PPCFLAGSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CFLAGSYM_ sizeof (CFLAGSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _COMPILESYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span>&nbsp; &nbsp; &nbsp;<span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004.0*/</span>&nbsp; &nbsp;DWORD iLanguage&nbsp; &nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">8</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004.0*/</span>&nbsp; &nbsp;DWORD fEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004.0*/</span>&nbsp; &nbsp;DWORD fNoDbgInfo&nbsp; &nbsp; &nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004.0*/</span>&nbsp; &nbsp;DWORD fLTCG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004.0*/</span>&nbsp; &nbsp;DWORD fNoDataAlign&nbsp; &nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004.0*/</span>&nbsp; &nbsp;DWORD fManagedPresent :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004.0*/</span>&nbsp; &nbsp;DWORD pad&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: <span class="nu0">19</span>;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span> flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD machine;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> WORD verFEMajor;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD verFEMinor;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> WORD verFEBuild;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD verMajor;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> WORD verMinor;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> WORD verBuild;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*016*/</span> BYTE verSt <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*017*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; COMPILESYM, *PCOMPILESYM, **PPCOMPILESYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define COMPILESYM_ sizeof (COMPILESYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CONSTSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; value;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CONSTSYM, *PCONSTSYM, **PPCONSTSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CONSTSYM_ sizeof (CONSTSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _CONSTSYM_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD value;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE name <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; CONSTSYM_16t, *PCONSTSYM_16t, **PPCONSTSYM_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CONSTSYM_16t_ sizeof (CONSTSYM_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _DATASYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> BYTE name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00B*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; DATASYM16, *PDATASYM16, **PPDATASYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define DATASYM16_ sizeof (DATASYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _DATASYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; DATASYM32, *PDATASYM32, **PPDATASYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define DATASYM32_ sizeof (DATASYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _ENTRYTHISSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> BYTE thissym;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*005*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; ENTRYTHISSYM, *PENTRYTHISSYM, **PPENTRYTHISSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define ENTRYTHISSYM_ sizeof (ENTRYTHISSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _FRAMEPROCSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD cbFrame;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD cbPad;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD offPad;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD cbSaveRegs;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD offExHdlr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> WORD&nbsp; sectExHdlr;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw4">struct</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A.0*/</span>&nbsp; &nbsp;DWORD fHasAlloca&nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A.1*/</span>&nbsp; &nbsp;DWORD fHasSetJmp&nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A.2*/</span>&nbsp; &nbsp;DWORD fHasLongJmp :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A.3*/</span>&nbsp; &nbsp;DWORD fHasInlAsm&nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A.4*/</span>&nbsp; &nbsp;DWORD fHasEH&nbsp; &nbsp; &nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A.5*/</span>&nbsp; &nbsp;DWORD fInlSpec&nbsp; &nbsp; :&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A.6*/</span>&nbsp; &nbsp;DWORD fHasSEH&nbsp; &nbsp; &nbsp;:&nbsp; <span class="nu0">1</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A.7*/</span>&nbsp; &nbsp;DWORD pad&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: <span class="nu0">25</span>;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01E*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; FRAMEPROCSYM, *PFRAMEPROCSYM, **PPFRAMEPROCSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define FRAMEPROCSYM_ sizeof (FRAMEPROCSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _FRAMERELSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="kw4">LONG</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> CV_lvar_attr attr;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*015*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; FRAMERELSYM, *PFRAMERELSYM, **PPFRAMERELSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define FRAMERELSYM_ sizeof (FRAMERELSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _LABELSYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> CV_PROCFLAGS flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*009*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; LABELSYM16, *PLABELSYM16, **PPLABELSYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define LABELSYM16_ sizeof (LABELSYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _LABELSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> CV_PROCFLAGS flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00B*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; LABELSYM32, *PLABELSYM32, **PPLABELSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define LABELSYM32_ sizeof (LABELSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _MANPROCSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD DbgStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD DbgEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> DWORD token;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*026*/</span> CV_PROCFLAGS flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*027*/</span> WORD&nbsp; retReg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*029*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; MANPROCSYM, *PMANPROCSYM, **PPMANPROCSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define MANPROCSYM_ sizeof (MANPROCSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _MANPROCSYMMIPS</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD DbgStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD DbgEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> DWORD regSave;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> DWORD fpSave;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> DWORD intOff;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*028*/</span> DWORD fpOff;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02C*/</span> DWORD token;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*030*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*034*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*036*/</span> BYTE&nbsp; retReg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*037*/</span> BYTE&nbsp; frameReg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*038*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*039*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; MANPROCSYMMIPS, *PMANPROCSYMMIPS, **PPMANPROCSYMMIPS;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define MANPROCSYMMIPS_ sizeof (MANPROCSYMMIPS)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _MANTYPREF</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; MANTYPREF, *PMANTYPREF, **PPMANTYPREF;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define MANTYPREF_ sizeof (MANTYPREF)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _MANYREGSYM_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> BYTE count;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007*/</span> BYTE reg <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; MANYREGSYM_16t, *PMANYREGSYM_16t, **PPMANYREGSYM_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define MANYREGSYM_16t_ sizeof (MANYREGSYM_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _MANYREGSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE&nbsp; count;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*009*/</span> BYTE&nbsp; reg <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; MANYREGSYM, *PMANYREGSYM, **PPMANYREGSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define MANYREGSYM_ sizeof (MANYREGSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _MANYREGSYM2</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; count;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> WORD&nbsp; reg <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; MANYREGSYM2, *PMANYREGSYM2, **PPMANYREGSYM2;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define MANYREGSYM2_ sizeof (MANYREGSYM2)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _OBJNAMESYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD signature;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*009*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; OBJNAMESYM, *POBJNAMESYM, **PPOBJNAMESYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define OBJNAMESYM_ sizeof (OBJNAMESYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _OEMSYMBOL</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> BYTE&nbsp; idOem <span class="br0">&#91;</span><span class="nu0">16</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD rgl <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; OEMSYMBOL, *POEMSYMBOL, **PPOEMSYMBOL;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define OEMSYMBOL_ sizeof (OEMSYMBOL)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PROCSYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DbgStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DbgEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*016*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> CV_PROCFLAGS flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01D*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01E*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PROCSYM16, *PPROCSYM16, **PPPROCSYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PROCSYM16_ sizeof (PROCSYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PROCSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; DbgStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; DbgEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*026*/</span> CV_PROCFLAGS flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*027*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*028*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PROCSYM32, *PPROCSYM32, **PPPROCSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PROCSYM32_ sizeof (PROCSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PROCSYM32_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; DbgStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; DbgEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*022*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> CV_PROCFLAGS flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*025*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*026*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PROCSYM32_16t, *PPROCSYM32_16t, **PPPROCSYM32_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PROCSYM32_16t_ sizeof (PROCSYM32_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PROCSYMIA64</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; DbgStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; DbgEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*026*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;retReg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*028*/</span> CV_PROCFLAGS flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*029*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PROCSYMIA64, *PPROCSYMIA64, **PPPROCSYMIA64;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PROCSYMIA64_ sizeof (PROCSYMIA64)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PROCSYMMIPS</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD DbgStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD DbgEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> DWORD regSave;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> DWORD fpSave;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> DWORD intOff;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*028*/</span> DWORD fpOff;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02C*/</span> DWORD typinf;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*030*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*034*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*036*/</span> BYTE&nbsp; retReg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*037*/</span> BYTE&nbsp; frameReg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*038*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*039*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PROCSYMMIPS, *PPROCSYMMIPS, **PPPROCSYMMIPS;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PROCSYMMIPS_ sizeof (PROCSYMMIPS)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PROCSYMMIPS_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> DWORD DbgStart;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> DWORD DbgEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01C*/</span> DWORD regSave;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*020*/</span> DWORD fpSave;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*024*/</span> DWORD intOff;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*028*/</span> DWORD fpOff;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*02C*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*030*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*032*/</span> WORD&nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*034*/</span> BYTE&nbsp; retReg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*035*/</span> BYTE&nbsp; frameReg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*036*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*037*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PROCSYMMIPS_16t, *PPROCSYMMIPS_16t, **PPPROCSYMMIPS_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PROCSYMMIPS_16t_ sizeof (PROCSYMMIPS_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _PUBSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reclen;&nbsp; &nbsp; &nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;rectyp;&nbsp; &nbsp; &nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> CV_PUBSYMFLAGS pubsymflags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; PUBSYM32, *PPUBSYM32, **PPPUBSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define PUBSYM32_ sizeof (PUBSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _REFSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD sumName;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD ibSym;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; imod;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> WORD&nbsp; usFill;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; REFSYM, *PREFSYM, **PPREFSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define REFSYM_ sizeof (REFSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _REFSYM2</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD sumName;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD ibSym;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; imod;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; REFSYM2, *PREFSYM2, **PPREFSYM2;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define REFSYM2_ sizeof (REFSYM2)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _REGREL16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD reg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> BYTE name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00B*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; REGREL16, *PREGREL16, **PPREGREL16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define REGREL16_ sizeof (REGREL16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _REGREL32_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; reg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> WORD&nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00D*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; REGREL32_16t, *PREGREL32_16t, **PPREGREL32_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define REGREL32_16t_ sizeof (REGREL32_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _REGREL32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; reg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00F*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; REGREL32, *PREGREL32, **PPREGREL32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define REGREL32_ sizeof (REGREL32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _REGSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; reg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00B*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; REGSYM, *PREGSYM, **PPREGSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define REGSYM_ sizeof (REGSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _REGSYM_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD reg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*009*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; REGSYM_16t, *PREGSYM_16t, **PPREGSYM_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define REGSYM_16t_ sizeof (REGSYM_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _RETURNSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> CV_GENERIC_FLAG flags;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; style;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; RETURNSYM, *PRETURNSYM, **PPRETURNSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define RETURNSYM_ sizeof (RETURNSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _SEARCHSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD startsym;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; SEARCHSYM, *PSEARCHSYM, **PPSEARCHSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define SEARCHSYM_ sizeof (SEARCHSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _SLINK32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD framesize;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="kw4">LONG</span>&nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; reg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; SLINK32, *PSLINK32, **PPSLINK32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define SLINK32_ sizeof (SLINK32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _SLOTSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD iSlot;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00D*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; SLOTSYM32, *PSLOTSYM32, **PPSLOTSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define SLOTSYM32_ sizeof (SLOTSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _SYMTYPE</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> BYTE data <span class="br0">&#91;</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; SYMTYPE, *PSYMTYPE, **PPSYMTYPE;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define SYMTYPE_ sizeof (SYMTYPE)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _THREADSYM32_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> WORD&nbsp; typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00D*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; THREADSYM32_16t, *PTHREADSYM32_16t, **PPTHREADSYM32_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define THREADSYM32_16t_ sizeof (THREADSYM32_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _THUNKSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; THUNKSYM, *PTHUNKSYM, **PPTHUNKSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define THUNKSYM_ sizeof (THUNKSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _THUNKSYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> WORD&nbsp; len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*016*/</span> BYTE&nbsp; ord;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*017*/</span> BYTE&nbsp; name&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> BYTE&nbsp; variant <span class="br0">&#91;</span> <span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; THUNKSYM16, *PTHUNKSYM16, **PPTHUNKSYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define THUNKSYM16_ sizeof (THUNKSYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _THUNKSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD pNext;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*016*/</span> WORD&nbsp; len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*018*/</span> BYTE&nbsp; ord;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*019*/</span> BYTE&nbsp; name&nbsp; &nbsp; <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A*/</span> BYTE&nbsp; variant <span class="br0">&#91;</span> <span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*01A*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; THUNKSYM32, *PTHUNKSYM32, **PPTHUNKSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define THUNKSYM32_ sizeof (THUNKSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _TRAMPOLINESYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD&nbsp; trampType;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD&nbsp; cbThunk;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD offThunk;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD offTarget;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; sectThunk;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> WORD&nbsp; sectTarget;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; TRAMPOLINESYM, *PTRAMPOLINESYM, **PPTRAMPOLINESYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define TRAMPOLINESYM_ sizeof (TRAMPOLINESYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _UDTSYM</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> BYTE&nbsp; name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*009*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; UDTSYM, *PUDTSYM, **PPUDTSYM;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define UDTSYM_ sizeof (UDTSYM)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _UDTSYM_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD typind;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> BYTE name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*007*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; UDTSYM_16t, *PUDTSYM_16t, **PPUDTSYM_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define UDTSYM_16t_ sizeof (UDTSYM_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _UNAMESPACE</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> BYTE name <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*005*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; UNAMESPACE, *PUNAMESPACE, **PPUNAMESPACE;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define UNAMESPACE_ sizeof (UNAMESPACE)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _VPATHSYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD reclen; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD rectyp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> WORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*006*/</span> WORD seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD root;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> WORD path;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; VPATHSYM16, *PVPATHSYM16, **PPVPATHSYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define VPATHSYM16_ sizeof (VPATHSYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _VPATHSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD root;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD path;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; VPATHSYM32, *PVPATHSYM32, **PPVPATHSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define VPATHSYM32_ sizeof (VPATHSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _VPATHSYM32_16t</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp; <span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp; <span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00A*/</span> WORD&nbsp; root;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; path;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; VPATHSYM32_16t, *PVPATHSYM32_16t, **PPVPATHSYM32_16t;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define VPATHSYM32_16t_ sizeof (VPATHSYM32_16t)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _WITHSYM16</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> WORD&nbsp; len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00E*/</span> WORD&nbsp; off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*012*/</span> BYTE&nbsp; expr <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*013*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; WITHSYM16, *PWITHSYM16, **PPWITHSYM16;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define WITHSYM16_ sizeof (WITHSYM16)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _WITHSYM32</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> WORD&nbsp; reclen;&nbsp; &nbsp;<span class="co1">// record length</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*002*/</span> WORD&nbsp; rectyp;&nbsp; &nbsp;<span class="co1">// record type</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD pParent;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> DWORD pEnd;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*00C*/</span> DWORD len;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*010*/</span> DWORD off;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*014*/</span> WORD&nbsp; seg;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*016*/</span> BYTE&nbsp; expr <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*017*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; WITHSYM32, *PWITHSYM32, **PPWITHSYM32;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define WITHSYM32_ sizeof (WITHSYM32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _OMAP_DATA</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*000*/</span> DWORD rva;&nbsp; &nbsp;<span class="co1">// relative virtual address</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*004*/</span> DWORD rvaTo; <span class="co1">// converted relative virtual address</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/*008*/</span> <span class="br0">&#125;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; OMAP_DATA, *POMAP_DATA, **PPOMAP_DATA;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define OMAP_DATA_ sizeof (OMAP_DATA)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// -----------------------------------------------------------------</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#pragma pack ()</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// END OF FILE</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// =================================================================</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//////////////////////////////////////////////////////////////////////////</span></div></li>
<li class="li1"><div class="de1">;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SIGNATURE_C6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0L&nbsp; // Actual signature is &gt;64K</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SIGNATURE_C7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1L&nbsp; // First explicit signature</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SIGNATURE_C8&nbsp; &nbsp; &nbsp;2L</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SIGNATURE_C81&nbsp; &nbsp; 3L</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SIGNATURE_C9&nbsp; &nbsp; &nbsp;4L&nbsp; // Use CVSIGEX</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SIGNATURE_RESERVED&nbsp; &nbsp;2L&nbsp; // All signatures from 2 to 64K are reserved</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_MAXOFFSET&nbsp; &nbsp;0xffffffff</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/**&nbsp; &nbsp; &nbsp;CodeView Symbol and Type OMF type information is broken up into two</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;ranges.&nbsp; Type indices less than 0x1000 describe type information</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;that is frequently used.&nbsp; Type indices above 0x1000 are used to</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;describe more complex features such as functions, arrays and</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;structures.</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*/</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="coMULTI">/**&nbsp; &nbsp; &nbsp;Primitive types have predefined meaning that is encoded in the</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;values of the various bit fields in the value.</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;A CodeView primitive type is defined as:</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;1 1</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;1 089&nbsp; 7654&nbsp; 3&nbsp; 210</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;r mode type&nbsp; r&nbsp; sub</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;Where</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mode is the pointer mode</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;type is a type indicator</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sub&nbsp; is a subtype enumeration</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;r&nbsp; &nbsp; is a reserved field</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;See Microsoft Symbol and Type OMF (Version 4.0) for more</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*&nbsp; &nbsp; &nbsp; &nbsp;information.</span></div></li>
<li class="li1"><div class="de1"><span class="coMULTI">*/</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_MMASK&nbsp; &nbsp; &nbsp; &nbsp; 0x700&nbsp; &nbsp; &nbsp; &nbsp;// mode mask</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TMASK&nbsp; &nbsp; &nbsp; &nbsp; 0x0f0&nbsp; &nbsp; &nbsp; &nbsp;// type mask</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#if CC_BIGINT</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// can we use the reserved bit ??</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SMASK&nbsp; &nbsp; &nbsp; &nbsp; 0x008&nbsp; &nbsp; &nbsp; &nbsp;// subtype mask</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#else</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SMASK&nbsp; &nbsp; &nbsp; &nbsp; 0x007&nbsp; &nbsp; &nbsp; &nbsp;// subtype mask</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#endif</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_MSHIFT&nbsp; &nbsp; &nbsp; &nbsp;8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// primitive mode right shift count</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TSHIFT&nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// primitive type right shift count</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SSHIFT&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// primitive subtype right shift count</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// macros to extract primitive mode, type and size</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_MODE(typ)&nbsp; &nbsp; (((typ) &amp; CV_MMASK) &gt;&gt; CV_MSHIFT)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYPE(typ)&nbsp; &nbsp; (((typ) &amp; CV_TMASK) &gt;&gt; CV_TSHIFT)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_SUBT(typ)&nbsp; &nbsp; (((typ) &amp; CV_SMASK) &gt;&gt; CV_SSHIFT)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// macros to insert new primitive mode, type and size</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_NEWMODE(typ, nm)&nbsp; &nbsp; &nbsp;((CV_typ_t)(((typ) &amp; ~CV_MMASK) | ((nm) &lt;&lt; CV_MSHIFT)))</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_NEWTYPE(typ, nt)&nbsp; &nbsp; &nbsp;(((typ) &amp; ~CV_TMASK) | ((nt) &lt;&lt; CV_TSHIFT))</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_NEWSUBT(typ, ns)&nbsp; &nbsp; &nbsp;(((typ) &amp; ~CV_SMASK) | ((ns) &lt;&lt; CV_SSHIFT))</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//&nbsp; &nbsp; &nbsp;pointer mode enumeration values</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> CV_prmode_e <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_TM_DIRECT = <span class="nu0">0</span>,&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// mode is not a pointer</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_TM_NPTR&nbsp; &nbsp;= <span class="nu0">1</span>,&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// mode is a near pointer</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_TM_FPTR&nbsp; &nbsp;= <span class="nu0">2</span>,&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// mode is a far pointer</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_TM_HPTR&nbsp; &nbsp;= <span class="nu0">3</span>,&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// mode is a huge pointer</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_TM_NPTR32 = <span class="nu0">4</span>,&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// mode is a 32 bit near pointer</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_TM_FPTR32 = <span class="nu0">5</span>,&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// mode is a 32 bit far pointer</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_TM_NPTR64 = <span class="nu0">6</span>&nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// mode is a 64 bit near pointer</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#if CC_BIGINT</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; ,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_TM_NPTR128 = <span class="nu0">7</span>&nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// mode is a 128 bit near pointer</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#endif</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CV_prmode_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//&nbsp; &nbsp; &nbsp; type enumeration values</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> CV_type_e <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SPECIAL&nbsp; &nbsp; &nbsp; = 0x00,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// special type size values</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SIGNED&nbsp; &nbsp; &nbsp; &nbsp;= 0x01,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// signed integral size values</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_UNSIGNED&nbsp; &nbsp; &nbsp;= 0x02,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// unsigned integral size values</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_BOOLEAN&nbsp; &nbsp; &nbsp; = 0x03,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// Boolean size values</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_REAL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 0x04,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// real number size values</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_COMPLEX&nbsp; &nbsp; &nbsp; = 0x05,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// complex number size values</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SPECIAL2&nbsp; &nbsp; &nbsp;= 0x06,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// second set of special types</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_INT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0x07,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="co1">// integral (int) values</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_CVRESERVED&nbsp; &nbsp;= 0x0f</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CV_type_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//&nbsp; &nbsp; &nbsp; subtype enumeration values for CV_SPECIAL</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> CV_special_e <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SP_NOTYPE&nbsp; &nbsp; = 0x00,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SP_ABS&nbsp; &nbsp; &nbsp; &nbsp;= 0x01,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SP_SEGMENT&nbsp; &nbsp;= 0x02,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SP_VOID&nbsp; &nbsp; &nbsp; = 0x03,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SP_CURRENCY&nbsp; = 0x04,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SP_NBASICSTR = 0x05,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SP_FBASICSTR = 0x06,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_SP_NOTTRANS&nbsp; = 0x07</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CV_special_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//&nbsp; &nbsp; &nbsp; subtype enumeration values for CV_SPECIAL2</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> CV_special2_e <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_S2_BIT&nbsp; &nbsp; &nbsp; &nbsp;= 0x00,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_S2_PASCHAR&nbsp; &nbsp;= 0x01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// Pascal CHAR</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CV_special2_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//&nbsp; &nbsp; &nbsp; subtype enumeration values for CV_SIGNED, CV_UNSIGNED and CV_BOOLEAN</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> CV_integral_e <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_IN_1BYTE&nbsp; &nbsp; &nbsp;= 0x00,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_IN_2BYTE&nbsp; &nbsp; &nbsp;= 0x01,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_IN_4BYTE&nbsp; &nbsp; &nbsp;= 0x02,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_IN_8BYTE&nbsp; &nbsp; &nbsp;= 0x03</div></li>
<li class="li1"><div class="de1"><span class="co2">#if CC_BIGINT</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; ,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_IN_16BYTE&nbsp; &nbsp; = 0x04</div></li>
<li class="li1"><div class="de1"><span class="co2">#endif</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CV_integral_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//&nbsp; &nbsp; &nbsp; subtype enumeration values for CV_REAL and CV_COMPLEX</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> CV_real_e <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RC_REAL32&nbsp; &nbsp; = 0x00,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RC_REAL64&nbsp; &nbsp; = 0x01,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RC_REAL80&nbsp; &nbsp; = 0x02,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RC_REAL128&nbsp; &nbsp;= 0x03,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RC_REAL48&nbsp; &nbsp; = 0x04</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CV_real_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//&nbsp; &nbsp; &nbsp; subtype enumeration values for CV_INT (really int)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw2">enum</span> CV_int_e <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_CHAR&nbsp; &nbsp; &nbsp; = 0x00,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_INT1&nbsp; &nbsp; &nbsp; = 0x00,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_WCHAR&nbsp; &nbsp; &nbsp;= 0x01,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_UINT1&nbsp; &nbsp; &nbsp;= 0x01,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_INT2&nbsp; &nbsp; &nbsp; = 0x02,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_UINT2&nbsp; &nbsp; &nbsp;= 0x03,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_INT4&nbsp; &nbsp; &nbsp; = 0x04,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_UINT4&nbsp; &nbsp; &nbsp;= 0x05,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_INT8&nbsp; &nbsp; &nbsp; = 0x06,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_UINT8&nbsp; &nbsp; &nbsp;= 0x07</div></li>
<li class="li1"><div class="de1"><span class="co2">#if CC_BIGINT</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; ,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_INT16&nbsp; &nbsp; &nbsp;= 0x08,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CV_RI_UINT16&nbsp; &nbsp; = 0x09</div></li>
<li class="li1"><div class="de1"><span class="co2">#endif</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CV_int_e;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// macros to check the type of a primitive</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_DIRECT(typ)&nbsp; &nbsp;(CV_MODE(typ) == CV_TM_DIRECT)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_PTR(typ)&nbsp; &nbsp; &nbsp; (CV_MODE(typ) != CV_TM_DIRECT)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_NPTR(typ)&nbsp; &nbsp; &nbsp;(CV_MODE(typ) == CV_TM_NPTR)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_FPTR(typ)&nbsp; &nbsp; &nbsp;(CV_MODE(typ) == CV_TM_FPTR)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_HPTR(typ)&nbsp; &nbsp; &nbsp;(CV_MODE(typ) == CV_TM_HPTR)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_NPTR32(typ)&nbsp; &nbsp;(CV_MODE(typ) == CV_TM_NPTR32)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_FPTR32(typ)&nbsp; &nbsp;(CV_MODE(typ) == CV_TM_FPTR32)</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#if CC_BIGINT</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_SIGNED(typ)&nbsp; &nbsp;(((CV_TYPE(typ) == CV_SIGNED)&nbsp; &amp;&amp; CV_TYP_IS_DIRECT(typ)) || \</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#40;</span>typ == T_INT1<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_INT2<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_INT4<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_INT8<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_INT16<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_RCHAR<span class="br0">&#41;</span><span class="br0">&#41;</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_UNSIGNED(typ) (((CV_TYPE(typ) == CV_UNSIGNED)&nbsp; &amp;&amp; CV_TYP_IS_DIRECT(typ)) || \</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#40;</span>typ == T_UINT1<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_UINT2<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_UINT4<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_UINT8<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_UINT16<span class="br0">&#41;</span><span class="br0">&#41;</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#else</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_SIGNED(typ)&nbsp; &nbsp;(((CV_TYPE(typ) == CV_SIGNED)&nbsp; &amp;&amp; CV_TYP_IS_DIRECT(typ)) || \</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#40;</span>typ == T_INT1<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_INT2<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_INT4<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_RCHAR<span class="br0">&#41;</span><span class="br0">&#41;</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_UNSIGNED(typ) (((CV_TYPE(typ) == CV_UNSIGNED)&nbsp; &amp;&amp; CV_TYP_IS_DIRECT(typ)) || \</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="br0">&#40;</span>typ == T_UINT1<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_UINT2<span class="br0">&#41;</span> || <span class="br0">&#40;</span>typ == T_UINT4<span class="br0">&#41;</span><span class="br0">&#41;</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#endif</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_REAL(typ)&nbsp; &nbsp; &nbsp;((CV_TYPE(typ) == CV_REAL)&nbsp; &amp;&amp; CV_TYP_IS_DIRECT(typ))</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_FIRST_NONPRIM 0x1000</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_IS_PRIMITIVE(typ)&nbsp; &nbsp; ((typ) &lt; CV_FIRST_NONPRIM)</span></div></li>
<li class="li1"><div class="de1"><span class="co2">#define CV_TYP_IS_COMPLEX(typ)&nbsp; ((CV_TYPE(typ) == CV_COMPLEX)&nbsp; &nbsp;&amp;&amp; CV_TYP_IS_DIRECT(typ))</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// selected values for type_index - for a more complete definition, see</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// Microsoft Symbol and Type OMF document</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//////////////////////////////////////////////////////////////////////////</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> CVSIG</div></li>
<li class="li1"><div class="de1"><span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD dwSig;</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CVSIG, *PCVSIG;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> CVSIGEX</div></li>
<li class="li1"><div class="de1"><span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD dwSig;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD dwUnknown1;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD dwLength;</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CVSIGEX, *PCVSIGEX;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> CVOBJECT</div></li>
<li class="li1"><div class="de1"><span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wLen;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wRecType;</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CVOBJECT, *PCVOBJECT;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> CVOBJNAME</div></li>
<li class="li1"><div class="de1"><span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wLen;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wRecType;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD dwPchSig;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="co1">// Length-prefixed object name</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CVOBJNAME, *PCVOBJNAME;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> CVCOMPILE</div></li>
<li class="li1"><div class="de1"><span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wLen;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wRecType;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; BYTE bMachine;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; BYTE bLanguage;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; BYTE bFlags1;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; BYTE bFlags2;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="co1">// Length prefixed linker version is here</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CVCOMPILE, *PCVCOMPILE;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> CVTHUNK</div></li>
<li class="li1"><div class="de1"><span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wLen;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wRecType;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD Parent;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD End;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD Next;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD ib;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD sn;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD cb;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; BYTE Ordinal;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="co1">// Length prefixed thunk name is here</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CVTHUNK, *PCVTHUNK;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> CVEND</div></li>
<li class="li1"><div class="de1"><span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wLen;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; WORD wRecType;</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CVEND, *PCVEND;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">//////////////////////////////////////////////////////////////////////////</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">struct</span> CVSEEKS <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD Base;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD SubsectionDir;</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">struct</span> CVSUBSECTION <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD PointerToSubsection;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD SizeOfSubsection;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DWORD Precompiled;</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> CVINFO <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; PVOID pmod;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// the module represented</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="kw4">char</span> *ObjectFilename;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CVSUBSECTION Publics;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CVSUBSECTION Locals;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CVSUBSECTION Types;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CVSUBSECTION Linenumbers;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CVSUBSECTION Module;</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span> CVINFO, *PCVINFO;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="co1">// CVSEG: used temporarily in EmitCvInfo to build the sstModule table for</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// each module.&nbsp; Each CVSEG will become an array element in the sstModule</span></div></li>
<li class="li1"><div class="de1"><span class="co1">// subsection.</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw4">struct</span> CVSEG <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; PVOID pgrp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="co1">// the group which the CON's are in</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; PVOID pconFirst, pconLast;&nbsp; &nbsp;<span class="co1">// first and last CON described</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="kw4">struct</span> CVSEG *pcvsegNext;</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw2">enum</span> DUMP_RAW_DISPLAY_TYPE <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Bytes,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Shorts,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Longs</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw2">enum</span> DEBUG_INFO <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; None,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Minimal,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Partial,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Full</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw2">enum</span> DEBUG_TYPE <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; NoDebug = <span class="nu0">0</span>,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CoffDebug = <span class="nu0">1</span>,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; CvDebug = <span class="nu0">2</span>,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; FpoDebug = <span class="nu0">4</span>,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; FixupDebug = <span class="nu0">8</span>,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; MiscDebug = <span class="nu0">16</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw2">enum</span> TOOL_TYPE <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; NotUsed,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Linker,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Librarian,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Dumper,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Editor,</div></li>
<li class="li1"><div class="de1"><span class="co2">#if DBG</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; DbInspector,</div></li>
<li class="li1"><div class="de1"><span class="co2">#endif // DBG</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; Binder</div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span>;</div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li1"><div class="de1"><span class="kw2">enum</span> FORCE_TYPE <span class="br0">&#123;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; ftNone = <span class="nu0">0</span>,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; ftUnresolved = <span class="nu0">1</span>,</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; ftMultiple = <span class="nu0">2</span></div></li>
<li class="li1"><div class="de1"><span class="br0">&#125;</span>; </div></li></ol></div>            </p>
          </div>

          <div id="editbuttonbox">
            <p>
                          <textarea style="display: none;" id="source" name="source" cols="100" rows="25">#pragma once

#pragma once

// pdb_info.h
// 06-25-2006 Sven B. Schreiber
// sbs@orgon.com

// =================================================================
// PDB INTERFACE VERSIONS
// =================================================================

#define PDBIntv41         920924
#define PDBIntv50       19960502
#define PDBIntv50a      19970116
#define PDBIntv60       19970116
#define PDBIntv61       19980914
#define PDBIntv69       19990511
#define PDBIntv70Dep    20000406
#define PDBIntv70       20001102

#define PDBIntv         PDBIntv70

#define PDBIntvAlt      PDBIntv50
#define PDBIntvAlt2     PDBIntv60
#define PDBIntvAlt3     PDBIntv69

// =================================================================
// PDB IMPLEMENTATION VERSIONS
// =================================================================

#define PDBImpvVC2      19941610
#define PDBImpvVC4      19950623
#define PDBImpvVC41     19950814
#define PDBImpvVC50     19960307
#define PDBImpvVC98     19970604
#define PDBImpvVC70Dep  19990604
#define PDBImpvVC70     20000404

#define PDBImpv         PDBImpvVC70

// =================================================================
// DBI IMPLEMENTATION VERSIONS
// =================================================================

#define DBIImpvV41        930803
#define DBIImpvV50      19960307
#define DBIImpvV60      19970606
#define DBIImpvV70      19990903

#define DBIImpv         DBIImpvV70

// =================================================================
// BASIC TYPES
// =================================================================

typedef enum _TYPE_ENUM_e
    {
    T_NOTYPE                = 0x00000000,
    T_ABS                   = 0x00000001,
    T_SEGMENT               = 0x00000002,
    T_VOID                  = 0x00000003,

    T_HRESULT               = 0x00000008,
    T_32PHRESULT            = 0x00000408,
    T_64PHRESULT            = 0x00000608,

    T_PVOID                 = 0x00000103,
    T_PFVOID                = 0x00000203,
    T_PHVOID                = 0x00000303,
    T_32PVOID               = 0x00000403,
    T_32PFVOID              = 0x00000503,
    T_64PVOID               = 0x00000603,

    T_CURRENCY              = 0x00000004,
    T_NBASICSTR             = 0x00000005,
    T_FBASICSTR             = 0x00000006,
    T_NOTTRANS              = 0x00000007,
    T_BIT                   = 0x00000060,
    T_PASCHAR               = 0x00000061,

    T_CHAR                  = 0x00000010,
    T_PCHAR                 = 0x00000110,
    T_PFCHAR                = 0x00000210,
    T_PHCHAR                = 0x00000310,
    T_32PCHAR               = 0x00000410,
    T_32PFCHAR              = 0x00000510,
    T_64PCHAR               = 0x00000610,

    T_UCHAR                 = 0x00000020,
    T_PUCHAR                = 0x00000120,
    T_PFUCHAR               = 0x00000220,
    T_PHUCHAR               = 0x00000320,
    T_32PUCHAR              = 0x00000420,
    T_32PFUCHAR             = 0x00000520,
    T_64PUCHAR              = 0x00000620,

    T_RCHAR                 = 0x00000070,
    T_PRCHAR                = 0x00000170,
    T_PFRCHAR               = 0x00000270,
    T_PHRCHAR               = 0x00000370,
    T_32PRCHAR              = 0x00000470,
    T_32PFRCHAR             = 0x00000570,
    T_64PRCHAR              = 0x00000670,

    T_WCHAR                 = 0x00000071,
    T_PWCHAR                = 0x00000171,
    T_PFWCHAR               = 0x00000271,
    T_PHWCHAR               = 0x00000371,
    T_32PWCHAR              = 0x00000471,
    T_32PFWCHAR             = 0x00000571,
    T_64PWCHAR              = 0x00000671,

    T_INT1                  = 0x00000068,
    T_PINT1                 = 0x00000168,
    T_PFINT1                = 0x00000268,
    T_PHINT1                = 0x00000368,
    T_32PINT1               = 0x00000468,
    T_32PFINT1              = 0x00000568,
    T_64PINT1               = 0x00000668,

    T_UINT1                 = 0x00000069,
    T_PUINT1                = 0x00000169,
    T_PFUINT1               = 0x00000269,
    T_PHUINT1               = 0x00000369,
    T_32PUINT1              = 0x00000469,
    T_32PFUINT1             = 0x00000569,
    T_64PUINT1              = 0x00000669,

    T_SHORT                 = 0x00000011,
    T_PSHORT                = 0x00000111,
    T_PFSHORT               = 0x00000211,
    T_PHSHORT               = 0x00000311,
    T_32PSHORT              = 0x00000411,
    T_32PFSHORT             = 0x00000511,
    T_64PSHORT              = 0x00000611,

    T_USHORT                = 0x00000021,
    T_PUSHORT               = 0x00000121,
    T_PFUSHORT              = 0x00000221,
    T_PHUSHORT              = 0x00000321,
    T_32PUSHORT             = 0x00000421,
    T_32PFUSHORT            = 0x00000521,
    T_64PUSHORT             = 0x00000621,

    T_INT2                  = 0x00000072,
    T_PINT2                 = 0x00000172,
    T_PFINT2                = 0x00000272,
    T_PHINT2                = 0x00000372,
    T_32PINT2               = 0x00000472,
    T_32PFINT2              = 0x00000572,
    T_64PINT2               = 0x00000672,

    T_UINT2                 = 0x00000073,
    T_PUINT2                = 0x00000173,
    T_PFUINT2               = 0x00000273,
    T_PHUINT2               = 0x00000373,
    T_32PUINT2              = 0x00000473,
    T_32PFUINT2             = 0x00000573,
    T_64PUINT2              = 0x00000673,

    T_LONG                  = 0x00000012,
    T_PLONG                 = 0x00000112,
    T_PFLONG                = 0x00000212,
    T_PHLONG                = 0x00000312,
    T_32PLONG               = 0x00000412,
    T_32PFLONG              = 0x00000512,
    T_64PLONG               = 0x00000612,

    T_ULONG                 = 0x00000022,
    T_PULONG                = 0x00000122,
    T_PFULONG               = 0x00000222,
    T_PHULONG               = 0x00000322,
    T_32PULONG              = 0x00000422,
    T_32PFULONG             = 0x00000522,
    T_64PULONG              = 0x00000622,

    T_INT4                  = 0x00000074,
    T_PINT4                 = 0x00000174,
    T_PFINT4                = 0x00000274,
    T_PHINT4                = 0x00000374,
    T_32PINT4               = 0x00000474,
    T_32PFINT4              = 0x00000574,
    T_64PINT4               = 0x00000674,

    T_UINT4                 = 0x00000075,
    T_PUINT4                = 0x00000175,
    T_PFUINT4               = 0x00000275,
    T_PHUINT4               = 0x00000375,
    T_32PUINT4              = 0x00000475,
    T_32PFUINT4             = 0x00000575,
    T_64PUINT4              = 0x00000675,

    T_QUAD                  = 0x00000013,
    T_PQUAD                 = 0x00000113,
    T_PFQUAD                = 0x00000213,
    T_PHQUAD                = 0x00000313,
    T_32PQUAD               = 0x00000413,
    T_32PFQUAD              = 0x00000513,
    T_64PQUAD               = 0x00000613,

    T_UQUAD                 = 0x00000023,
    T_PUQUAD                = 0x00000123,
    T_PFUQUAD               = 0x00000223,
    T_PHUQUAD               = 0x00000323,
    T_32PUQUAD              = 0x00000423,
    T_32PFUQUAD             = 0x00000523,
    T_64PUQUAD              = 0x00000623,

    T_INT8                  = 0x00000076,
    T_PINT8                 = 0x00000176,
    T_PFINT8                = 0x00000276,
    T_PHINT8                = 0x00000376,
    T_32PINT8               = 0x00000476,
    T_32PFINT8              = 0x00000576,
    T_64PINT8               = 0x00000676,

    T_UINT8                 = 0x00000077,
    T_PUINT8                = 0x00000177,
    T_PFUINT8               = 0x00000277,
    T_PHUINT8               = 0x00000377,
    T_32PUINT8              = 0x00000477,
    T_32PFUINT8             = 0x00000577,
    T_64PUINT8              = 0x00000677,

    T_OCT                   = 0x00000014,
    T_POCT                  = 0x00000114,
    T_PFOCT                 = 0x00000214,
    T_PHOCT                 = 0x00000314,
    T_32POCT                = 0x00000414,
    T_32PFOCT               = 0x00000514,
    T_64POCT                = 0x00000614,

    T_UOCT                  = 0x00000024,
    T_PUOCT                 = 0x00000124,
    T_PFUOCT                = 0x00000224,
    T_PHUOCT                = 0x00000324,
    T_32PUOCT               = 0x00000424,
    T_32PFUOCT              = 0x00000524,
    T_64PUOCT               = 0x00000624,

    T_INT16                 = 0x00000078,
    T_PINT16                = 0x00000178,
    T_PFINT16               = 0x00000278,
    T_PHINT16               = 0x00000378,
    T_32PINT16              = 0x00000478,
    T_32PFINT16             = 0x00000578,
    T_64PINT16              = 0x00000678,

    T_UINT16                = 0x00000079,
    T_PUINT16               = 0x00000179,
    T_PFUINT16              = 0x00000279,
    T_PHUINT16              = 0x00000379,
    T_32PUINT16             = 0x00000479,
    T_32PFUINT16            = 0x00000579,
    T_64PUINT16             = 0x00000679,

    T_REAL32                = 0x00000040,
    T_PREAL32               = 0x00000140,
    T_PFREAL32              = 0x00000240,
    T_PHREAL32              = 0x00000340,
    T_32PREAL32             = 0x00000440,
    T_32PFREAL32            = 0x00000540,
    T_64PREAL32             = 0x00000640,

    T_REAL48                = 0x00000044,
    T_PREAL48               = 0x00000144,
    T_PFREAL48              = 0x00000244,
    T_PHREAL48              = 0x00000344,
    T_32PREAL48             = 0x00000444,
    T_32PFREAL48            = 0x00000544,
    T_64PREAL48             = 0x00000644,

    T_REAL64                = 0x00000041,
    T_PREAL64               = 0x00000141,
    T_PFREAL64              = 0x00000241,
    T_PHREAL64              = 0x00000341,
    T_32PREAL64             = 0x00000441,
    T_32PFREAL64            = 0x00000541,
    T_64PREAL64             = 0x00000641,

    T_REAL80                = 0x00000042,
    T_PREAL80               = 0x00000142,
    T_PFREAL80              = 0x00000242,
    T_PHREAL80              = 0x00000342,
    T_32PREAL80             = 0x00000442,
    T_32PFREAL80            = 0x00000542,
    T_64PREAL80             = 0x00000642,

    T_REAL128               = 0x00000043,
    T_PREAL128              = 0x00000143,
    T_PFREAL128             = 0x00000243,
    T_PHREAL128             = 0x00000343,
    T_32PREAL128            = 0x00000443,
    T_32PFREAL128           = 0x00000543,
    T_64PREAL128            = 0x00000643,

    T_CPLX32                = 0x00000050,
    T_PCPLX32               = 0x00000150,
    T_PFCPLX32              = 0x00000250,
    T_PHCPLX32              = 0x00000350,
    T_32PCPLX32             = 0x00000450,
    T_32PFCPLX32            = 0x00000550,
    T_64PCPLX32             = 0x00000650,

    T_CPLX64                = 0x00000051,
    T_PCPLX64               = 0x00000151,
    T_PFCPLX64              = 0x00000251,
    T_PHCPLX64              = 0x00000351,
    T_32PCPLX64             = 0x00000451,
    T_32PFCPLX64            = 0x00000551,
    T_64PCPLX64             = 0x00000651,

    T_CPLX80                = 0x00000052,
    T_PCPLX80               = 0x00000152,
    T_PFCPLX80              = 0x00000252,
    T_PHCPLX80              = 0x00000352,
    T_32PCPLX80             = 0x00000452,
    T_32PFCPLX80            = 0x00000552,
    T_64PCPLX80             = 0x00000652,

    T_CPLX128               = 0x00000053,
    T_PCPLX128              = 0x00000153,
    T_PFCPLX128             = 0x00000253,
    T_PHCPLX128             = 0x00000353,
    T_32PCPLX128            = 0x00000453,
    T_32PFCPLX128           = 0x00000553,
    T_64PCPLX128            = 0x00000653,

    T_BOOL08                = 0x00000030,
    T_PBOOL08               = 0x00000130,
    T_PFBOOL08              = 0x00000230,
    T_PHBOOL08              = 0x00000330,
    T_32PBOOL08             = 0x00000430,
    T_32PFBOOL08            = 0x00000530,
    T_64PBOOL08             = 0x00000630,

    T_BOOL16                = 0x00000031,
    T_PBOOL16               = 0x00000131,
    T_PFBOOL16              = 0x00000231,
    T_PHBOOL16              = 0x00000331,
    T_32PBOOL16             = 0x00000431,
    T_32PFBOOL16            = 0x00000531,
    T_64PBOOL16             = 0x00000631,

    T_BOOL32                = 0x00000032,
    T_PBOOL32               = 0x00000132,
    T_PFBOOL32              = 0x00000232,
    T_PHBOOL32              = 0x00000332,
    T_32PBOOL32             = 0x00000432,
    T_32PFBOOL32            = 0x00000532,
    T_64PBOOL32             = 0x00000632,

    T_BOOL64                = 0x00000033,
    T_PBOOL64               = 0x00000133,
    T_PFBOOL64              = 0x00000233,
    T_PHBOOL64              = 0x00000333,
    T_32PBOOL64             = 0x00000433,
    T_32PFBOOL64            = 0x00000533,
    T_64PBOOL64             = 0x00000633,

    T_NCVPTR                = 0x000001F0,
    T_FCVPTR                = 0x000002F0,
    T_HCVPTR                = 0x000003F0,
    T_32NCVPTR              = 0x000004F0,
    T_32FCVPTR              = 0x000005F0,
    T_64NCVPTR              = 0x000006F0,
    }
    TYPE_ENUM_e, *PTYPE_ENUM_e, **PPTYPE_ENUM_e;

// =================================================================
// TYPE INFO RECORD TAGS
// =================================================================

typedef enum _LEAF_ENUM_e
    {
    LF_MODIFIER_16t         = 0x00000001,
    LF_POINTER_16t          = 0x00000002,
    LF_ARRAY_16t            = 0x00000003,
    LF_CLASS_16t            = 0x00000004,
    LF_STRUCTURE_16t        = 0x00000005,
    LF_UNION_16t            = 0x00000006,
    LF_ENUM_16t             = 0x00000007,
    LF_PROCEDURE_16t        = 0x00000008,
    LF_MFUNCTION_16t        = 0x00000009,
    LF_VTSHAPE              = 0x0000000A,
    LF_COBOL0_16t           = 0x0000000B,
    LF_COBOL1               = 0x0000000C,
    LF_BARRAY_16t           = 0x0000000D,
    LF_LABEL                = 0x0000000E,
    LF_NULL                 = 0x0000000F,
    LF_NOTTRAN              = 0x00000010,
    LF_DIMARRAY_16t         = 0x00000011,
    LF_VFTPATH_16t          = 0x00000012,
    LF_PRECOMP_16t          = 0x00000013,
    LF_ENDPRECOMP           = 0x00000014,
    LF_OEM_16t              = 0x00000015,
    LF_TYPESERVER_ST        = 0x00000016,

    LF_SKIP_16t             = 0x00000200,
    LF_ARGLIST_16t          = 0x00000201,
    LF_DEFARG_16t           = 0x00000202,
    LF_LIST                 = 0x00000203,
    LF_FIELDLIST_16t        = 0x00000204,
    LF_DERIVED_16t          = 0x00000205,
    LF_BITFIELD_16t         = 0x00000206,
    LF_METHODLIST_16t       = 0x00000207,
    LF_DIMCONU_16t          = 0x00000208,
    LF_DIMCONLU_16t         = 0x00000209,
    LF_DIMVARU_16t          = 0x0000020A,
    LF_DIMVARLU_16t         = 0x0000020B,
    LF_REFSYM               = 0x0000020C,

    LF_BCLASS_16t           = 0x00000400,
    LF_VBCLASS_16t          = 0x00000401,
    LF_IVBCLASS_16t         = 0x00000402,
    LF_ENUMERATE_ST         = 0x00000403,
    LF_FRIENDFCN_16t        = 0x00000404,
    LF_INDEX_16t            = 0x00000405,
    LF_MEMBER_16t           = 0x00000406,
    LF_STMEMBER_16t         = 0x00000407,
    LF_METHOD_16t           = 0x00000408,
    LF_NESTTYPE_16t         = 0x00000409,
    LF_VFUNCTAB_16t         = 0x0000040A,
    LF_FRIENDCLS_16t        = 0x0000040B,
    LF_ONEMETHOD_16t        = 0x0000040C,
    LF_VFUNCOFF_16t         = 0x0000040D,

    LF_TI16_MAX             = 0x00001000,
    LF_MODIFIER             = 0x00001001,
    LF_POINTER              = 0x00001002,
    LF_ARRAY_ST             = 0x00001003,
    LF_CLASS_ST             = 0x00001004,
    LF_STRUCTURE_ST         = 0x00001005,
    LF_UNION_ST             = 0x00001006,
    LF_ENUM_ST              = 0x00001007,
    LF_PROCEDURE            = 0x00001008,
    LF_MFUNCTION            = 0x00001009,
    LF_COBOL0               = 0x0000100A,
    LF_BARRAY               = 0x0000100B,
    LF_DIMARRAY_ST          = 0x0000100C,
    LF_VFTPATH              = 0x0000100D,
    LF_PRECOMP_ST           = 0x0000100E,
    LF_OEM                  = 0x0000100F,
    LF_ALIAS_ST             = 0x00001010,
    LF_OEM2                 = 0x00001011,

    LF_SKIP                 = 0x00001200,
    LF_ARGLIST              = 0x00001201,
    LF_DEFARG_ST            = 0x00001202,
    LF_FIELDLIST            = 0x00001203,
    LF_DERIVED              = 0x00001204,
    LF_BITFIELD             = 0x00001205,
    LF_METHODLIST           = 0x00001206,
    LF_DIMCONU              = 0x00001207,
    LF_DIMCONLU             = 0x00001208,
    LF_DIMVARU              = 0x00001209,
    LF_DIMVARLU             = 0x0000120A,

    LF_BCLASS               = 0x00001400,
    LF_VBCLASS              = 0x00001401,
    LF_IVBCLASS             = 0x00001402,
    LF_FRIENDFCN_ST         = 0x00001403,
    LF_INDEX                = 0x00001404,
    LF_MEMBER_ST            = 0x00001405,
    LF_STMEMBER_ST          = 0x00001406,
    LF_METHOD_ST            = 0x00001407,
    LF_NESTTYPE_ST          = 0x00001408,
    LF_VFUNCTAB             = 0x00001409,
    LF_FRIENDCLS            = 0x0000140A,
    LF_ONEMETHOD_ST         = 0x0000140B,
    LF_VFUNCOFF             = 0x0000140C,
    LF_NESTTYPEEX_ST        = 0x0000140D,
    LF_MEMBERMODIFY_ST      = 0x0000140E,
    LF_MANAGED_ST           = 0x0000140F,

    LF_ST_MAX               = 0x00001500,
    LF_TYPESERVER           = 0x00001501,
    LF_ENUMERATE            = 0x00001502,
    LF_ARRAY                = 0x00001503,
    LF_CLASS                = 0x00001504,
    LF_STRUCTURE            = 0x00001505,
    LF_UNION                = 0x00001506,
    LF_ENUM                 = 0x00001507,
    LF_DIMARRAY             = 0x00001508,
    LF_PRECOMP              = 0x00001509,
    LF_ALIAS                = 0x0000150A,
    LF_DEFARG               = 0x0000150B,
    LF_FRIENDFCN            = 0x0000150C,
    LF_MEMBER               = 0x0000150D,
    LF_STMEMBER             = 0x0000150E,
    LF_METHOD               = 0x0000150F,
    LF_NESTTYPE             = 0x00001510,
    LF_ONEMETHOD            = 0x00001511,
    LF_NESTTYPEEX           = 0x00001512,
    LF_MEMBERMODIFY         = 0x00001513,
    LF_MANAGED              = 0x00001514,
    LF_TYPESERVER2          = 0x00001515,

    LF_NUMERIC              = 0x00008000,
    LF_CHAR                 = 0x00008000,
    LF_SHORT                = 0x00008001,
    LF_USHORT               = 0x00008002,
    LF_LONG                 = 0x00008003,
    LF_ULONG                = 0x00008004,
    LF_REAL32               = 0x00008005,
    LF_REAL64               = 0x00008006,
    LF_REAL80               = 0x00008007,
    LF_REAL128              = 0x00008008,
    LF_QUADWORD             = 0x00008009,
    LF_UQUADWORD            = 0x0000800A,
    LF_REAL48               = 0x0000800B,
    LF_COMPLEX32            = 0x0000800C,
    LF_COMPLEX64            = 0x0000800D,
    LF_COMPLEX80            = 0x0000800E,
    LF_COMPLEX128           = 0x0000800F,
    LF_VARSTRING            = 0x00008010,
    LF_OCTWORD              = 0x00008017,
    LF_UOCTWORD             = 0x00008018,
    LF_DECIMAL              = 0x00008019,
    LF_DATE                 = 0x0000801A,
    LF_UTF8STRING           = 0x0000801B,

    LF_PAD0                 = 0x000000F0,
    LF_PAD1                 = 0x000000F1,
    LF_PAD2                 = 0x000000F2,
    LF_PAD3                 = 0x000000F3,
    LF_PAD4                 = 0x000000F4,
    LF_PAD5                 = 0x000000F5,
    LF_PAD6                 = 0x000000F6,
    LF_PAD7                 = 0x000000F7,
    LF_PAD8                 = 0x000000F8,
    LF_PAD9                 = 0x000000F9,
    LF_PAD10                = 0x000000FA,
    LF_PAD11                = 0x000000FB,
    LF_PAD12                = 0x000000FC,
    LF_PAD13                = 0x000000FD,
    LF_PAD14                = 0x000000FE,
    LF_PAD15                = 0x000000FF,
    }
    LEAF_ENUM_e, *PLEAF_ENUM_e, **PPLEAF_ENUM_e;

// =================================================================
// SYMBOL RECORD TAGS
// =================================================================

typedef enum _SYM_ENUM_e
    {
    S_COMPILE               = 0x00000001,
    S_REGISTER_16t          = 0x00000002,
    S_CONSTANT_16t          = 0x00000003,
    S_UDT_16t               = 0x00000004,
    S_SSEARCH               = 0x00000005,
    S_END                   = 0x00000006,
    S_SKIP                  = 0x00000007,
    S_CVRESERVE             = 0x00000008,
    S_OBJNAME_ST            = 0x00000009,
    S_ENDARG                = 0x0000000A,
    S_COBOLUDT_16t          = 0x0000000B,
    S_MANYREG_16t           = 0x0000000C,
    S_RETURN                = 0x0000000D,
    S_ENTRYTHIS             = 0x0000000E,

    S_BPREL16               = 0x00000100,
    S_LDATA16               = 0x00000101,
    S_GDATA16               = 0x00000102,
    S_PUB16                 = 0x00000103,
    S_LPROC16               = 0x00000104,
    S_GPROC16               = 0x00000105,
    S_THUNK16               = 0x00000106,
    S_BLOCK16               = 0x00000107,
    S_WITH16                = 0x00000108,
    S_LABEL16               = 0x00000109,
    S_CEXMODEL16            = 0x0000010A,
    S_VFTABLE16             = 0x0000010B,
    S_REGREL16              = 0x0000010C,

    S_BPREL32_16t           = 0x00000200,
    S_LDATA32_16t           = 0x00000201,
    S_GDATA32_16t           = 0x00000202,
    S_PUB32_16t             = 0x00000203,
    S_LPROC32_16t           = 0x00000204,
    S_GPROC32_16t           = 0x00000205,
    S_THUNK32_ST            = 0x00000206,
    S_BLOCK32_ST            = 0x00000207,
    S_WITH32_ST             = 0x00000208,
    S_LABEL32_ST            = 0x00000209,
    S_CEXMODEL32            = 0x0000020A,
    S_VFTABLE32_16t         = 0x0000020B,
    S_REGREL32_16t          = 0x0000020C,
    S_LTHREAD32_16t         = 0x0000020D,
    S_GTHREAD32_16t         = 0x0000020E,
    S_SLINK32               = 0x0000020F,

    S_LPROCMIPS_16t         = 0x00000300,
    S_GPROCMIPS_16t         = 0x00000301,

    S_PROCREF_ST            = 0x00000400,
    S_DATAREF_ST            = 0x00000401,
    S_ALIGN                 = 0x00000402,
    S_LPROCREF_ST           = 0x00000403,
    S_OEM                   = 0x00000404,

    S_TI16_MAX              = 0x00001000,
    S_REGISTER_ST           = 0x00001001,
    S_CONSTANT_ST           = 0x00001002,
    S_UDT_ST                = 0x00001003,
    S_COBOLUDT_ST           = 0x00001004,
    S_MANYREG_ST            = 0x00001005,
    S_BPREL32_ST            = 0x00001006,
    S_LDATA32_ST            = 0x00001007,
    S_GDATA32_ST            = 0x00001008,
    S_PUB32_ST              = 0x00001009,
    S_LPROC32_ST            = 0x0000100A,
    S_GPROC32_ST            = 0x0000100B,
    S_VFTABLE32             = 0x0000100C,
    S_REGREL32_ST           = 0x0000100D,
    S_LTHREAD32_ST          = 0x0000100E,
    S_GTHREAD32_ST          = 0x0000100F,
    S_LPROCMIPS_ST          = 0x00001010,
    S_GPROCMIPS_ST          = 0x00001011,
    S_FRAMEPROC             = 0x00001012,
    S_COMPILE2_ST           = 0x00001013,
    S_MANYREG2_ST           = 0x00001014,
    S_LPROCIA64_ST          = 0x00001015,
    S_GPROCIA64_ST          = 0x00001016,
    S_LOCALSLOT_ST          = 0x00001017,
    S_PARAMSLOT_ST          = 0x00001018,
    S_ANNOTATION            = 0x00001019,
    S_GMANPROC_ST           = 0x0000101A,
    S_LMANPROC_ST           = 0x0000101B,
    S_RESERVED1             = 0x0000101C,
    S_RESERVED2             = 0x0000101D,
    S_RESERVED3             = 0x0000101E,
    S_RESERVED4             = 0x0000101F,
    S_LMANDATA_ST           = 0x00001020,
    S_GMANDATA_ST           = 0x00001021,
    S_MANFRAMEREL_ST        = 0x00001022,
    S_MANREGISTER_ST        = 0x00001023,
    S_MANSLOT_ST            = 0x00001024,
    S_MANMANYREG_ST         = 0x00001025,
    S_MANREGREL_ST          = 0x00001026,
    S_MANMANYREG2_ST        = 0x00001027,
    S_MANTYPREF             = 0x00001028,
    S_UNAMESPACE_ST         = 0x00001029,

    S_ST_MAX                = 0x00001100,
    S_OBJNAME               = 0x00001101,
    S_THUNK32               = 0x00001102,
    S_BLOCK32               = 0x00001103,
    S_WITH32                = 0x00001104,
    S_LABEL32               = 0x00001105,
    S_REGISTER              = 0x00001106,
    S_CONSTANT              = 0x00001107,
    S_UDT                   = 0x00001108,
    S_COBOLUDT              = 0x00001109,
    S_MANYREG               = 0x0000110A,
    S_BPREL32               = 0x0000110B,
    S_LDATA32               = 0x0000110C,
    S_GDATA32               = 0x0000110D,
    S_PUB32                 = 0x0000110E,
    S_LPROC32               = 0x0000110F,
    S_GPROC32               = 0x00001110,
    S_REGREL32              = 0x00001111,
    S_LTHREAD32             = 0x00001112,
    S_GTHREAD32             = 0x00001113,
    S_LPROCMIPS             = 0x00001114,
    S_GPROCMIPS             = 0x00001115,
    S_COMPILE2              = 0x00001116,
    S_MANYREG2              = 0x00001117,
    S_LPROCIA64             = 0x00001118,
    S_GPROCIA64             = 0x00001119,
    S_LOCALSLOT             = 0x0000111A,
    S_SLOT                  = 0x0000111A,
    S_PARAMSLOT             = 0x0000111B,
    S_LMANDATA              = 0x0000111C,
    S_GMANDATA              = 0x0000111D,
    S_MANFRAMEREL           = 0x0000111E,
    S_MANREGISTER           = 0x0000111F,
    S_MANSLOT               = 0x00001120,
    S_MANMANYREG            = 0x00001121,
    S_MANREGREL             = 0x00001122,
    S_MANMANYREG2           = 0x00001123,
    S_UNAMESPACE            = 0x00001124,
    S_PROCREF               = 0x00001125,
    S_DATAREF               = 0x00001126,
    S_LPROCREF              = 0x00001127,
    S_ANNOTATIONREF         = 0x00001128,
    S_TOKENREF              = 0x00001129,
    S_GMANPROC              = 0x0000112A,
    S_LMANPROC              = 0x0000112B,
    S_TRAMPOLINE            = 0x0000112C,
    S_MANCONSTANT           = 0x0000112D,
    S_RECTYPE_LAST          = 0x0000112D,
    S_RECTYPE_MAX           = 0x0000112E,
    }
    SYM_ENUM_e, *PSYM_ENUM_e, **PPSYM_ENUM_e;

// =================================================================
// CALLING CONVENTIONS
// =================================================================

typedef enum _CV_call_e
    {
    CV_CALL_NEAR_C          = 0x00000000,
    CV_CALL_FAR_C           = 0x00000001,
    CV_CALL_NEAR_PASCAL     = 0x00000002,
    CV_CALL_FAR_PASCAL      = 0x00000003,
    CV_CALL_NEAR_FAST       = 0x00000004,
    CV_CALL_FAR_FAST        = 0x00000005,
    CV_CALL_SKIPPED         = 0x00000006,
    CV_CALL_NEAR_STD        = 0x00000007,
    CV_CALL_FAR_STD         = 0x00000008,
    CV_CALL_NEAR_SYS        = 0x00000009,
    CV_CALL_FAR_SYS         = 0x0000000A,
    CV_CALL_THISCALL        = 0x0000000B,
    CV_CALL_MIPSCALL        = 0x0000000C,
    CV_CALL_GENERIC         = 0x0000000D,
    CV_CALL_ALPHACALL       = 0x0000000E,
    CV_CALL_PPCCALL         = 0x0000000F,
    CV_CALL_SHCALL          = 0x00000010,
    CV_CALL_ARMCALL         = 0x00000011,
    CV_CALL_AM33CALL        = 0x00000012,
    CV_CALL_TRICALL         = 0x00000013,
    CV_CALL_SH5CALL         = 0x00000014,
    CV_CALL_M32RCALL        = 0x00000015,
    CV_CALL_RESERVED        = 0x00000016,
    }
    CV_call_e, *PCV_call_e, **PPCV_call_e;

// =================================================================
// POINTER TYPES
// =================================================================

typedef enum _CV_ptrtype_e
    {
    CV_PTR_NEAR             = 0x00000000,
    CV_PTR_FAR              = 0x00000001,
    CV_PTR_HUGE             = 0x00000002,
    CV_PTR_BASE_SEG         = 0x00000003,
    CV_PTR_BASE_VAL         = 0x00000004,
    CV_PTR_BASE_SEGVAL      = 0x00000005,
    CV_PTR_BASE_ADDR        = 0x00000006,
    CV_PTR_BASE_SEGADDR     = 0x00000007,
    CV_PTR_BASE_TYPE        = 0x00000008,
    CV_PTR_BASE_SELF        = 0x00000009,
    CV_PTR_NEAR32           = 0x0000000A,
    CV_PTR_FAR32            = 0x0000000B,
    CV_PTR_64               = 0x0000000C,
    CV_PTR_UNUSEDPTR        = 0x0000000D,
    }
    CV_ptrtype_e, *PCV_ptrtype_e, **PPCV_ptrtype_e;

// =================================================================
// POINTER MODES
// =================================================================

typedef enum _CV_ptrmode_e
    {
    CV_PTR_MODE_PTR         = 0x00000000,
    CV_PTR_MODE_REF         = 0x00000001,
    CV_PTR_MODE_PMEM        = 0x00000002,
    CV_PTR_MODE_PMFUNC      = 0x00000003,
    CV_PTR_MODE_RESERVED    = 0x00000004,
    }
    CV_ptrmode_e, *PCV_ptrmode_e, **PPCV_ptrmode_e;

// =================================================================
// ACCESS PROTECTION MODES
// =================================================================

typedef enum _CV_access_e
    {
    CV_private              = 0x00000001,
    CV_protected            = 0x00000002,
    CV_public               = 0x00000003,
    }
    CV_access_e, *PCV_access_e, **PPCV_access_e;

// =================================================================
// METHOD PROPERTIES
// =================================================================

typedef enum _CV_methodprop_e
    {
    CV_MTvanilla            = 0x00000000,
    CV_MTvirtual            = 0x00000001,
    CV_MTstatic             = 0x00000002,
    CV_MTfriend             = 0x00000003,
    CV_MTintro              = 0x00000004,
    CV_MTpurevirt           = 0x00000005,
    CV_MTpureintro          = 0x00000006,
    }
    CV_methodprop_e, *PCV_methodprop_e, **PPCV_methodprop_e;

// =================================================================
// CODEVIEW STRUCTURES
// =================================================================

#pragma pack (1)

// -----------------------------------------------------------------

typedef struct _NB10I
        {
/*000*/ DWORD dwSig;
/*004*/ DWORD dwOffset;
/*008*/ DWORD sig;
/*00C*/ DWORD age;
/*010*/ BYTE  szPdb [MAX_PATH]; // PDB file name
/*114*/ }
        NB10I, *PNB10I, **PPNB10I;

#define NB10I_ sizeof (NB10I)

// -----------------------------------------------------------------

typedef struct _RSDSI
        {
/*000*/ DWORD dwSig;
/*004*/ GUID  guidSig;
/*014*/ DWORD age;
/*018*/ BYTE  szPdb [3*MAX_PATH];
/*324*/ }
        RSDSI, *PRSDSI, **PPRSDSI;

#define RSDSI_ sizeof (RSDSI)

// -----------------------------------------------------------------

typedef union _CV
        {
/*000*/ DWORD dwSig;
/*000*/ NB10I nb10i;
/*000*/ RSDSI rsdsi;
/*324*/ }
        CV, *PCV, **PPCV;

#define CV_ sizeof (CV)

// -----------------------------------------------------------------

#pragma pack ()

// =================================================================
// MSF STRUCTURES
// =================================================================

#pragma pack (1)

// -----------------------------------------------------------------

typedef struct _SI_PERSIST
        {
/*000*/ LONG cb;      // number of bytes
/*004*/ LONG mpspnpn;
/*008*/ }
        SI_PERSIST, *PSI_PERSIST, **PPSI_PERSIST;

#define SI_PERSIST_ sizeof (SI_PERSIST)

// -----------------------------------------------------------------

typedef struct _PG
         {
/*0000*/ BYTE rgb [0x1000]; // page data
/*1000*/ }
         PG, *PPG, **PPPG;

#define PG_ sizeof (PG)

// -----------------------------------------------------------------

typedef union _XMSF_HDR
         {
         struct
             {
/*0000*/     BYTE       szMagic [0x2C];
/*002C*/     LONG       cbPg;
/*0030*/     WORD       pnFpm;
/*0032*/     WORD       pnMac;
/*0034*/     SI_PERSIST siSt;
/*003C*/     WORD       mpspnpn [0x141];
/*02BE*/     };
/*0000*/ PG pg;
/*1000*/ }
         XMSF_HDR, *PXMSF_HDR, **PPXMSF_HDR;

#define XMSF_HDR_ sizeof (XMSF_HDR)

// -----------------------------------------------------------------

typedef union _BIGMSF_HDR
         {
         struct
             {
/*0000*/     BYTE       szMagic [0x1E];
/*001E*/     WORD       reserved;
/*0020*/     LONG       cbPg;
/*0024*/     DWORD      pnFpm;
/*0028*/     DWORD      pnMac;
/*002C*/     SI_PERSIST siSt;
/*0034*/     DWORD      mpspnpnSt [0x49];
/*0158*/     };
/*0000*/ PG pg;
/*1000*/ }
         BIGMSF_HDR, *PBIGMSF_HDR, **PPBIGMSF_HDR;

#define BIGMSF_HDR_ sizeof (BIGMSF_HDR)

// -----------------------------------------------------------------

typedef struct _FPM
        {
/*000*/ DWORD   iwMac;
/*004*/ DWORD   iwRover;
/*008*/ LONG    cbPg;
/*00C*/ BOOLEAN fBigMsf;
/*00D*/ BYTE    reserved1; // padding
/*00E*/ WORD    reserved2; // padding
/*010*/ struct
/*010*/     {
/*010*/     DWORD rgt;
/*014*/     DWORD itMac;
/*018*/     DWORD itMax;
/*01C*/     } rgw;
/*01C*/ DWORD   wFill;
/*020*/ }
        FPM, *PFPM, **PPFPM;

#define FPM_ sizeof (FPM)

// -----------------------------------------------------------------

#pragma pack ()

// =================================================================
// PDB STRUCTURES (STREAM #1)
// =================================================================

#pragma pack (1)

// -----------------------------------------------------------------

#define GUID_SIG70 \
        {0x33DED1D8, 0x5D57, 0x40D0, \
         {0xA5, 0xE2, 0xF1, 0x71, 0x96, 0x98, 0x07, 0x21}}

// -----------------------------------------------------------------

typedef struct _PDBStream
        {
/*000*/ DWORD impv;
/*004*/ DWORD sig;
/*008*/ DWORD age;
/*00C*/ }
        PDBStream, *PPDBStream, **PPPDBStream;

#define PDBStream_ sizeof (PDBStream)

// -----------------------------------------------------------------

typedef struct _PDBStream70
        {
/*000*/ PDBStream pdbstream;
/*00C*/ GUID      sig70;
/*01C*/ }
        PDBStream70, *PPDBStream70, **PPPDBStream70;

#define PDBStream70_ sizeof (PDBStream70)

// -----------------------------------------------------------------

#pragma pack ()

// =================================================================
// TPI STRUCTURES (STREAM #2)
// =================================================================

#pragma pack (1)

// -----------------------------------------------------------------

typedef struct _OffCb
        {
/*000*/ LONG off;
/*004*/ LONG cb;
/*008*/ }
        OffCb, *POffCb, **PPOffCb;

#define OffCb_ sizeof (OffCb)

// -----------------------------------------------------------------

typedef struct _TpiHash
        {
/*000*/ WORD  sn;            // stream #
/*002*/ WORD  snPad;         // padding
/*004*/ LONG  cbHashKey;
/*008*/ LONG  cHashBuckets;
/*00C*/ OffCb offcbHashVals;
/*014*/ OffCb offcbTiOff;
/*01C*/ OffCb offcbHashAdj;
/*024*/ }
        TpiHash, *PTpiHash, **PPTpiHash;

#define TpiHash_ sizeof (TpiHash)

// -----------------------------------------------------------------

typedef struct _HDR          // TPI stream header
        {
/*000*/ DWORD   vers;        // implementation version
/*004*/ LONG    cbHdr;       // header size
/*008*/ DWORD   tiMin;       // type index base  (0x1000..0xFFFFFF)
/*00C*/ DWORD   tiMac;       // type index limit (0x1000..0xFFFFFF)
/*010*/ DWORD   cbGprec;     // size of follow-up data
/*014*/ TpiHash tpihash;
/*038*/ }
        HDR, *PHDR, **PPHDR;

#define HDR_ sizeof (HDR)

// -----------------------------------------------------------------

typedef struct _OHDR
        {
/*000*/ BYTE  szMagic [0x2C]; // magic string
/*02C*/ DWORD vers;           // implementation version
/*030*/ DWORD sig;            // signature
/*034*/ DWORD age;            // file age
/*038*/ WORD  tiMin;          // type index base
/*03A*/ WORD  tiMac;          // type index limit
/*03C*/ LONG  cb;             // size
/*040*/ }
        OHDR, *POHDR, **PPOHDR;

#define OHDR_ sizeof (OHDR)

// -----------------------------------------------------------------

typedef struct _CV_prop_t
        {
/*000.0*/ WORD packed   : 1;
/*000.1*/ WORD ctor     : 1;
/*000.2*/ WORD ovlops   : 1;
/*000.3*/ WORD isnested : 1;
/*000.4*/ WORD cnested  : 1;
/*000.5*/ WORD opassign : 1;
/*000.6*/ WORD opcast   : 1;
/*000.7*/ WORD fwdref   : 1;
/*001.0*/ WORD scoped   : 1;
/*001.1*/ WORD reserved : 7;
/*002*/ }
        CV_prop_t, *PCV_prop_t, **PPCV_prop_t;

#define CV_prop_t_ sizeof (CV_prop_t)

// -----------------------------------------------------------------

typedef struct _CV_fldattr_t
        {
/*000.0*/ WORD access      : 2; // CV_access_e
/*000.2*/ WORD mprop       : 3; // CV_methodprop_e
/*000.5*/ WORD pseudo      : 1;
/*000.6*/ WORD noinherit   : 1;
/*000.7*/ WORD noconstruct : 1;
/*001.0*/ WORD compgenx    : 1;
/*001.1*/ WORD unused      : 7;
/*002*/ }
        CV_fldattr_t, *PCV_fldattr_t, **PPCV_fldattr_t;

#define CV_fldattr_t_ sizeof (CV_fldattr_t)

// -----------------------------------------------------------------

typedef struct _lfArray         // array
        {
/*000*/ WORD  leaf;             // LF_ARRAY
/*002*/ DWORD elemtype;         // element type index
/*006*/ DWORD idxtype;          // indexing type index
/*00A*/ BYTE  data [];          // size in bytes
/*00A*/ }
        lfArray, *PlfArray, **PPlfArray;

#define lfArray_ sizeof (lfArray)

// -----------------------------------------------------------------

typedef struct _lfBitfield      // bitfield structure
        {
/*000*/ WORD  leaf;             // LF_BITFIELD
/*002*/ DWORD type;             // base type index
/*006*/ BYTE  length;           // number of bits
/*007*/ BYTE  position;         // bit offset of bit 0
/*008*/ }
        lfBitfield, *PlfBitfield, **PPlfBitfield;

#define lfBitfield_ sizeof (lfBitfield)

// -----------------------------------------------------------------

typedef struct _lfClass         // class or structure
        {
/*000*/ WORD      leaf;         // LF_CLASS, LF_STRUCTURE
/*002*/ WORD      count;        // number of members
/*004*/ CV_prop_t property;     // type properties
/*006*/ DWORD     field;        // LF_FIELD descriptor index
/*00A*/ DWORD     derived;
/*00E*/ DWORD     vshape;
/*012*/ BYTE      data [];      // size and name
/*012*/ }
        lfClass, *PlfClass, **PPlfClass;

#define lfClass_ sizeof (lfClass)

// -----------------------------------------------------------------

typedef lfClass lfStructure, *PlfStructure, **PPlfStructure;
#define lfStructure_ sizeof (lfStructure)

// -----------------------------------------------------------------

typedef struct _lfUnion         // union
        {
/*000*/ WORD      leaf;         // LF_UNION
/*002*/ WORD      count;        // number of members
/*004*/ CV_prop_t property;     // type properties
/*006*/ DWORD     field;        // LF_FIELD descriptor index
/*00A*/ BYTE      data [];      // size and name
/*00A*/ }
        lfUnion, *PlfUnion, **PPlfUnion;

#define lfUnion_ sizeof (lfUnion)

// -----------------------------------------------------------------

typedef struct _lfEnum          // enumeration
        {
/*000*/ WORD      leaf;         // LF_ENUM
/*002*/ WORD      count;        // number of members
/*004*/ CV_prop_t property;     // type properties
/*006*/ DWORD     utype;        // underlying type
/*00A*/ DWORD     field;        // LF_FIELD descriptor index
/*00E*/ BYTE      Name [];      // name
/*00E*/ }
        lfEnum, *PlfEnum, **PPlfEnum;

#define lfEnum_ sizeof (lfEnum)

// -----------------------------------------------------------------

typedef struct _lfPointer       // pointer to type
        {
/*000*/ struct lfPointerBody
/*000*/     {
/*000*/     WORD  leaf;         // LF_POINTER
/*002*/     DWORD utype;        // underlying type
/*006*/     struct lfPointerAttr
/*006*/         {
/*006.0*/       DWORD ptrtype     :  5; // pointer type
/*006.5*/       DWORD ptrmode     :  3; // pointer mode
/*007.0*/       DWORD isflat32    :  1; // 0:32 pointer
/*007.1*/       DWORD isvolatile  :  1; // volatile pointer
/*007.2*/       DWORD isconst     :  1; // constant pointer
/*007.3*/       DWORD isunaligned :  1; // unaligned pointer
/*007.4*/       DWORD isrestrict  :  1; // restricted pointer
/*007.5*/       DWORD unused      : 19; // currently unused
/*00A*/         } attr;
/*00A*/     } body;
/*00A*/ union
/*00A*/     {
/*00A*/     struct
/*00A*/         {
/*00A*/         DWORD pmclass;
/*00E*/         WORD  pmenum;
/*010*/         } pm;
/*00A*/     WORD bseg;
/*00A*/     BYTE Sym [];
/*00A*/     struct
/*00A*/         {
/*00A*/         DWORD index;
/*00E*/         BYTE  name [];
/*00E*/         } btype;
/*010*/     } pbase;
/*010*/ }
        lfPointer, *PlfPointer, **PPlfPointer;

#define lfPointer_ sizeof (lfPointer)

// -----------------------------------------------------------------

typedef struct _lfProc          // procedure
        {
/*000*/ WORD  leaf;             // LF_PROCEDURE
/*002*/ DWORD rvtype;           // return value type
/*006*/ BYTE  calltype;         // calling convention (CV_call_e)
/*007*/ BYTE  reserved;         // currently not used
/*008*/ WORD  parmcount;        // number of parameters
/*00A*/ DWORD arglist;          // argument list type
/*00E*/ }
        lfProc, *PlfProc, **PPlfProc;

#define lfProc_ sizeof (lfProc)

// -----------------------------------------------------------------

typedef struct _lfMFunc         // member function
        {
/*000*/ WORD  leaf;             // LF_MFUNCTION
/*002*/ DWORD rvtype;           // return value type
/*006*/ DWORD classtype;        // containing class type
/*00A*/ DWORD thistype;         // this-pointer type
/*00E*/ BYTE  calltype;         // calling convention (CV_call_e)
/*00F*/ BYTE  reserved;         // currently not used
/*010*/ WORD  parmcount;        // number of parameters
/*012*/ DWORD arglist;          // argument list type
/*016*/ LONG  thisadjust;       // this-adjuster
/*01A*/ }
        lfMFunc, *PlfMFunc, **PPlfMFunc;

#define lfMFunc_ sizeof (lfMFunc)

// -----------------------------------------------------------------

typedef struct _lfArgList       // procedure argument list
        {
/*000*/ WORD  leaf;             // LF_ARGLIST
/*002*/ DWORD count;            // number of arguments
/*006*/ DWORD arg [];           // argument types
/*006*/ }
        lfArgList, *PlfArgList, **PPlfArgList;

#define lfArgList_ sizeof (lfArgList)

// -----------------------------------------------------------------

typedef struct _lfVTShape       // virtual function table shape
        {
/*000*/ WORD leaf;              // LF_VTSHAPE
/*002*/ WORD count;             // number of VFT entries
/*004*/ BYTE desc [];           // 4-bit descriptor list
/*004*/ }
        lfVTShape, *PlfVTShape, **PPlfVTShape;

#define lfVTShape_ sizeof (lfVTShape)

// -----------------------------------------------------------------

typedef struct _lfEnumerate     // enumeration member
        {
/*000*/ WORD         leaf;      // LF_ENUMERATE
/*002*/ CV_fldattr_t attr;
/*004*/ BYTE         value [];
/*004*/ }
        lfEnumerate, *PlfEnumerate, **PPlfEnumerate;

#define lfEnumerate_ sizeof (lfEnumerate)

// -----------------------------------------------------------------

typedef struct _lfMember        // non-static data member
        {
/*000*/ WORD         leaf;      // LF_MEMBER
/*002*/ CV_fldattr_t attr;
/*004*/ DWORD        index;
/*008*/ BYTE         offset [];
/*00^8*/ }
        lfMember, *PlfMember, **PPlfMember;

#define lfMember_ sizeof (lfMember)

// -----------------------------------------------------------------

typedef struct _lfBClass        // base class field
        {
/*000*/ WORD         leaf;      // LF_BCLASS
/*002*/ CV_fldattr_t attr;
/*004*/ DWORD        index;
/*008*/ BYTE         offset [];
/*008*/ }
        lfBClass, *PlfBClass, **PPlfBClass;

#define lfBClass_ sizeof (lfBClass)

// -----------------------------------------------------------------

typedef struct _lfVFuncTab      // virtual function table pointer
        {
/*000*/ WORD  leaf;             // LF_VFUNCTAB
/*002*/ WORD  pad0;             // padding
/*004*/ DWORD type;             // VFT pointer type
/*008*/ }
        lfVFuncTab, *PlfVFuncTab, **PPlfVFuncTab;

#define lfVFuncTab_ sizeof (lfVFuncTab)

// -----------------------------------------------------------------

typedef struct _lfOneMethod     // non-overloaded method
        {
/*000*/ WORD         leaf;      // LF_ONEMETHOD
/*002*/ CV_fldattr_t attr;
/*004*/ DWORD        index;
/*008*/ DWORD        vbaseoff []; // VFT base offset, if present
/*008*/ }
        lfOneMethod, *PlfOneMethod, **PPlfOneMethod;

#define lfOneMethod_ sizeof (lfOneMethod)

// -----------------------------------------------------------------

typedef struct _lfMethod        // overloaded method list
        {
/*000*/ WORD  leaf;             // LF_METHOD
/*002*/ WORD  count;            // number of occurrences
/*004*/ DWORD mList;            // LF_METHODLIST descriptor index
/*008*/ BYTE  Name [];
/*008*/ }
        lfMethod, *PlfMethod, **PPlfMethod;

#define lfMethod_ sizeof (lfMethod)

// -----------------------------------------------------------------

typedef struct _lfNestType      // nested type definition
        {
/*000*/ WORD  leaf;             // LF_NESTTYPE
/*002*/ WORD  pad0;
/*004*/ DWORD index;
/*008*/ BYTE  Name [];
/*008*/ }
        lfNestType, *PlfNestType, **PPlfNestType;

#define lfNestType_ sizeof (lfNestType)

// -----------------------------------------------------------------

typedef union _lfSubRecord
        {
/*000*/ WORD        leaf;      // LF_*
/*000*/ lfEnumerate Enumerate; // LF_ENUMERATE
/*000*/ lfMember    Member;    // LF_MEMBER
/*000*/ lfBClass    BClass;    // LF_BCLASS
/*000*/ lfVFuncTab  VFuncTab;  // LF_VFUNCTAB
/*000*/ lfOneMethod OneMethod; // LF_ONEMETHOD
/*000*/ lfMethod    Method;    // LF_METHOD
/*000*/ lfNestType  NestType;  // LF_NESTTYPE
        }
        lfSubRecord, *PlfSubRecord, **PPlfSubRecord;

#define lfSubRecord_ sizeof (lfSubRecord)

// -----------------------------------------------------------------

typedef struct _lfFieldList     // struct/union/enum members
        {
/*000*/ WORD        leaf;       // LF_FIELDLIST
/*002*/ lfSubRecord SubRecord;
/*002*/ }
        lfFieldList, *PlfFieldList, **PPlfFieldList;

#define lfFieldList_ sizeof (lfFieldList)

// -----------------------------------------------------------------

typedef union _lfRecord
        {
/*000*/ WORD        leaf;      // LF_*
/*000*/ lfArray     Array;     // LF_ARRAY
/*000*/ lfBitfield  Bitfield;  // LF_BITFIELD
/*000*/ lfClass     Class;     // LF_CLASS
/*000*/ lfStructure Structure; // LF_STRUCTURE
/*000*/ lfUnion     Union;     // LF_UNION
/*000*/ lfEnum      Enum;      // LF_ENUM
/*000*/ lfPointer   Pointer;   // LF_POINTER
/*000*/ lfProc      Proc;      // LF_PROCEDURE
/*000*/ lfMFunc     MFunc;     // LF_MFUNCTION
/*000*/ lfArgList   ArgList;   // LF_ARGLIST
/*000*/ lfVTShape   VTShape;   // LF_VTSHAPE
/*000*/ lfFieldList FieldList; // LF_FIELDLIST
        }
        lfRecord, *PlfRecord, **PPlfRecord;

#define lfRecord_ sizeof (lfRecord)

// -----------------------------------------------------------------

#pragma pack ()

// =================================================================
// DBI STRUCTURES (STREAM #3)
// =================================================================

#pragma pack (1)

// -----------------------------------------------------------------

#define hdrSignature 0xFFFFFFFF
#define hdrVersion     19990903

// -----------------------------------------------------------------

typedef struct _DBIHdr
        {
/*000*/ WORD snGSSyms;  // stream #
/*002*/ WORD snPSSyms;  // stream #
/*004*/ WORD snSymRecs; // stream #
/*006*/ WORD reserved;  // padding
/*008*/ LONG cbGpModi;
/*00C*/ LONG cbSC;
/*010*/ LONG cbSecMap;
/*014*/ LONG cbFileInfo;
/*018*/ }
        DBIHdr, *PDBIHdr, **PPDBIHdr;

#define DBIHdr_ sizeof (DBIHdr)

// -----------------------------------------------------------------

typedef struct _NewDBIHdr
        {
/*000*/ DWORD verSignature;
/*004*/ DWORD verHdr;
/*008*/ DWORD age;
/*00C*/ WORD  snGSSyms;          // stream #
/*00E*/ WORD  usVerPdbDllMajMin;
/*010*/ WORD  snPSSyms;          // stream #
/*012*/ WORD  usVerPdbDllBuild;
/*014*/ union
/*014*/     {
/*014*/     WORD  snSymRecs;     // stream #
/*014*/     DWORD ulunusedPad2;
/*018*/     };
/*018*/ LONG  cbGpModi;
/*01C*/ LONG  cbSC;
/*020*/ LONG  cbSecMap;
/*024*/ LONG  cbFileInfo;
/*028*/ LONG  cbTSMap;
/*02C*/ DWORD iMFC;
/*030*/ LONG  cbDbgHdr;
/*034*/ LONG  cbECInfo;
/*038*/ WORD  flags;
/*03A*/ WORD  wMachine;
/*03C*/ DWORD rgulReserved [1];
/*040*/ }
        NewDBIHdr, *PNewDBIHdr, **PPNewDBIHdr;

#define NewDBIHdr_ sizeof (NewDBIHdr)

// -----------------------------------------------------------------

typedef struct _ECInfo
        {
/*000*/ DWORD niSrcFile;
/*004*/ DWORD niPdbFile;
/*008*/ }
        ECInfo, *PECInfo, **PPECInfo;

#define ECInfo_ sizeof (ECInfo)

// -----------------------------------------------------------------

typedef struct _SC40
        {
/*000*/ WORD  isect;
/*002*/ WORD  reserved1;
/*004*/ LONG  off;
/*008*/ LONG  cb;
/*00C*/ DWORD dwCharacteristics;
/*010*/ WORD  imod;
/*012*/ WORD  reserved2;
/*014*/ }
        SC40, *PSC40, **PPSC40;

#define SC40_ sizeof (SC40)

// -----------------------------------------------------------------

typedef struct _SC
        {
/*000*/ SC40  sc40;
/*014*/ DWORD dwDataCrc;
/*018*/ DWORD dwRelocCrc;
/*01C*/ }
        SC, *PSC, **PPSC;

#define SC_ sizeof (SC)

// -----------------------------------------------------------------

typedef struct _MODI
        {
/*000*/ PVOID  pmod;             // Mod *
/*004*/ SC     sc;
/*020*/ struct
/*020*/     {
/*020.0*/   WORD fWritten   : 1;
/*020.1*/   WORD fECEnabled : 1;
/*020.2*/   WORD unused     : 6;
/*021.0*/   WORD iTSM       : 8;
/*022*/     };
/*022*/ WORD   sn;               // stream number
/*024*/ LONG   cbSyms;           // number of symbols
/*028*/ LONG   cbLines;          // number of lines
/*02C*/ LONG   cbC13Lines;
/*030*/ WORD   ifileMac;
/*032*/ WORD   reserved;         // currently not used
/*034*/ LONG   mpifileichFile;
/*038*/ ECInfo ecInfo;
/*040*/ BYTE   rgch [];
/*040*/ }
        MODI, *PMODI, **PPMODI;

#define MODI_ sizeof (MODI)

// -----------------------------------------------------------------

#pragma pack ()

// =================================================================
// FPO STRUCTURES
// =================================================================

#pragma pack (1)

// -----------------------------------------------------------------

typedef struct ___FPO_DATA
        {
/*000*/ DWORD ulOffStart;
/*004*/ DWORD cbProcSize;
/*008*/ DWORD cdwLocals;
/*00C*/ WORD  cdwParams;
        struct
            {
/*00E.0*/   WORD cbProlog : 8;
/*00F.0*/   WORD cbRegs   : 3;
/*00F.3*/   WORD fHasSEH  : 1;
/*00F.4*/   WORD fUseBP   : 1;
/*00F.5*/   WORD reserved : 1;
/*00F.6*/   WORD cbFrame  : 2;
            };
/*010*/ }
        __FPO_DATA, *P__FPO_DATA, **PP__FPO_DATA;

#define __FPO_DATA_ sizeof (__FPO_DATA)

// -----------------------------------------------------------------

#pragma pack ()

// =================================================================
// PSGSI STRUCTURES
// =================================================================

#pragma pack (1)

// -----------------------------------------------------------------

typedef struct _PSGSIHDR
        {
/*000*/ LONG  cbSymHash;
/*004*/ LONG  cbAddrMap;
/*008*/ DWORD nThunks;
/*00C*/ LONG  cbSizeOfThunk;
/*010*/ WORD  isectThunkTable;
/*012*/ WORD  reserved;        // padding
/*014*/ LONG  offThunkTable;
/*018*/ DWORD nSects;
/*01C*/ }
        PSGSIHDR, *PPSGSIHDR, **PPPSGSIHDR;

#define PSGSIHDR_ sizeof (PSGSIHDR)

// -----------------------------------------------------------------

typedef struct _GSIHashHdr
        {
/*000*/ DWORD verSignature;
/*004*/ DWORD verHdr;
/*008*/ LONG  cbHr;
/*00C*/ LONG  cbBuckets;
/*010*/ }
        GSIHashHdr, *PGSIHashHdr, **PPGSIHashHdr;

#define GSIHashHdr_ sizeof (GSIHashHdr)

// -----------------------------------------------------------------

#pragma pack ()

// =================================================================
// SYMBOL RECORDS
// =================================================================

#pragma pack (1)

// -----------------------------------------------------------------

typedef enum _CV_PUBSYMFLAGS_e
    {
    cvpsfNone     = 0x00000000,
    cvpsfCode     = 0x00000001,
    cvpsfFunction = 0x00000002,
    cvpsfManaged  = 0x00000004,
    cvpsfMSIL     = 0x00000008,
    }
    CV_PUBSYMFLAGS_e, *PCV_PUBSYMFLAGS_e, **PPCV_PUBSYMFLAGS_e;

// -----------------------------------------------------------------

typedef union _CV_GENERIC_FLAG
        {
/*000.0*/ WORD cstyle  :  1;
/*000.1*/ WORD rsclean :  1;
/*000.2*/ WORD unused  : 14;
/*002*/ }
        CV_GENERIC_FLAG, *PCV_GENERIC_FLAG, **PPCV_GENERIC_FLAG;

#define CV_GENERIC_FLAG_ sizeof (CV_GENERIC_FLAG)

// -----------------------------------------------------------------

typedef union _CV_PUBSYMFLAGS
        {
/*000*/ DWORD grfFlags; // CV_PUBSYMFLAGS_e
/*000*/ struct
/*000*/     {
/*000.0*/   DWORD fCode     :  1;
/*000.1*/   DWORD fFunction :  1;
/*000.2*/   DWORD fManaged  :  1;
/*000.3*/   DWORD fMSIL     :  1;
/*000.4*/   DWORD reserved  : 28;
/*004*/     };
/*004*/ }
        CV_PUBSYMFLAGS, *PCV_PUBSYMFLAGS, **PPCV_PUBSYMFLAGS;

#define CV_PUBSYMFLAGS_ sizeof (CV_PUBSYMFLAGS)

// -----------------------------------------------------------------

typedef union _CV_PROCFLAGS
        {
/*000*/ BYTE bAll;
/*000*/ BYTE grfAll;
/*000*/ struct
/*000*/     {
/*000.0*/   BYTE CV_PFLAG_NOFPO      : 1;
/*000.1*/   BYTE CV_PFLAG_INT        : 1;
/*000.2*/   BYTE CV_PFLAG_FAR        : 1;
/*000.3*/   BYTE CV_PFLAG_NEVER      : 1;
/*000.4*/   BYTE CV_PFLAG_NOTREACHED : 1;
/*000.5*/   BYTE CV_PFLAG_CUST_CALL  : 1;
/*000.6*/   BYTE CV_PFLAG_NOINLINE   : 1;
/*000.7*/   BYTE unused              : 1;
/*001*/     };
/*001*/ }
        CV_PROCFLAGS, *PCV_PROCFLAGS, **PPCV_PROCFLAGS;

#define CV_PROCFLAGS_ sizeof (CV_PROCFLAGS)

// -----------------------------------------------------------------

typedef struct _CV_LVARFLAGS
        {
/*000.0*/ WORD fIsParam   :  1;
/*000.1*/ WORD fAddrTaken :  1;
/*000.2*/ WORD fCompGenx  :  1;
/*000.3*/ WORD unused     : 13;
/*002*/ }
        CV_LVARFLAGS, *PCV_LVARFLAGS, **PPCV_LVARFLAGS;

#define CV_LVARFLAGS_ sizeof (CV_LVARFLAGS)

// -----------------------------------------------------------------

typedef struct _CV_lvar_attr
        {
/*000*/ DWORD        off;
/*004*/ WORD         seg;
/*006*/ CV_LVARFLAGS flags;
/*008*/ }
        CV_lvar_attr, *PCV_lvar_attr, **PPCV_lvar_attr;

#define CV_lvar_attr_ sizeof (CV_lvar_attr)

// -----------------------------------------------------------------

typedef struct _ALIGNSYM
        {
/*000*/ WORD reclen; // record length
/*002*/ WORD rectyp; // record type
/*004*/ }
        ALIGNSYM, *PALIGNSYM, **PPALIGNSYM;

#define ALIGNSYM_ sizeof (ALIGNSYM)

// -----------------------------------------------------------------

typedef struct _ANNOTATIONSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD off;
/*008*/ WORD  seg;
/*00A*/ WORD  csz;
/*00C*/ BYTE  rgsz [1];
/*00D*/ }
        ANNOTATIONSYM, *PANNOTATIONSYM, **PPANNOTATIONSYM;

#define ANNOTATIONSYM_ sizeof (ANNOTATIONSYM)

// -----------------------------------------------------------------

typedef struct _ATTRMANYREGSYM
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        typind;
/*008*/ CV_lvar_attr attr;
/*010*/ BYTE         count;
/*011*/ BYTE         reg [1];
/*012*/ }
        ATTRMANYREGSYM, *PATTRMANYREGSYM, **PPATTRMANYREGSYM;

#define ATTRMANYREGSYM_ sizeof (ATTRMANYREGSYM)

// -----------------------------------------------------------------

typedef struct _ATTRMANYREGSYM2
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        typind;
/*008*/ CV_lvar_attr attr;
/*010*/ WORD         count;
/*012*/ WORD         reg [1];
/*014*/ }
        ATTRMANYREGSYM2, *PATTRMANYREGSYM2, **PPATTRMANYREGSYM2;

#define ATTRMANYREGSYM2_ sizeof (ATTRMANYREGSYM2)

// -----------------------------------------------------------------

typedef struct _ATTRREGREL
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        off;
/*008*/ DWORD        typind;
/*00C*/ WORD         reg;
/*00E*/ CV_lvar_attr attr;
/*016*/ BYTE         name [1];
/*017*/ }
        ATTRREGREL, *PATTRREGREL, **PPATTRREGREL;

#define ATTRREGREL_ sizeof (ATTRREGREL)

// -----------------------------------------------------------------

typedef struct _ATTRREGSYM
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        typind;
/*008*/ CV_lvar_attr attr;
/*010*/ WORD         reg;
/*012*/ BYTE         name [1];
/*013*/ }
        ATTRREGSYM, *PATTRREGSYM, **PPATTRREGSYM;

#define ATTRREGSYM_ sizeof (ATTRREGSYM)

// -----------------------------------------------------------------

typedef struct _ATTRSLOTSYM
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        iSlot;
/*008*/ DWORD        typind;
/*00C*/ CV_lvar_attr attr;
/*014*/ BYTE         name [1];
/*015*/ }
        ATTRSLOTSYM, *PATTRSLOTSYM, **PPATTRSLOTSYM;

#define ATTRSLOTSYM_ sizeof (ATTRSLOTSYM)

// -----------------------------------------------------------------

typedef struct _BLOCKSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ }
        BLOCKSYM, *PBLOCKSYM, **PPBLOCKSYM;

#define BLOCKSYM_ sizeof (BLOCKSYM)

// -----------------------------------------------------------------

typedef struct _BLOCKSYM16
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ WORD  len;
/*00E*/ WORD  off;
/*010*/ WORD  seg;
/*012*/ BYTE  name [1];
/*013*/ }
        BLOCKSYM16, *PBLOCKSYM16, **PPBLOCKSYM16;

#define BLOCKSYM16_ sizeof (BLOCKSYM16)

// -----------------------------------------------------------------

typedef struct _BLOCKSYM32
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD len;
/*010*/ DWORD off;
/*014*/ WORD  seg;
/*016*/ BYTE  name [1];
/*017*/ }
        BLOCKSYM32, *PBLOCKSYM32, **PPBLOCKSYM32;

#define BLOCKSYM32_ sizeof (BLOCKSYM32)

// -----------------------------------------------------------------

typedef struct _BPRELSYM16
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ SHORT off;
/*006*/ WORD  typind;
/*008*/ BYTE  name [1];
/*009*/ }
        BPRELSYM16, *PBPRELSYM16, **PPBPRELSYM16;

#define BPRELSYM16_ sizeof (BPRELSYM16)

// -----------------------------------------------------------------

typedef struct _BPRELSYM32
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ LONG  off;
/*008*/ DWORD typind;
/*00C*/ BYTE  name [1];
/*00D*/ }
        BPRELSYM32, *PBPRELSYM32, **PPBPRELSYM32;

#define BPRELSYM32_ sizeof (BPRELSYM32)

// -----------------------------------------------------------------

typedef struct _BPRELSYM32_16t
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ LONG off;
/*008*/ WORD typind;
/*00A*/ BYTE name [1];
/*00B*/ }
        BPRELSYM32_16t, *PBPRELSYM32_16t, **PPBPRELSYM32_16t;

#define BPRELSYM32_16t_ sizeof (BPRELSYM32_16t)

// -----------------------------------------------------------------

typedef struct _CEXMSYM16
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ WORD off;
/*006*/ WORD seg;
/*008*/ WORD model;
/*00A*/ union
/*00A*/     {
/*00A*/     struct
/*00A*/         {
/*00A*/         WORD pcdtable;
/*00C*/         WORD pcdspi;
/*00E*/         } pcode;
/*00A*/     struct
/*00A*/         {
/*00A*/         WORD  subtype;
/*00C*/         WORD  flag;
/*00E*/         } cobol;
/*00E*/     };
/*00E*/ }
        CEXMSYM16, *PCEXMSYM16, **PPCEXMSYM16;

#define CEXMSYM16_ sizeof (CEXMSYM16)

// -----------------------------------------------------------------

typedef struct _CEXMSYM32
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD off;
/*008*/ WORD  seg;
/*00A*/ WORD  model;
/*00C*/ union
/*00C*/     {
/*00C*/     struct
/*00C*/         {
/*00C*/         DWORD pcdtable;
/*010*/         DWORD pcdspi;
/*014*/         } pcode;
/*00C*/     struct
/*00C*/         {
/*00C*/         WORD  subtype;
/*00E*/         WORD  flag;
/*010*/         } cobol;
/*00C*/     struct
/*00C*/         {
/*00C*/         DWORD calltableOff;
/*010*/         WORD  calltableSeg;
/*012*/         } pcode32Mac;
/*014*/     };
/*014*/ }
        CEXMSYM32, *PCEXMSYM32, **PPCEXMSYM32;

#define CEXMSYM32_ sizeof (CEXMSYM32)

// -----------------------------------------------------------------

typedef struct _CFLAGSYM
        {
/*000*/ WORD reclen;  // record length
/*002*/ WORD rectyp;  // record type
/*004*/ BYTE machine;
        struct
            {
/*005.0*/   BYTE language  : 8;
/*006.0*/   BYTE pcode     : 1;
/*006.1*/   BYTE floatprec : 2;
/*006.3*/   BYTE floatpkg  : 2;
/*006.5*/   BYTE ambdata   : 3;
/*007.0*/   BYTE ambcode   : 3;
/*007.3*/   BYTE mode32    : 1;
/*007.4*/   BYTE pad       : 4;
            } flags;
/*008*/ BYTE ver [];
/*009*/ }
        CFLAGSYM, *PCFLAGSYM, **PPCFLAGSYM;

#define CFLAGSYM_ sizeof (CFLAGSYM)

// -----------------------------------------------------------------

typedef struct _COMPILESYM
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ struct
/*004*/     {
/*004.0*/   DWORD iLanguage       :  8;
/*004.0*/   DWORD fEC             :  1;
/*004.0*/   DWORD fNoDbgInfo      :  1;
/*004.0*/   DWORD fLTCG           :  1;
/*004.0*/   DWORD fNoDataAlign    :  1;
/*004.0*/   DWORD fManagedPresent :  1;
/*004.0*/   DWORD pad             : 19;
            } flags;
/*008*/ WORD machine;
/*00A*/ WORD verFEMajor;
/*00C*/ WORD verFEMinor;
/*00E*/ WORD verFEBuild;
/*010*/ WORD verMajor;
/*012*/ WORD verMinor;
/*014*/ WORD verBuild;
/*016*/ BYTE verSt [1];
/*017*/ }
        COMPILESYM, *PCOMPILESYM, **PPCOMPILESYM;

#define COMPILESYM_ sizeof (COMPILESYM)

// -----------------------------------------------------------------

typedef struct _CONSTSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD typind;
/*008*/ WORD  value;
/*00A*/ BYTE  name [];
/*00A*/ }
        CONSTSYM, *PCONSTSYM, **PPCONSTSYM;

#define CONSTSYM_ sizeof (CONSTSYM)

// -----------------------------------------------------------------

typedef struct _CONSTSYM_16t
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ WORD typind;
/*006*/ WORD value;
/*008*/ BYTE name [];
/*008*/ }
        CONSTSYM_16t, *PCONSTSYM_16t, **PPCONSTSYM_16t;

#define CONSTSYM_16t_ sizeof (CONSTSYM_16t)

// -----------------------------------------------------------------

typedef struct _DATASYM16
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ WORD off;
/*006*/ WORD seg;
/*008*/ WORD typind;
/*00A*/ BYTE name [1];
/*00B*/ }
        DATASYM16, *PDATASYM16, **PPDATASYM16;

#define DATASYM16_ sizeof (DATASYM16)

// -----------------------------------------------------------------

typedef struct _DATASYM32
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD typind;
/*008*/ DWORD off;
/*00C*/ WORD  seg;
/*00E*/ BYTE  name [1];
/*00F*/ }
        DATASYM32, *PDATASYM32, **PPDATASYM32;

#define DATASYM32_ sizeof (DATASYM32)

// -----------------------------------------------------------------

typedef struct _ENTRYTHISSYM
        {
/*000*/ WORD reclen;  // record length
/*002*/ WORD rectyp;  // record type
/*004*/ BYTE thissym;
/*005*/ }
        ENTRYTHISSYM, *PENTRYTHISSYM, **PPENTRYTHISSYM;

#define ENTRYTHISSYM_ sizeof (ENTRYTHISSYM)

// -----------------------------------------------------------------

typedef struct _FRAMEPROCSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD cbFrame;
/*008*/ DWORD cbPad;
/*00C*/ DWORD offPad;
/*010*/ DWORD cbSaveRegs;
/*014*/ DWORD offExHdlr;
/*018*/ WORD  sectExHdlr;
        struct
            {
/*01A.0*/   DWORD fHasAlloca  :  1;
/*01A.1*/   DWORD fHasSetJmp  :  1;
/*01A.2*/   DWORD fHasLongJmp :  1;
/*01A.3*/   DWORD fHasInlAsm  :  1;
/*01A.4*/   DWORD fHasEH      :  1;
/*01A.5*/   DWORD fInlSpec    :  1;
/*01A.6*/   DWORD fHasSEH     :  1;
/*01A.7*/   DWORD pad         : 25;
            };
/*01E*/ }
        FRAMEPROCSYM, *PFRAMEPROCSYM, **PPFRAMEPROCSYM;

#define FRAMEPROCSYM_ sizeof (FRAMEPROCSYM)

// -----------------------------------------------------------------

typedef struct _FRAMERELSYM
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ LONG         off;
/*008*/ DWORD        typind;
/*00C*/ CV_lvar_attr attr;
/*014*/ BYTE         name [1];
/*015*/ }
        FRAMERELSYM, *PFRAMERELSYM, **PPFRAMERELSYM;

#define FRAMERELSYM_ sizeof (FRAMERELSYM)

// -----------------------------------------------------------------

typedef struct _LABELSYM16
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ WORD         off;
/*006*/ WORD         seg;
/*008*/ CV_PROCFLAGS flags;
/*009*/ BYTE         name [1];
/*00A*/ }
        LABELSYM16, *PLABELSYM16, **PPLABELSYM16;

#define LABELSYM16_ sizeof (LABELSYM16)

// -----------------------------------------------------------------

typedef struct _LABELSYM32
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        off;
/*008*/ WORD         seg;
/*00A*/ CV_PROCFLAGS flags;
/*00B*/ BYTE         name [1];
/*00C*/ }
        LABELSYM32, *PLABELSYM32, **PPLABELSYM32;

#define LABELSYM32_ sizeof (LABELSYM32)

// -----------------------------------------------------------------

typedef struct _MANPROCSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD pNext;
/*010*/ DWORD len;
/*014*/ DWORD DbgStart;
/*018*/ DWORD DbgEnd;
/*01C*/ DWORD token;
/*020*/ DWORD off;
/*024*/ WORD  seg;
/*026*/ CV_PROCFLAGS flags;
/*027*/ WORD  retReg;
/*029*/ BYTE  name [1];
/*02A*/ }
        MANPROCSYM, *PMANPROCSYM, **PPMANPROCSYM;

#define MANPROCSYM_ sizeof (MANPROCSYM)

// -----------------------------------------------------------------

typedef struct _MANPROCSYMMIPS
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD pNext;
/*010*/ DWORD len;
/*014*/ DWORD DbgStart;
/*018*/ DWORD DbgEnd;
/*01C*/ DWORD regSave;
/*020*/ DWORD fpSave;
/*024*/ DWORD intOff;
/*028*/ DWORD fpOff;
/*02C*/ DWORD token;
/*030*/ DWORD off;
/*034*/ WORD  seg;
/*036*/ BYTE  retReg;
/*037*/ BYTE  frameReg;
/*038*/ BYTE  name [1];
/*039*/ }
        MANPROCSYMMIPS, *PMANPROCSYMMIPS, **PPMANPROCSYMMIPS;

#define MANPROCSYMMIPS_ sizeof (MANPROCSYMMIPS)

// -----------------------------------------------------------------

typedef struct _MANTYPREF
        {
/*000*/ WORD  reclen; // record length
/*002*/ WORD  rectyp; // record type
/*004*/ DWORD typind;
/*008*/ }
        MANTYPREF, *PMANTYPREF, **PPMANTYPREF;

#define MANTYPREF_ sizeof (MANTYPREF)

// -----------------------------------------------------------------

typedef struct _MANYREGSYM_16t
        {
/*000*/ WORD reclen;  // record length
/*002*/ WORD rectyp;  // record type
/*004*/ WORD typind;
/*006*/ BYTE count;
/*007*/ BYTE reg [1];
/*008*/ }
        MANYREGSYM_16t, *PMANYREGSYM_16t, **PPMANYREGSYM_16t;

#define MANYREGSYM_16t_ sizeof (MANYREGSYM_16t)

// -----------------------------------------------------------------

typedef struct _MANYREGSYM
        {
/*000*/ WORD  reclen;  // record length
/*002*/ WORD  rectyp;  // record type
/*004*/ DWORD typind;
/*008*/ BYTE  count;
/*009*/ BYTE  reg [1];
/*00A*/ }
        MANYREGSYM, *PMANYREGSYM, **PPMANYREGSYM;

#define MANYREGSYM_ sizeof (MANYREGSYM)

// -----------------------------------------------------------------

typedef struct _MANYREGSYM2
        {
/*000*/ WORD  reclen;  // record length
/*002*/ WORD  rectyp;  // record type
/*004*/ DWORD typind;
/*008*/ WORD  count;
/*00A*/ WORD  reg [1];
/*00C*/ }
        MANYREGSYM2, *PMANYREGSYM2, **PPMANYREGSYM2;

#define MANYREGSYM2_ sizeof (MANYREGSYM2)

// -----------------------------------------------------------------

typedef struct _OBJNAMESYM
        {
/*000*/ WORD  reclen;    // record length
/*002*/ WORD  rectyp;    // record type
/*004*/ DWORD signature;
/*008*/ BYTE  name [1];
/*009*/ }
        OBJNAMESYM, *POBJNAMESYM, **PPOBJNAMESYM;

#define OBJNAMESYM_ sizeof (OBJNAMESYM)

// -----------------------------------------------------------------

typedef struct _OEMSYMBOL
        {
/*000*/ WORD  reclen;     // record length
/*002*/ WORD  rectyp;     // record type
/*004*/ BYTE  idOem [16];
/*014*/ DWORD typind;
/*018*/ DWORD rgl [];
/*018*/ }
        OEMSYMBOL, *POEMSYMBOL, **PPOEMSYMBOL;

#define OEMSYMBOL_ sizeof (OEMSYMBOL)

// -----------------------------------------------------------------

typedef struct _PROCSYM16
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        pParent;
/*008*/ DWORD        pEnd;
/*00C*/ DWORD        pNext;
/*010*/ WORD         len;
/*012*/ WORD         DbgStart;
/*014*/ WORD         DbgEnd;
/*016*/ WORD         off;
/*018*/ WORD         seg;
/*01A*/ WORD         typind;
/*01C*/ CV_PROCFLAGS flags;
/*01D*/ BYTE         name [1];
/*01E*/ }
        PROCSYM16, *PPROCSYM16, **PPPROCSYM16;

#define PROCSYM16_ sizeof (PROCSYM16)

// -----------------------------------------------------------------

typedef struct _PROCSYM32
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        pParent;
/*008*/ DWORD        pEnd;
/*00C*/ DWORD        pNext;
/*010*/ DWORD        len;
/*014*/ DWORD        DbgStart;
/*018*/ DWORD        DbgEnd;
/*01C*/ DWORD        typind;
/*020*/ DWORD        off;
/*024*/ WORD         seg;
/*026*/ CV_PROCFLAGS flags;
/*027*/ BYTE         name [1];
/*028*/ }
        PROCSYM32, *PPROCSYM32, **PPPROCSYM32;

#define PROCSYM32_ sizeof (PROCSYM32)

// -----------------------------------------------------------------

typedef struct _PROCSYM32_16t
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        pParent;
/*008*/ DWORD        pEnd;
/*00C*/ DWORD        pNext;
/*010*/ DWORD        len;
/*014*/ DWORD        DbgStart;
/*018*/ DWORD        DbgEnd;
/*01C*/ DWORD        off;
/*020*/ WORD         seg;
/*022*/ WORD         typind;
/*024*/ CV_PROCFLAGS flags;
/*025*/ BYTE         name [1];
/*026*/ }
        PROCSYM32_16t, *PPROCSYM32_16t, **PPPROCSYM32_16t;

#define PROCSYM32_16t_ sizeof (PROCSYM32_16t)

// -----------------------------------------------------------------

typedef struct _PROCSYMIA64
        {
/*000*/ WORD         reclen;   // record length
/*002*/ WORD         rectyp;   // record type
/*004*/ DWORD        pParent;
/*008*/ DWORD        pEnd;
/*00C*/ DWORD        pNext;
/*010*/ DWORD        len;
/*014*/ DWORD        DbgStart;
/*018*/ DWORD        DbgEnd;
/*01C*/ DWORD        typind;
/*020*/ DWORD        off;
/*024*/ WORD         seg;
/*026*/ WORD         retReg;
/*028*/ CV_PROCFLAGS flags;
/*029*/ BYTE         name [1];
/*02A*/ }
        PROCSYMIA64, *PPROCSYMIA64, **PPPROCSYMIA64;

#define PROCSYMIA64_ sizeof (PROCSYMIA64)

// -----------------------------------------------------------------

typedef struct _PROCSYMMIPS
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD pNext;
/*010*/ DWORD len;
/*014*/ DWORD DbgStart;
/*018*/ DWORD DbgEnd;
/*01C*/ DWORD regSave;
/*020*/ DWORD fpSave;
/*024*/ DWORD intOff;
/*028*/ DWORD fpOff;
/*02C*/ DWORD typinf;
/*030*/ DWORD off;
/*034*/ WORD  seg;
/*036*/ BYTE  retReg;
/*037*/ BYTE  frameReg;
/*038*/ BYTE  name [1];
/*039*/ }
        PROCSYMMIPS, *PPROCSYMMIPS, **PPPROCSYMMIPS;

#define PROCSYMMIPS_ sizeof (PROCSYMMIPS)

// -----------------------------------------------------------------

typedef struct _PROCSYMMIPS_16t
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD pNext;
/*010*/ DWORD len;
/*014*/ DWORD DbgStart;
/*018*/ DWORD DbgEnd;
/*01C*/ DWORD regSave;
/*020*/ DWORD fpSave;
/*024*/ DWORD intOff;
/*028*/ DWORD fpOff;
/*02C*/ DWORD off;
/*030*/ WORD  seg;
/*032*/ WORD  typind;
/*034*/ BYTE  retReg;
/*035*/ BYTE  frameReg;
/*036*/ BYTE  name [1];
/*037*/ }
        PROCSYMMIPS_16t, *PPROCSYMMIPS_16t, **PPPROCSYMMIPS_16t;

#define PROCSYMMIPS_16t_ sizeof (PROCSYMMIPS_16t)

// -----------------------------------------------------------------

typedef struct _PUBSYM32
        {
/*000*/ WORD           reclen;      // record length
/*002*/ WORD           rectyp;      // record type
/*004*/ CV_PUBSYMFLAGS pubsymflags;
/*008*/ DWORD          off;
/*00C*/ WORD           seg;
/*00E*/ BYTE           name [1];
/*00F*/ }
        PUBSYM32, *PPUBSYM32, **PPPUBSYM32;

#define PUBSYM32_ sizeof (PUBSYM32)

// -----------------------------------------------------------------

typedef struct _REFSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD sumName;
/*008*/ DWORD ibSym;
/*00C*/ WORD  imod;
/*00E*/ WORD  usFill;
/*010*/ }
        REFSYM, *PREFSYM, **PPREFSYM;

#define REFSYM_ sizeof (REFSYM)

// -----------------------------------------------------------------

typedef struct _REFSYM2
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD sumName;
/*008*/ DWORD ibSym;
/*00C*/ WORD  imod;
/*00E*/ BYTE  name [1];
/*00F*/ }
        REFSYM2, *PREFSYM2, **PPREFSYM2;

#define REFSYM2_ sizeof (REFSYM2)

// -----------------------------------------------------------------

typedef struct _REGREL16
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ WORD off;
/*006*/ WORD reg;
/*008*/ WORD typind;
/*00A*/ BYTE name [1];
/*00B*/ }
        REGREL16, *PREGREL16, **PPREGREL16;

#define REGREL16_ sizeof (REGREL16)

// -----------------------------------------------------------------

typedef struct _REGREL32_16t
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD off;
/*008*/ WORD  reg;
/*00A*/ WORD  typind;
/*00C*/ BYTE  name [1];
/*00D*/ }
        REGREL32_16t, *PREGREL32_16t, **PPREGREL32_16t;

#define REGREL32_16t_ sizeof (REGREL32_16t)

// -----------------------------------------------------------------

typedef struct _REGREL32
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD off;
/*008*/ DWORD typind;
/*00C*/ WORD  reg;
/*00E*/ BYTE  name [1];
/*00F*/ }
        REGREL32, *PREGREL32, **PPREGREL32;

#define REGREL32_ sizeof (REGREL32)

// -----------------------------------------------------------------

typedef struct _REGSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD typind;
/*008*/ WORD  reg;
/*00A*/ BYTE  name [1];
/*00B*/ }
        REGSYM, *PREGSYM, **PPREGSYM;

#define REGSYM_ sizeof (REGSYM)

// -----------------------------------------------------------------

typedef struct _REGSYM_16t
        {
/*000*/ WORD reclen; // record length
/*002*/ WORD rectyp; // record type
/*004*/ WORD typind;
/*006*/ WORD reg;
/*008*/ BYTE name [1];
/*009*/ }
        REGSYM_16t, *PREGSYM_16t, **PPREGSYM_16t;

#define REGSYM_16t_ sizeof (REGSYM_16t)

// -----------------------------------------------------------------

typedef struct _RETURNSYM
        {
/*000*/ WORD            reclen;   // record length
/*002*/ WORD            rectyp;   // record type
/*004*/ CV_GENERIC_FLAG flags;
/*006*/ BYTE            style;
/*007*/ }
        RETURNSYM, *PRETURNSYM, **PPRETURNSYM;

#define RETURNSYM_ sizeof (RETURNSYM)

// -----------------------------------------------------------------

typedef struct _SEARCHSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD startsym;
/*008*/ WORD  seg;
/*00A*/ }
        SEARCHSYM, *PSEARCHSYM, **PPSEARCHSYM;

#define SEARCHSYM_ sizeof (SEARCHSYM)

// -----------------------------------------------------------------

typedef struct _SLINK32
        {
/*000*/ WORD  reclen;    // record length
/*002*/ WORD  rectyp;    // record type
/*004*/ DWORD framesize;
/*008*/ LONG  off;
/*00C*/ WORD  reg;
/*00E*/ }
        SLINK32, *PSLINK32, **PPSLINK32;

#define SLINK32_ sizeof (SLINK32)

// -----------------------------------------------------------------

typedef struct _SLOTSYM32
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD iSlot;
/*008*/ DWORD typind;
/*00C*/ BYTE  name [1];
/*00D*/ }
        SLOTSYM32, *PSLOTSYM32, **PPSLOTSYM32;

#define SLOTSYM32_ sizeof (SLOTSYM32)

// -----------------------------------------------------------------

typedef struct _SYMTYPE
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ BYTE data [];
/*004*/ }
        SYMTYPE, *PSYMTYPE, **PPSYMTYPE;

#define SYMTYPE_ sizeof (SYMTYPE)

// -----------------------------------------------------------------

typedef struct _THREADSYM32_16t
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD off;
/*008*/ WORD  seg;
/*00A*/ WORD  typind;
/*00C*/ BYTE  name [1];
/*00D*/ }
        THREADSYM32_16t, *PTHREADSYM32_16t, **PPTHREADSYM32_16t;

#define THREADSYM32_16t_ sizeof (THREADSYM32_16t)

// -----------------------------------------------------------------

typedef struct _THUNKSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD pNext;
/*010*/ }
        THUNKSYM, *PTHUNKSYM, **PPTHUNKSYM;

#define THUNKSYM_ sizeof (THUNKSYM)

// -----------------------------------------------------------------

typedef struct _THUNKSYM16
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD pNext;
/*010*/ WORD  off;
/*012*/ WORD  seg;
/*014*/ WORD  len;
/*016*/ BYTE  ord;
/*017*/ BYTE  name    [1];
/*018*/ BYTE  variant [ ];
/*018*/ }
        THUNKSYM16, *PTHUNKSYM16, **PPTHUNKSYM16;

#define THUNKSYM16_ sizeof (THUNKSYM16)

// -----------------------------------------------------------------

typedef struct _THUNKSYM32
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD pNext;
/*010*/ DWORD off;
/*014*/ WORD  seg;
/*016*/ WORD  len;
/*018*/ BYTE  ord;
/*019*/ BYTE  name    [1];
/*01A*/ BYTE  variant [ ];
/*01A*/ }
        THUNKSYM32, *PTHUNKSYM32, **PPTHUNKSYM32;

#define THUNKSYM32_ sizeof (THUNKSYM32)

// -----------------------------------------------------------------

typedef struct _TRAMPOLINESYM
        {
/*000*/ WORD  reclen;    // record length
/*002*/ WORD  rectyp;    // record type
/*004*/ WORD  trampType;
/*006*/ WORD  cbThunk;
/*008*/ DWORD offThunk;
/*00C*/ DWORD offTarget;
/*010*/ WORD  sectThunk;
/*012*/ WORD  sectTarget;
/*014*/ }
        TRAMPOLINESYM, *PTRAMPOLINESYM, **PPTRAMPOLINESYM;

#define TRAMPOLINESYM_ sizeof (TRAMPOLINESYM)

// -----------------------------------------------------------------

typedef struct _UDTSYM
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD typind;
/*008*/ BYTE  name [1];
/*009*/ }
        UDTSYM, *PUDTSYM, **PPUDTSYM;

#define UDTSYM_ sizeof (UDTSYM)

// -----------------------------------------------------------------

typedef struct _UDTSYM_16t
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ WORD typind;
/*006*/ BYTE name [1];
/*007*/ }
        UDTSYM_16t, *PUDTSYM_16t, **PPUDTSYM_16t;

#define UDTSYM_16t_ sizeof (UDTSYM_16t)

// -----------------------------------------------------------------

typedef struct _UNAMESPACE
        {
/*000*/ WORD reclen;   // record length
/*002*/ WORD rectyp;   // record type
/*004*/ BYTE name [1];
/*005*/ }
        UNAMESPACE, *PUNAMESPACE, **PPUNAMESPACE;

#define UNAMESPACE_ sizeof (UNAMESPACE)

// -----------------------------------------------------------------

typedef struct _VPATHSYM16
        {
/*000*/ WORD reclen; // record length
/*002*/ WORD rectyp; // record type
/*004*/ WORD off;
/*006*/ WORD seg;
/*008*/ WORD root;
/*00A*/ WORD path;
/*00C*/ }
        VPATHSYM16, *PVPATHSYM16, **PPVPATHSYM16;

#define VPATHSYM16_ sizeof (VPATHSYM16)

// -----------------------------------------------------------------

typedef struct _VPATHSYM32
        {
/*000*/ WORD  reclen; // record length
/*002*/ WORD  rectyp; // record type
/*004*/ DWORD root;
/*008*/ DWORD path;
/*00C*/ DWORD off;
/*010*/ WORD  seg;
/*012*/ }
        VPATHSYM32, *PVPATHSYM32, **PPVPATHSYM32;

#define VPATHSYM32_ sizeof (VPATHSYM32)

// -----------------------------------------------------------------

typedef struct _VPATHSYM32_16t
        {
/*000*/ WORD  reclen;    // record length
/*002*/ WORD  rectyp;    // record type
/*004*/ DWORD off;
/*008*/ WORD  seg;
/*00A*/ WORD  root;
/*00C*/ WORD  path;
/*00E*/ }
        VPATHSYM32_16t, *PVPATHSYM32_16t, **PPVPATHSYM32_16t;

#define VPATHSYM32_16t_ sizeof (VPATHSYM32_16t)

// -----------------------------------------------------------------

typedef struct _WITHSYM16
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ WORD  len;
/*00E*/ WORD  off;
/*010*/ WORD  seg;
/*012*/ BYTE  expr [1];
/*013*/ }
        WITHSYM16, *PWITHSYM16, **PPWITHSYM16;

#define WITHSYM16_ sizeof (WITHSYM16)

// -----------------------------------------------------------------

typedef struct _WITHSYM32
        {
/*000*/ WORD  reclen;   // record length
/*002*/ WORD  rectyp;   // record type
/*004*/ DWORD pParent;
/*008*/ DWORD pEnd;
/*00C*/ DWORD len;
/*010*/ DWORD off;
/*014*/ WORD  seg;
/*016*/ BYTE  expr [1];
/*017*/ }
        WITHSYM32, *PWITHSYM32, **PPWITHSYM32;

#define WITHSYM32_ sizeof (WITHSYM32)

// -----------------------------------------------------------------

typedef struct _OMAP_DATA
        {
/*000*/ DWORD rva;   // relative virtual address
/*004*/ DWORD rvaTo; // converted relative virtual address
/*008*/ }
        OMAP_DATA, *POMAP_DATA, **PPOMAP_DATA;

#define OMAP_DATA_ sizeof (OMAP_DATA)

// -----------------------------------------------------------------

#pragma pack ()

// =================================================================
// END OF FILE
// =================================================================

//////////////////////////////////////////////////////////////////////////
;
#define CV_SIGNATURE_C6 		0L	// Actual signature is &gt;64K
#define CV_SIGNATURE_C7 		1L	// First explicit signature
#define CV_SIGNATURE_C8     2L
#define CV_SIGNATURE_C81    3L
#define CV_SIGNATURE_C9     4L  // Use CVSIGEX

#define CV_SIGNATURE_RESERVED	2L	// All signatures from 2 to 64K are reserved

#define CV_MAXOFFSET   0xffffffff

/** 	CodeView Symbol and Type OMF type information is broken up into two
*		ranges.  Type indices less than 0x1000 describe type information
*		that is frequently used.  Type indices above 0x1000 are used to
*		describe more complex features such as functions, arrays and
*		structures.
*/




/** 	Primitive types have predefined meaning that is encoded in the
*		values of the various bit fields in the value.
*
*		A CodeView primitive type is defined as:
*
*		1 1
*		1 089  7654  3	210
*		r mode type  r	sub
*
*		Where
*			mode is the pointer mode
*			type is a type indicator
*			sub  is a subtype enumeration
*			r	 is a reserved field
*
*		See Microsoft Symbol and Type OMF (Version 4.0) for more
*		information.
*/


#define CV_MMASK		0x700		// mode mask
#define CV_TMASK		0x0f0		// type mask

#if CC_BIGINT
// can we use the reserved bit ??
#define CV_SMASK		0x008		// subtype mask
#else
#define CV_SMASK		0x007		// subtype mask
#endif

#define CV_MSHIFT		8			// primitive mode right shift count
#define CV_TSHIFT		4			// primitive type right shift count
#define CV_SSHIFT		0			// primitive subtype right shift count

// macros to extract primitive mode, type and size

#define CV_MODE(typ)	(((typ) &amp; CV_MMASK) &gt;&gt; CV_MSHIFT)
#define CV_TYPE(typ)	(((typ) &amp; CV_TMASK) &gt;&gt; CV_TSHIFT)
#define CV_SUBT(typ)	(((typ) &amp; CV_SMASK) &gt;&gt; CV_SSHIFT)

// macros to insert new primitive mode, type and size

#define CV_NEWMODE(typ, nm) 	((CV_typ_t)(((typ) &amp; ~CV_MMASK) | ((nm) &lt;&lt; CV_MSHIFT)))
#define CV_NEWTYPE(typ, nt) 	(((typ) &amp; ~CV_TMASK) | ((nt) &lt;&lt; CV_TSHIFT))
#define CV_NEWSUBT(typ, ns) 	(((typ) &amp; ~CV_SMASK) | ((ns) &lt;&lt; CV_SSHIFT))

//	   pointer mode enumeration values

typedef enum CV_prmode_e {
	CV_TM_DIRECT = 0,		// mode is not a pointer
	CV_TM_NPTR	 = 1,		// mode is a near pointer
	CV_TM_FPTR	 = 2,		// mode is a far pointer
	CV_TM_HPTR	 = 3,		// mode is a huge pointer
	CV_TM_NPTR32 = 4,		// mode is a 32 bit near pointer
	CV_TM_FPTR32 = 5,		// mode is a 32 bit far pointer
	CV_TM_NPTR64 = 6		// mode is a 64 bit near pointer
#if CC_BIGINT
	,
	CV_TM_NPTR128 = 7		// mode is a 128 bit near pointer
#endif
} CV_prmode_e;



//		type enumeration values


typedef enum CV_type_e {
	CV_SPECIAL		= 0x00, 		// special type size values
	CV_SIGNED		= 0x01, 		// signed integral size values
	CV_UNSIGNED 	= 0x02, 		// unsigned integral size values
	CV_BOOLEAN		= 0x03, 		// Boolean size values
	CV_REAL 		= 0x04, 		// real number size values
	CV_COMPLEX		= 0x05, 		// complex number size values
	CV_SPECIAL2 	= 0x06, 		// second set of special types
	CV_INT			= 0x07, 		// integral (int) values
	CV_CVRESERVED	= 0x0f
} CV_type_e;




//		subtype enumeration values for CV_SPECIAL


typedef enum CV_special_e {
	CV_SP_NOTYPE	= 0x00,
	CV_SP_ABS		= 0x01,
	CV_SP_SEGMENT	= 0x02,
	CV_SP_VOID		= 0x03,
	CV_SP_CURRENCY	= 0x04,
	CV_SP_NBASICSTR = 0x05,
	CV_SP_FBASICSTR = 0x06,
	CV_SP_NOTTRANS	= 0x07
} CV_special_e;




//		subtype enumeration values for CV_SPECIAL2


typedef enum CV_special2_e {
	CV_S2_BIT		= 0x00,
	CV_S2_PASCHAR	= 0x01			// Pascal CHAR
} CV_special2_e;





//		subtype enumeration values for CV_SIGNED, CV_UNSIGNED and CV_BOOLEAN


typedef enum CV_integral_e {
	CV_IN_1BYTE 	= 0x00,
	CV_IN_2BYTE 	= 0x01,
	CV_IN_4BYTE 	= 0x02,
	CV_IN_8BYTE 	= 0x03
#if CC_BIGINT
	,
	CV_IN_16BYTE	= 0x04
#endif
} CV_integral_e;





//		subtype enumeration values for CV_REAL and CV_COMPLEX


typedef enum CV_real_e {
	CV_RC_REAL32	= 0x00,
	CV_RC_REAL64	= 0x01,
	CV_RC_REAL80	= 0x02,
	CV_RC_REAL128	= 0x03,
	CV_RC_REAL48	= 0x04
} CV_real_e;




//		subtype enumeration values for CV_INT (really int)


typedef enum CV_int_e {
	CV_RI_CHAR		= 0x00,
	CV_RI_INT1		= 0x00,
	CV_RI_WCHAR 	= 0x01,
	CV_RI_UINT1 	= 0x01,
	CV_RI_INT2		= 0x02,
	CV_RI_UINT2 	= 0x03,
	CV_RI_INT4		= 0x04,
	CV_RI_UINT4 	= 0x05,
	CV_RI_INT8		= 0x06,
	CV_RI_UINT8 	= 0x07
#if CC_BIGINT
	,
	CV_RI_INT16		= 0x08,
	CV_RI_UINT16	= 0x09
#endif
} CV_int_e;




// macros to check the type of a primitive

#define CV_TYP_IS_DIRECT(typ)	(CV_MODE(typ) == CV_TM_DIRECT)
#define CV_TYP_IS_PTR(typ)		(CV_MODE(typ) != CV_TM_DIRECT)
#define CV_TYP_IS_NPTR(typ) 	(CV_MODE(typ) == CV_TM_NPTR)
#define CV_TYP_IS_FPTR(typ) 	(CV_MODE(typ) == CV_TM_FPTR)
#define CV_TYP_IS_HPTR(typ) 	(CV_MODE(typ) == CV_TM_HPTR)
#define CV_TYP_IS_NPTR32(typ)	(CV_MODE(typ) == CV_TM_NPTR32)
#define CV_TYP_IS_FPTR32(typ)	(CV_MODE(typ) == CV_TM_FPTR32)

#if CC_BIGINT
#define CV_TYP_IS_SIGNED(typ)	(((CV_TYPE(typ) == CV_SIGNED)  &amp;&amp; CV_TYP_IS_DIRECT(typ)) || \
	(typ == T_INT1) || (typ == T_INT2) || (typ == T_INT4) || (typ == T_INT8) || (typ == T_INT16) || (typ == T_RCHAR))
#define CV_TYP_IS_UNSIGNED(typ) (((CV_TYPE(typ) == CV_UNSIGNED)  &amp;&amp; CV_TYP_IS_DIRECT(typ)) || \
	(typ == T_UINT1) || (typ == T_UINT2) || (typ == T_UINT4) || (typ == T_UINT8) || (typ == T_UINT16))
#else
#define CV_TYP_IS_SIGNED(typ)   (((CV_TYPE(typ) == CV_SIGNED)  &amp;&amp; CV_TYP_IS_DIRECT(typ)) || \
	(typ == T_INT1) || (typ == T_INT2) || (typ == T_INT4) || (typ == T_RCHAR))

#define CV_TYP_IS_UNSIGNED(typ) (((CV_TYPE(typ) == CV_UNSIGNED)  &amp;&amp; CV_TYP_IS_DIRECT(typ)) || \
	(typ == T_UINT1) || (typ == T_UINT2) || (typ == T_UINT4))
#endif
#define CV_TYP_IS_REAL(typ) 	((CV_TYPE(typ) == CV_REAL)	&amp;&amp; CV_TYP_IS_DIRECT(typ))

#define CV_FIRST_NONPRIM 0x1000
#define CV_IS_PRIMITIVE(typ)	((typ) &lt; CV_FIRST_NONPRIM)
#define CV_TYP_IS_COMPLEX(typ)	((CV_TYPE(typ) == CV_COMPLEX)	&amp;&amp; CV_TYP_IS_DIRECT(typ))




// selected values for type_index - for a more complete definition, see
// Microsoft Symbol and Type OMF document





//////////////////////////////////////////////////////////////////////////

typedef struct CVSIG
{
	DWORD dwSig;
} CVSIG, *PCVSIG;

typedef struct CVSIGEX
{
	DWORD dwSig;
	DWORD dwUnknown1;
	DWORD dwLength;
} CVSIGEX, *PCVSIGEX;

typedef struct CVOBJECT
{
	WORD wLen;
	WORD wRecType;
} CVOBJECT, *PCVOBJECT;

typedef struct CVOBJNAME
{
	WORD wLen;
	WORD wRecType;
	DWORD dwPchSig;

	// Length-prefixed object name
} CVOBJNAME, *PCVOBJNAME;

typedef struct CVCOMPILE
{
	WORD wLen;
	WORD wRecType;
	BYTE bMachine;
	BYTE bLanguage;
	BYTE bFlags1;
	BYTE bFlags2;

	// Length prefixed linker version is here
} CVCOMPILE, *PCVCOMPILE;

typedef struct CVTHUNK
{
	WORD wLen;
	WORD wRecType;
	DWORD Parent;
	DWORD End;
	DWORD Next;
	DWORD ib;
	WORD sn;
	WORD cb;
	BYTE Ordinal;

	// Length prefixed thunk name is here
} CVTHUNK, *PCVTHUNK;

typedef struct CVEND
{
	WORD wLen;
	WORD wRecType;
} CVEND, *PCVEND;

//////////////////////////////////////////////////////////////////////////

struct CVSEEKS {
	DWORD Base;
	DWORD SubsectionDir;
};

struct CVSUBSECTION {
	DWORD PointerToSubsection;
	DWORD SizeOfSubsection;
	DWORD Precompiled;
};

typedef struct CVINFO {
	PVOID pmod;                  // the module represented
	char *ObjectFilename;
	CVSUBSECTION Publics;
	CVSUBSECTION Locals;
	CVSUBSECTION Types;
	CVSUBSECTION Linenumbers;
	CVSUBSECTION Module;
} CVINFO, *PCVINFO;

// CVSEG: used temporarily in EmitCvInfo to build the sstModule table for
// each module.  Each CVSEG will become an array element in the sstModule
// subsection.

struct CVSEG {
	PVOID pgrp;                  // the group which the CON's are in
	PVOID pconFirst, pconLast;   // first and last CON described
	struct CVSEG *pcvsegNext;
};

enum DUMP_RAW_DISPLAY_TYPE {
	Bytes,
	Shorts,
	Longs
};

enum DEBUG_INFO {
	None,
	Minimal,
	Partial,
	Full
};

enum DEBUG_TYPE {
	NoDebug = 0,
	CoffDebug = 1,
	CvDebug = 2,
	FpoDebug = 4,
	FixupDebug = 8,
	MiscDebug = 16
};

enum TOOL_TYPE {
	NotUsed,
	Linker,
	Librarian,
	Dumper,
	Editor,
#if DBG
	DbInspector,
#endif // DBG
	Binder
};

enum FORCE_TYPE {
	ftNone = 0,
	ftUnresolved = 1,
	ftMultiple = 2
};</textarea>
                        
            <input id="copysrc" type="button" value="Copy source to clipboard" onclick="copysource()"/>
            <input id="copyhtml" type="button" value="Copy html" onclick="copyhtml()"/>
            </p>
          </div>
          
          <br/>Editing is locked.        </div>

        <script type="text/javascript">
          document.forms["pasteform"].from.value = getCookie("PASTER_NAME");
          document.forms["pasteform"].language.value = getCookie("PASTER_LANG");
        </script>

        <script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-3186469-2";
urchinTracker();
</script>
  </body>
</html>
