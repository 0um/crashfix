
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<html>
	<head>
<TITLE>Under the Hood, MSJ May 1997</TITLE>
<META NAME="Description" CONTENT="Under the Hood, MSJ May 1997" />
	<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "http://www.rsac.org/ratingsv01.html" l comment "RSACi North America Server" by "inet@microsoft.com" r (n 0 s 0 v 0 l 0))'>
	<META NAME="Robots" CONTENT="all" />
	<META NAME="MS.LOCALE" CONTENT="en-us" />
	<link type="text/css" rel="Stylesheet" href="/msj/css/msdnmag.css" />
	<link type="text/css" rel="Stylesheet" href="/msj/css/msdn.css" />
	<SCRIPT LANGUAGE="javascript" SRC="/msj/js/msdnmag.js"></SCRIPT>
	<link type='text/css' rel='Stylesheet' href='/library/mnp/2/aspx/css.aspx?locale=en-us&amp;name=QuickSearch&amp;name=Menu&amp;static=Page' />
<script type='text/javascript' language='Javascript' src='/msj/mnp_utility.mspx/menujs?mnpshell=%2fmsj%2f0597%2fconfig_issue.xml&amp;clicktrax=False'></script>
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7"><link rel='stylesheet' type='text/css' href='/library/toolbar/3.0/css.aspx?c=/msj/0597/config_issue.xml'/><script language='JavaScript'>var doImage=doImage;var TType=TType;var defaultSearchLable;
function mhHover(tbl,idx,cls){var t,d;if(document.getElementById)t=document.getElementById(tbl);else t=document.all(tbl);if(t==null)return;if(t.getElementsByTagName)d=t.getElementsByTagName("TD");else d=t.all.tags("TD");if(d==null)return;if(d.length<=idx)return;d[idx].className=cls;}
function footerjs(doc){};
var varSegmentation = 0;
var varClickTracking = 1;
var varCustomerTracking=1;
document.write("<script type='text/javascript' src='" + (window.location.protocol) + "//c.microsoft.com/ms.js'"+"'><\/script>");


var rsltextbox = 'msviLSBtbox'; var wtflag = false;
function stripSymbols () { var objrslttextbox = getObjectById(rsltextbox); if (objrslttextbox) { var form = objrslttextbox.form; var s = objrslttextbox.value; filteredValues = "<>!@^*"; var i; var returnString = ""; for (i = 0; i < s.length; i++) { var c = s.charAt(i); if (filteredValues.indexOf(c) == -1) { returnString += c; } else { returnString += " "; } } objrslttextbox.value = returnString; } if(!wtflag) { trackLSB("Site"); } } 
function addSubmitEvent() {
 msviLSBtbox=document.getElementById("msviLSBtbox")
 if(msviLSBtbox)
 {
    defaultSearchLable = msviLSBtbox.value;
 }
 var objrslttextbox = getObjectById(rsltextbox); 
 if (objrslttextbox) 
 { 
    var form = objrslttextbox.form;
     if (window.attachEvent) 
     { 
         form.attachEvent("onsubmit",stripSymbols); 
     }
     else 
     { 
        form.addEventListener("submit",stripSymbols,false);
     }
  } 
} 
function getObjectById(elid) 
{ 
    if (document.getElementById) 
    { 
        return document.getElementById(elid); 
    } 
    else if (document.all) 
    { 
        return document.all[elid]; 
    } 
    else if (document.layers) 
    { 
        return document.layers[elid];
    } 
} 
if (window.attachEvent) { window.attachEvent("onload",addSubmitEvent); } else { window.addEventListener("load",addSubmitEvent,false); } 
var FromWeb = false;
function trackLSB(type)
{

  clearDefaultSearchLable();
 
  if(type=="Web")
    FromWeb = true;
  var tmp = document.getElementById("msviLSBtbox");
  var errorInfo = document.getElementById("errorInfo");
  if(type=="Site" && tmp.value.length==0 && !FromWeb)
  {
       tmp.value=errorInfo.value;
       tmp.style.color='#bc2b2b';
       ajustWidth();
  }
  if (typeof dcsMultiTrack == "function")
  { 
      var qu = document.getElementById("msviLSBtbox").value;
      var dcsuri = "results.aspx";
      var dcssip, ti;
      if (type == "Site")
      {
        dcssip = "search.microsoft.com";
        ti = "SearchButton: OnSite"; 
      }
      else if (type == "Web")
      {
         dcssip = "bing.com";
         ti = "SearchButton: Web";
      }
      dcsMultiTrack("DCS.dcsuri", dcsuri, "DCS.dcssip", dcssip, "WT.ti", ti, "WT.dl", "2", "WT.z_srch_t", qu, "DCS.dcsqry", "", "WT.ad", "", "WT.mc_id", ""); 
      wtflag = true; DCS.dcsuri=DCS.dcssip=DCS.dcsqry=WT.ti=WT.z_srch_t="";
  }
}

var isInputqu = false;
var searchBoxWidthWithKievLogo = 0;
var searchBoxWidthWithoutKievLogo = 0;
function clearDefaultSearchLable()
{var searchBox = document.getElementById("msviLSBtbox");
if(!isInputqu){searchBox.value = "";}}
var kievImageWidth = 47;
var isAdTboxWidth = false;
var isInitailed = false;
function ajustWidth()
{
    var searchBoxInput = document.getElementById("msviLSBtbox");
    var kievImage = document.getElementById("msviLSBlogo");
    if(!isInitailed)
    {
         searchBoxWidthWithKievLogo = searchBoxInput.style.width;
         searchBoxWidthWithoutKievLogo = searchBoxInput.clientWidth + (kievImageWidth - 1);
         isInitailed = true;
    }
    var width = kievImage.clientWidth-1;
    kievImage.style.width = '1px';
    var tBoxAloneWidth = searchBoxInput.clientWidth + width;
    searchBoxInput.style.width = tBoxAloneWidth;
    isAdTboxWidth = true;
    
      
    
}

function searchBoxFocused(defaultSearchLabel)
{
    var searchBoxInput = document.getElementById("msviLSBtbox");
    var kievImage = document.getElementById("msviLSBlogo");
    if(searchBoxInput.value == defaultSearchLabel || searchBoxInput.value==document.getElementById("errorInfo").value)
    {
        searchBoxInput.value = '';
        searchBoxInput.style.fontStyle = '';
        searchBoxInput.style.color='#000000';
        kievImage.style.width = '1px';
        if(searchBoxWidthWithKievLogo == 0 && !isAdTboxWidth &&!isInitailed)
        {
            searchBoxWidthWithKievLogo = searchBoxInput.style.width;
            searchBoxWidthWithoutKievLogo = searchBoxInput.clientWidth + (kievImageWidth - 1);
            isInitailed = true;
        }
        searchBoxInput.style.width = searchBoxWidthWithoutKievLogo;
    }
}

function searchBoxBlur(defaultSearchLabel)
{
    var searchBoxInput = document.getElementById("msviLSBtbox");
    var kievImage = document.getElementById("msviLSBlogo");
    if(searchBoxInput.value.replace(/(^\s*)|(\s*$)/g, '')=='') 
    {
        searchBoxInput.value=defaultSearchLabel;searchBoxInput.style.fontStyle ='Italic';
        searchBoxInput.style.color = "#a1a1a1";
        kievImage.style.width = kievImageWidth;
        
        searchBoxInput.style.width = searchBoxWidthWithKievLogo;
        isInputqu = false;
     }
     else
     {
        isInputqu = true;
     }
}

function Test()
{
    var searchBox = document.getElementById(rsltextbox);
    var go = document.getElementById("errorInfo");
    if(searchBox.value==go.value)
        return false;
    return true; 
}</script><meta name="WT.sp" content="_msj_" /><script language='JavaScript' src='http://js.microsoft.com/library/svy/broker.js'></script>
	</head>
	<body leftmargin="0" topmargin="0" rightmargin="5" bgcolor="#ffffff">
		
		<!--NOINDEX_START--><script language="Javascript">
				if (self.name == "MNPMainFrame") top.location.href = self.location.href;
			</script><div id="msviMasthead"><table cellpadding="0" cellspacing="0" width="100%" border="0"><tr><td width="100%"><table cellpadding="0" cellspacing="0" width="100%" height="22" border="0"><tr><td id="msviMarketing" bgcolor="#FFFFFF" nowrap=""><a href="http://go.microsoft.com/fwlink/?LinkID=92799">Click Here to Install Silverlight</a></td><td width="100%" bgcolor="#3568CC"><img src="/library/toolbar/3.0/gradient.aspx?a=FFFFFF&amp;b=3568CC&amp;w=250&amp;h=22&amp;d=ltr&amp;c=RkWooiSyZq0Yx5DIezuYpFhZ%2ffA%3d" width="250" height="22" alt="*" title=""></td></tr></table></td><td id="msviGlobalToolbar" bgcolor="#3568CC" height="22" nowrap="" dir="ltr" align="left"><table cellpadding="0" cellspacing="0" border="0"><tr><td id="msviRegionId" nowrap>United States</td><td id="msviRegionSelector" nowrap><a href="http://www.microsoft.com/worldwide">Change</a></td><td class="gtsep">|</td><td id="msviSiteMap" nowrap><a href="http://www.microsoft.com/en/us/sitemap.aspx">All Microsoft Sites</a></td><td class="msviPPSpace"></td></tr></table></td></tr></table><table cellpadding="0" cellspacing="0" width="100%" border="0"><tr valign="top"><td><table cellpadding="0" cellspacing="0" width="100%" height="42" border="0" style="height:expression(parentElement.parentElement.parentElement.parentElement.offsetHeight)"><tr valign="top"><td id="msviBrandBanner" bgcolor="FFFFFF"><a href="http://msdn.microsoft.com"><img src="/library/toolbar/3.0/images/banners/msdn_masthead_ltr.gif" width="225" height="42" alt="MSDN" title="" border="0"></a></td></tr></table></td><td id="msviGlobalSearch" width="100%" bgcolor="#6799FF"><div class="msviLSBsform"><form id="msviLSBForm" action="/library/toolbar/3.0/search.aspx" target="_top"><div id="msKiev"><input type="hidden" name="View" value="en-us"><input type="hidden" name="charset" value="iso-8859-1"><input id="msviLSBtbox" style="font-style:italic; color:#a1a1a1" onkeydown="if(event.keyCode == 13)searchBoxBlur('Search Microsoft.com')" onfocus="searchBoxFocused('Search Microsoft.com')" onblur="searchBoxBlur('Search Microsoft.com')" type="text" name="qu" value="Search Microsoft.com" autocomplete="off"><span id="msviLSBlogo" class="msviLSBlogo" title="Results by Bing"></span><input id="msviLSBssearch" title="Search Microsoft.com" type="image" name="site" src="/library/toolbar/3.0/images/LSB/Search_icon.gif" align="absmiddle" onclick="trackLSB('Site')"></div><input id="msviLSBWeb" title="Search the Web" name="sweb" type="submit" value="" onclick="trackLSB('Web')" align="absmiddle"></form></div></td></tr></table><div id="msviLocalToolbar"><table cellpadding="0" cellspacing="0" width="100%" height="19" border="0"><tr><td nowrap id="msviHomePageLink"><a href="/isapi/gomsdn.asp?TARGET=/default.aspx">MSDN Home</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 2, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 2, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/developercenters/">Developer Centers</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 4, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 4, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/library/default.asp">Library</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 6, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 6, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/downloads/">Downloads</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 8, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 8, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/code/">Code Center</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 10, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 10, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/subscriptions/">Subscriptions</a></td><td><span class="ltsep">|</span></td><td class="lt0" nowrap onmouseover="mhHover('msviLocalToolbar', 12, 'lt1')" onmouseout="mhHover('msviLocalToolbar', 12, 'lt0')"><a href="/isapi/gomsdn.asp?TARGET=/worldwide.aspx">MSDN Worldwide</a></td><td width="100%"></td></tr></table></div></div>
			<table cellpadding="0" cellspacing="0" border="0" width="100%" dir="LTR">
				<tr valign="top">
		<td height="100%" style="overflow-x: hidden" width="181">
  <table cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td class="mnpQuickSearch" style="background: #CCCCCC; color: #000000" dir="LTR"><form style="margin: 0px" action="http://msdn.microsoft.com/msdn-online/shared/components/mscomsearch30.aspx"><nobr><font color="#000000">Search for</font><br><input class="mnpSearchBox" type="text" id="qu" name="qu" maxlength="255" style="width: 165px"><br><table cellpadding="0" cellspacing="0" border="0" width="100%" style="margin-top: 2px"><tr><td width="100%" class="mnpQuickSearch" style="padding: 0px"><select class="mnpSearchScopes" style="width: 137px" name="SearchScope"><option value="1">All of MSDN</option><option value="2">All Library</option><option value="3">Code &amp; Downloads</option><option value="7" selected>MSDN Magazine</option><option value="5">Support &amp; KB</option></select></td><td><input class="mnpSearchButton" type="submit" value="Go"><br></td></tr></table><a href="http://search.microsoft.com/search/search.aspx?View=msdn&amp;st=a" style="color: #000000" onmouseover="style.color='#0033CC';" onmouseout="style.color='#000000';">Advanced Search</a></nobr></form></td></tr></table>
  <div id="mnpMenuTop" class="mnpMenuTop" style="overflow-x: hidden; width: 181px" url="/msj/0597/hood0597.aspx" dir="LTR" parent="/msj/0597/default.aspx"><div class="mnpInherit"><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/msj/default.aspx">MSJ Home</a></div><div class="mnpMenuBorder" style="width: 180px"></div><div class="mnpMenuRow" style="border-color: #999999; width: 153px; overflow-x: hidden" menu="mdbca01c1516fa256b1f57ba445911946"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/msj/0597/default.aspx">May 1997</a></div><div class="mnpMenuBorder" style="width: 180px"></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/find/default.aspx">Search</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden" menu="m3fd9abd6d4e6b1d47da1677743a69def"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/msj/code.aspx">Source Code</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden" menu="m0e5c80cdf8bdd73274e5171bd96f4ed9"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/msj/backissues.aspx">Back Issues</a></div><div class="mnpMenuBorder" style="width: 180px"></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/Subscribe.aspx">Subscribe</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/service.aspx">Reader Services</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/write.aspx">Write to Us</a></div><div class="mnpMenuBorder" style="width: 180px"></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/isapi/gomsdn.asp?TARGET=/msdnmag/default.aspx">MSDN Magazine</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="/mind/default.asp">MIND Archive</a></div><div class="mnpMenuRow" style="border-color: #F1F1F1; background: #F1F1F1; width: 153px; overflow-x: hidden"><img width="4" height="7" border="0" alt="*" title="" class="mnpMenuArrow" src="/library/mnp/2/gif/arrowLTR.gif" style="left: 166px; visibility: hidden"><a href="http://msdn.microsoft.com/newsgroups/topic.aspx?url=/msdn-files/028/201/133/topic.xml">Magazine Newsgroup</a></div><div class="mnpMenuBorder" style="width: 180px; margin-bottom: 0px"></div></div></div>
  <div class="mnpAds" style="width: 181px; height: 100%; padding-bottom: 20px; background: #F1F1F1; border-style: solid; border-color: #999999; border-width: 0px 1px 0px 0px">
    <center><script type="text/javascript" src=""></script></center>
  </div>
</td>
          <td width="100%" dir="LTR">
        <!--NOINDEX_STOP-->

<table class="downleveleyebrow" width="100%" height="24px"><tr><td>
<span id="ctl00_eb" style="COLOR: #003399;width: 100%;height: 24px;padding-top:4px;padding-left:14px;"><a href='isapi/gomsdn.asp?TARGET=/'>MSDN Home</a>&nbsp;&gt;&nbsp;<a href='/msj/'>MSJ</a>&nbsp;&gt;&nbsp;<a href='/msj/0597/default.aspx'>May 1997</a></span>

</td></tr></table>

	<!----------------->
	<!--BEGIN_CONTENT-->
	<!----------------->

<!--TOOLBAR_START-->

<!--TOOLBAR_EXEMPT-->

<!--TOOLBAR_END-->

<center><font size=3 color=000080 face="verdana, arial, helv"><B><a href="/msj/0597/default.aspx" >May 1997</B></a></font></center><P>
<center><a href="/msj/default.asp" ><img border=0 src="/msj/images/msjheader02.gif" width=399 height=33></a></center>
<hr color=000080 width=300>

<center><img src="/msj/images/logos/hoodlogo.gif" width=244 height=77 border=0></center>

<P>
<center><font size="2">Code for this article: <a href="http://download.microsoft.com/download/0/6/7/0678184e-905e-4783-9511-d4dca1f492b4/hood0597.exe">Hood0597.exe</a> (7KB)</font></center>
<center>
<table width=380>
<tr><td><center>
<font size=2><i>Matt Pietrek is the author of </i>Windows 95 System Programming Secrets<i> (IDG Books, 1995). He works at NuMega Technologies Inc., and can be reached at <a >mpietrek@tiac.com</a>.<br></i>
</font>
</center>
</td></tr>
</table>
</center>

<P>
<center>
<table width=380>
<tr><td>
<FONT SIZE=4 color=cc6699 face="verdana, arial, helv"><b>In last month's column,</b></font> <font size=2>(<a href="/msj/0497/hood/hood0497.aspx">April 1997</a>) I created an  
MSJExceptionHandler class for generating report 
files when an unhandled exception occurs. At the end of the column, I described basic stack walking on the Intel CPU. However, the code addresses that you'd see from my stack-walking code are logical addresses. That is, they'd have the name of the EXE or DLL that encompasses the address, along with the section and offset within the section. While these addresses are what you'd see in a MAP file, most people would rather see symbolic function names in their stack traces. In addition, my stack-walking code didn't help you if the program's code wasn't generated with stack frames.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 This month, I'll show you how to remedy both of these problems by using IMAGEHLP.DLL. Until Windows NT&reg; 4.0 arrived, IMAGEHLP.DLL lurked in the backwaters of the Win32&reg; SDK. In Windows NT 4.0, it became an integral part of the operating system, and is a redistributable component for Windows&reg; 95 users. IMAGEHLP.DLL has many useful functions that provide services such as executable file modification, symbol table access, and security certificate manipulation. I'll use just a few of the functions here, but you'll find that quite a lot can be accomplished with this DLL.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 A few of the functions that I'll describe use debug information of one sort or another. I get a fair amount of inquiries on the various types of debug information, since not much has been written about this topic. For this reason, I'm going to spend a little bit of time describing the various types of information before extending my MSJExceptionHandler class to use symbolic debug information. As a side note, the terms &quot;symbol table&quot; and &quot;debug information&quot; are often used interchangeably; a distinction could be made, but I won't split hairs.<p>
  
</FONT>
<center><B><FONT FACE="Verdana" SIZE=4 COLOR="#000080"> Types of Debug Information</font></b></center><br>

<FONT SIZE=2> <img src="/msj/images/dingbats/indent.gif" width=10 height=4>The most well-known form of debug information you'll see in Win32 executables is the information that debuggers work with directly. For example, this form of debug information lets the debugger convert between an address and the name of the function or variable that it corresponds to. Likewise, it lets the debugger translate between program addresses and the source file and line number that generated the code. This debug information even lets a debugger know about the parameters and local variables a function uses, and where they can be found on the stack. In addition, this format includes type information, which describes the size and type (for example, void *, or BOOL) of variables and functions.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 Until a few years ago, Microsoft&reg; compilers used a symbol table format known as CodeView information. This format has been documented in a variety of places, including the MSDN CD-ROM. A number of other compiler vendors have adopted CodeView as their debug format. The notable exception is Borland, which uses a proprietary format of debug information in Borland C++ and Delphi. Up until Visual C++&reg; 4.1, you could still force the linker to produce CodeView-style symbols. CodeView symbol tables, like most other types of debug information, are stored at the end of the executable file for which they were created.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 Starting in Visual C++ 2.0, Microsoft introduced a new type of symbol table. This format is known as the program database or, more commonly, the PDB. The shortened name comes from the fact that this information is kept in a file with a PDB extension separate from the executable. The primary reason was to support the Microsoft linker's incremental linking feature. If the debug info were to be kept at the end of the executable file, it would require the linker to do significantly more file I/O when writing a file with debug information. Microsoft's solution was to put the debug information in a separate file and make the executable file contain a reference to the external symbol table.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 The format of PDB symbol tables isn't publicly documented. (Even I don't know the exact format, especially as it continues to evolve with each new release of Visual C++.) However, PDB information is essentially the chunks of CodeView information pulled from throughout the project's source files. So how are debuggers supposed to use PDB information? If you look in the BIN directory of all versions of Visual C++ going back to Visual C++ 2.0, you'll see DLLs with names like dbi.dll, mspdb40.dll, and mspdb41.dll. These DLLs know how to read PDB information and present it in a consistent format to the client program (typically a debugger). The APIs that these DLLs export aren't publicly documented, to my knowledge.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 Another type of debug information that Visual C++ can emit is known as Common Object File Format (COFF), and preceded Win32 by many years. When the Windows NT team was writing tools for their early work, COFF symbol tables made sense because many development tools ported from other platforms worked with COFF symbols. Even today, you can force Visual C++ to generate COFF symbols by specifying the /DEBUGTYPE:COFF or /DEBUGTYPE:BOTH linker options. One disadvantage of Microsoft's COFF information is that it doesn't contain type information that tells the debugger if a particular variable is an int, a double, or so forth.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 You'll find documentation on the COFF format on the MSDN CD-ROM. WINNT.H contains most of the data structures that COFF symbol tables use. My overview of COFF symbols can be found in chapter 8 of <i>Windows 95 System Programming Secrets</i> (IDG Books, 1995). <br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 The next type of debug information is Frame Pointer Omission (FPO) data, which is specific to the Intel CPU architecture. Briefly, FPO is helper information that stack-walking code can use to walk past functions that weren't generated with a standard EBP frame (as I described last month). Using FPO information, a stack-walking routine can piece together what the stack looks like for this type of function. By knowing what the stack looks like, the code can detect the location of the return address and the next higher frame on the stack. FPO information is usually stored as part of the executable to which it corresponds.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 You'll see FPO information generated for your own code if you force the compiler to generate debug information and perform optimizations. For example, if you compile FOO.CPP, with this command line:<br></FONT>
</font></td></tr></table></center>

<center><table width=380><tr><td><pre><font size=1>
 CL /Zi /O1 FOO.CPP</font></pre></td></tr></table></center>

<center><table width=380><tr><td><font size=2>and use the obscure /FPO option on the resulting EXE</font>
</font></td></tr></table></center>

<center><table width=380><tr><td><pre><font size=1>
 DUMPBIN /FPO FOO.EXE</font></pre></td></tr></table></center>

<center><table width=380><tr><td><font size=2>you'll see something like this:</font>
</font></td></tr></table></center>

<center><table width=380><tr><td><pre><font size=1>
FPO Data (41)
          Proc                    Use Has  Frame        
Address   Size   Locals   Prolog  BP  SEH  Type   Params
00001014   8        0        0     N   N    fpo      4        
0000101E  10        0        0     N   N    fpo      8       </font></pre></td></tr></table></center>

<center><table width=380><tr><td><font size=2><img src="/msj/images/dingbats/indent.gif" width=10 height=4>Until recently, FPO information was undocumented. However, documentation eventually showed up in an obscure corner of the MSDN CD-ROM. More recently, WINNT.H from the Windows NT 4.0 Win32 SDK included a definition for the FPO_DATA structure, which is essentially all you need to know.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 Yet another form of debug information is relatively new and undocumented, except for a few obscure references in WINNT.H and the Win32 SDK help. This type of information is known as OMAP. Apparently, as part of Microsoft's internal build procedure, small fragments of code in EXEs and DLLs are moved around to put the most commonly used code at the beginning of the code section. This presumably keeps the process memory working set as small as possible. However, when shifting around the blocks of code, the corresponding debug information isn't updated. Instead, OMAP information is created. It lets symbol table code translate between the original address in a symbol table and the modified address where the variable or line of code really exists in memory.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 In WINNT.H, you'll see two #defines, IMAGE_DEBUG_TYPE_OMAP_TO_SRC and IMAGE_ 
DEBUG_TYPE_OMAP_FROM_SRC, that provide evidence for the existence of OMAP information. Likewise, in the description of the IMAGEHLP_SYMBOL structure in the Win32 SDK, you'll see the #define SYMF_OMAP_ 
GENERATED. The question is, where can you find examples of OMAP information? If you use Windows NT, you can find it nearly everywhere. Prowling through the DBG files, which Microsoft provides in the Win32 SDK for most system components, you'll find that many of them have OMAP information. <P>
</FONT>
<center><B><FONT FACE="Verdana" SIZE=4 COLOR="#000080">DBG Files</font></b></center>
<br>
<FONT SIZE=2><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 The DBG files provide the debug information for your use without including it in the executable. Microsoft provides symbol tables for all the components of Windows NT. However, by putting them in separate DBG files, you don't have to pay the overhead of increased disk usage if you don't need the symbol tables. You can simply copy the DBG files for the system components you use.<br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 DBG files are nothing more than a collection of the various types of debug information. Following a standard header at the beginning of a DBG file is a directory of the various types of debug information in the file. If you've written code that works with symbol tables in executables, it's really not hard to modify them to work with DBG files as well. <br><img src="/msj/images/dingbats/indent.gif" width=10 height=4>
 The standard method for creating a DBG file is to build your executable file with whatever types of debug information you want. Remember, doing a debug build doesn't necessarily mean that you have to disable optimizations. Once the executable is created, use the REBASE program from the Win32 SDK to strip the symbols out of the executable and put them into a DBG file. Alternatively, if you write your own tools, IMAGHELP.DLL has a SplitSymbols API that can create a DBG file.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>If you're going to use my MSJEXHND framework (or something like it), you should seriously consider making DBG files for your final release. In your release build, leave all your optimizations on, but enable debugging optimization (and optionally, line-number information). After building your executable, use REBASE to strip the symbol information out into a DBG file. This way, you'll have symbols for debugging your release build, but your users won't.<br>
</font><p>
<font FACE="Verdana, arial, helvetica" SIZE=4 COLOR=000080>
<center><b>Using IMAGEHLP</b>
</center>
</font>
<font size=2>
<p>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Now that I've rambled on about symbol tables and DBG files, let me tie this back together with the original topic: symbolic stack traces in an exception report. IMAGEHLP.DLL supports and uses nearly everything that I've described above. For starters, it can read CodeView information, PDB files, and COFF debug information to translate symbolic names to addresses. If FPO data is present, IMAGEHLP uses it to walk the stack even when EBP-style stack frames are missing. For Microsoft executable files that have undergone working set optimization, IMAGEHLP uses the OMAP information to provide correct symbolic addresses. And IMAGEHLP can do all of this either from executable files or from separate .DBG files.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>With all these capabilities, IMAGEHLP.DLL may be suitable for all of the symbol table needs of some applications. However, there are limitations and restrictions that bear mentioning. First, IMAGEHLP doesn't have APIs for accessing source-line information. Debuggers need source-line information to step through code at the source level. Next, some of the functions in the Windows NT 4.0 version of IMAGEHLP.DLL don't work on Windows 95, including some of the functions I'll use this month. Finally, IMAGEHLP only knows about Microsoft-supported symbol formats. Developers using Borland and other non-CodeView or COFF compilers will have to find some other way to access their symbol tables.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>So how can IMAGEHLP improve the MSJExceptionHandler code? Last month, I mentioned that my Intel-specific stack-walking code wouldn't work if no stack frames were generated (for example, if I had compiled the program with optimizations enabled for my release build). IMAGEHLP.DLL, with the aid of FPO data, can still walk the stack in this situation. Even if I could walk the stack, logical addresses like
</font>
</td>
</tr>
</table>
</center>

<center>
<table width=380>
<tr>
<td>
<pre>
<font size=1>
 01:00000099 E:\COLUMN\col43\MSJTESTEXC.exe
</font></pre>
</td>
</tr>
</table>
</center>

<center>
<table width=380>
<tr>
<td>
<font size=2>aren't very user friendly. IMAGEHLP.DLL's symbol table functions can make quick work of linear addresses that you feed it, and spit back the corresponding function name from your code.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>
<a TARGET="_self" href="javascript:OpenUrl('/msj/0597/hoodtextfigs.htm#fig1');"><b>Figure 1</b></a> shows the revised MSJExceptionHandler class with IMAGEHLP support. There are two new methods: InitImagehlpFunctions and ImageHlpStackWalk. At the end of the class declaration is a slew of typedefs and member variables, all related to IMAGEHLP functions. These additions make the MSJExceptionHandler code independent of the presence of IMAGEHLP.DLL. If IMAGEHLP is present, my code connects to it via LoadLibrary and GetProcAddress; if not, the code falls back to the same behavior as last month's version. Because of this behavior, there are two different stack-walking methods. The ImagehlpStackWalk method is used when IMAGEHLP.DLL is available, while IntelStackWalk is used when it's not.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The only change I made to last month's code (besides adding new methods) is in the GenerateExceptionReport method (see <a TARGET="_self" href="javascript:OpenUrl('/msj/0597/hoodtextfigs.htm#fig1');"><b>Figure 1</b></a>). In last month's code, the method simply finished with a call to IntelStackWalk. For the revised code, I call the new InitImagehlpFunctions method first, then ImagehlpStackWalk. I let IMAGEHLP.DLL clean up by calling the SymCleanup API.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Before I get to the really interesting code in ImagehlpStackWalk, let me point out something in the InitImagehlpFunctions method (see <a TARGET="_self" href="javascript:OpenUrl('/msj/0597/hoodtextfigs.htm#fig1');"><b>Figure 1</b></a>). The current IMAGEHLP.DLL documentation is lacking in some key areas that aren't obvious at first. I found out the hard way that, before the symbol table or stack-walking APIs will work, you have to call the SymInitialize API. For the third parameter, fInvadeProcess, I pass TRUE. This causes IMAGEHLP to attempt to load symbol tables for every module in the process, including the DBG files that are provided for the Windows NT system components. If you want to defer some of this work and let IMAGEHLP demand-load the symbol tables, you can use the SymSetOptions API with the SYMOPT_DEFERRED_
LOADS flag.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The code for MSJExceptionHandler::ImagehlpStackWalk method can be found in <a TARGET="_self" href="javascript:OpenUrl('/msj/0597/hoodtextfigs.htm#fig1');"><b>Figure 1</b></a>. The focus of this routine is a loop based on the IMAGEHLP StackWalk API. Again, I found out the hard way (because it's not in any documentation) that some preliminary setup is needed before calling StackWalk for the first time on the Intel platform. A STACKFRAME structure must be created and initialized with the instruction pointer, frame pointer, and stack pointer. Then you can just spin in a loop, calling StackWalk until it returns FALSE. <br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Each successful call to StackWalk yields the next higher frame in the call stack. The StackWalk function implicitly uses FPO data, so you don't have to do anything special. Also notice that since I'm executing in the same process context as the stack I'm walking, I can pass the values returned by GetCurrentProcess and GetCurrentThread as the process and thread handles. If I walked a thread in another process context (like debuggers do), I'd somehow have to get hold of a valid process and thread handle.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>The last four parameters to StackWalk might seem a little strange. IMAGEHLP.DLL is designed to be very flexible, and to not make assumptions about the environment that it's operating under. Therefore, it uses caller-supplied callback functions to read memory, find the FPO (or similar data), correlate addresses to DLLs, and convert between segmented 16-bit addresses and 32-bit linear addresses. For two of these parameters, you can pass zero, and the StackWalk API will do the right thing. For the other two parameters, you can pass the address of a function you wrote or the addresses of built-in IMAGEHLP APIs that provide acceptable default behavior. That is what I've done in the MSJEXHND code.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>After each successful call to the StackWalk API you get back the linear memory address of some piece of code. In the IntelStackWalk method, I converted these almost useless linear addresses into logical addresses that you could look up in a MAP file. However, with the aid of IMAGEHLP and its SymGetSymFromAddr API, I can do much better (assuming symbol table information is available). If everything works out, I can correlate that linear address to a specific function.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>SymGetSymFromAddr takes four parameters. The first is the process handle for the process in which you want to look up the symbol. The second parameter is the linear address that you're asking about. The third parameter is a DWORD that the API fills in with a displacement. For example, if the address you're asking about is 0x30 bytes inside a function, the API will write 0x30 to the DWORD. The final parameter is a pointer to an IMAGEHLP_SYMBOL structure, which SymGetSymFromAddr fills in with all sorts of goodies, including the symbol name.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Filling in and using the fourth parameter (the IMAGEHLP_SYMBOL pointer) can be confusing at first. The problem is that the IMAGEHLP_SYMBOL structure doesn't leave room for the symbol name at the end. You have to create a buffer in memory that's at least the size of an IMAGEHLP_SYMBOL structure plus the size of the largest symbol name that you're expecting. In the MSJEXHND code, I did this by making a BYTE array of the desired size (including a 512-byte name buffer). I then made a pointer of type IMAGEHLP_SYMBOL * that points at the BYTE buffer. Also, before passing the buffer to SymGetSymFromAddr, you have to initialize several fields in the buffer. Again, the Win32 documentation is vague in this area, so see the ImagehlpStackWalk code for an example of what's necessary.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>For each entry in the call stack, the ImagehlpStackWalk method uses SymGetSymFromAddr to look for a symbolic name for the address. If a symbol is found, the code prints out the function name, along with how far the address is from the beginning of the function (in bytes). If IMAGEHLP had line-number functions, I'd try to correlate the linear address to a source file and line number as well. If SymGetSymFromAddr can't locate a symbol (perhaps because there's no symbol table available), my code converts the linear address into a logical address and emits that.<br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>Earlier, I mentioned that some IMAGEHLP functions have problems under Windows 95. The problem is that the Windows NT 4.0 version of IMAGEHLP doesn't enumerate the list of loaded EXEs and DLLs in a process under Windows 95. IMAGEHLP.DLL needs to know what (and where) modules are loaded so it can correlate a linear address to the EXE or DLL that it belongs to. Without knowing which module an address comes from, IMAGEHLP can't know which symbol table to use. Because of this problem, both the StackWalk and SymGetSymFromAddr APIs currently don't work on Windows 95. Hopefully this will be fixed in a subsequent release of IMAGEHLP.DLL. <br>
<img src="/msj/images/dingbats/indent.gif" width=10 height=4>This wraps up our tour of unhandled exception reporting, stack walking, and symbol tables. Everything that I've described here is just part of the basic nuts and bolts that debugger writers work with nearly every day. These issues may seem complicated; however, with the aid of IMAGEHLP.DLL, much of the hard work has been done for you. Likewise, my MSJEXHND framework shows that the topics I've described can be useful outside of writing a debugger.<br>
<img align=right src="/msj/images/dingbats/end.gif" WIDTH=12 HEIGHT=12>
<P>
<I>Have a question about programming in Windows? Send it to Matt at <a >mpietrek@tiac.com</a></i><br></FONT>

</td></tr></table></center>
<!--Footer-->
<P>
<CENTER>
<TABLE>
<TR><TD WIDTH=380>
<CENTER><FONT SIZE=2 COLOR=#000000><i>From the May 1997 issue of <a href="/msj/default.asp" >Microsoft Systems Journal</A>.
 Get it at your local newsstand, or better yet, </i><A  HREF="/isapi/gomsdn.asp?TARGET=/msdnmag/subscribe.asp"><i>subscribe</i></A>.<br></FONT>
</CENTER>

</TD></TR>
</TABLE>
</CENTER>
<CENTER>
<table>
<tr><td width=380>
<HR width=80%>
<CENTER><FONT SIZE=1><i>&#169; 1997 Microsoft Corporation. All rights reserved. <a href="/misc/info/cpyright.htm">Legal Notices</a>.
</i>
</FONT>
</CENTER>
</td>
</tr>
</table>
</CENTER>


	<!----------------->
	<!--END_CONTENT-->
	<!----------------->
		
					</td>
		
				</tr>
			</table>
		<!--NOINDEX_START-->
<br clear="all" style="line-height: 1px; overflow: hidden"><table id="msviFooter" width="100%" cellpadding="0" cellspacing="0"><tr valign="bottom"><td id="msviFooter2" style="filter:progid:DXImageTransform.Microsoft.Gradient(startColorStr='#FFFFFF', endColorStr='#669AFF', gradientType='1')"><div id="msviLocalFooter"><nobr><a href="http://go.microsoft.com/?linkid=317027" target="_top">Manage Your Profile</a> |</nobr><wbr></wbr><nobr><a href="/legal/" target="_parent">Legal</a> |</nobr><wbr></wbr><nobr><a href="http://go.microsoft.com/?linkid=2028439" target="_parent">Contact us</a> |</nobr><wbr></wbr><nobr><a href="/isapi/gomsdn.asp?TARGET=/flash/" target="_parent">MSDN Flash Newsletter</a></nobr></div><div id="msviGlobalFooter"><span dir="ltr">&#169; 2011 Microsoft Corporation. All rights reserved.&nbsp;</span><nobr><a href="http://support.microsoft.com/contactus/?ws=mscom" target="_parent">Contact Us</a> |</nobr><wbr></wbr><nobr><a href="http://go.microsoft.com/?linkid=4412892" target="_parent">Terms of Use</a> |</nobr><wbr></wbr><nobr><a href="http://go.microsoft.com/?linkid=4412893" target="_parent">Trademarks</a> |</nobr><wbr></wbr><nobr><a href="http://go.microsoft.com/?linkid=4412894" target="_parent">Privacy Statement</a></nobr></div></td><td bgcolor="#669AFF" width="105"><img src="/library/toolbar/3.0/text.aspx?text=TQ%3d%3d&amp;fore=FFFFFF&amp;b=669AFF&amp;font=Microsoft+Logo+95%2c+13pt&amp;w=105&amp;h=29&amp;a=0&amp;l=0&amp;v=0&amp;c=eAdQAhJgwJihw2DKZGDGx4FnKIM%3d" width="105" height="29" alt="Microsoft" title="" border="0" /></td></tr></table><div style="display:none"><script type="text/javascript">var gDomain="m.webtrends.com";var gDcsId="dcsjwb9vb00000c932fd0rjc7_5p3t";var gFpc="WT_FPC";if(document.cookie.indexOf(gFpc+"=")==-1){document.write("<SCR"+"IPT TYPE='text/javascript' SRC='"+"http"+(window.location.protocol.indexOf('https:')==0?'s':'')+"://"+gDomain+"/"+gDcsId+"/wtid.js"+"'><\/SCR"+"IPT>");}</script><script src="http://js.microsoft.com/library/mnp/2/wt/js/wt.js" type="text/javascript"></script><noscript><img border="0" name="DCSIMG" width="1" height="1" src="http://m.webtrends.com/dcsjwb9vb00000c932fd0rjc7_5p3t/njs.gif?dcsuri=/nojavascript&WT.js=No"/></noscript></div><layer visibility="hide"><div style="display:none"><img alt="" width="0" height="0" border="0" hspace="0" vspace="0" src="http://c.microsoft.com/trans_pixel.asp?source=www&amp;TYPE=PV&amp;p=msj_0597&amp;URI=%2fmsj%2f0597%2fhood0597.aspx&amp;GUID=1F4FC18C-F71E-47FB-8FC9-612F8EE59C61&amp;r=http%3a%2f%2fwww.microsoft.com%2fmsj%2f0597%2fhood0597.aspx&amp;lc=en-us"></div></layer>
	</body>
</html>